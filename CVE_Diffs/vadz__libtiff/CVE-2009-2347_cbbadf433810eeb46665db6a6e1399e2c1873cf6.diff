vadz__libtiff
commit cbbadf433810eeb46665db6a6e1399e2c1873cf6
Author:     bfriesen <bfriesen>
AuthorDate: Thu Aug 20 20:23:52 2009 +0000
Commit:     bfriesen <bfriesen>
CommitDate: Thu Aug 20 20:23:52 2009 +0000

    * tools/{rgb2ycbcr.c, tiff2rgba.c}: Applied patch for
    CVE-2009-2347 libtiff: integer overflows in various inter-color
    space conversion tools.
    http://bugzilla.maptools.org/show_bug.cgi?id=2079

diff --git a/ChangeLog b/ChangeLog
index 50ee3d38..c2b77122 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,10 @@
 2009-08-20  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
+	* tools/{rgb2ycbcr.c, tiff2rgba.c}: Applied patch for
+	CVE-2009-2347 libtiff: integer overflows in various inter-color
+	space conversion tools.
+	http://bugzilla.maptools.org/show_bug.cgi?id=2079
+
 	* configure.ac: Updated autotools.  Autoconf 2.64, Automake 1.11,
 	libtool 2.2.6.  Enabled support for silent build rules
 	(--enable-silent-rules or 'make V=0') and colorized tests.
diff --git a/libtiff/tif_write.c b/libtiff/tif_write.c
index ffbbe59a..a38c8865 100644
--- a/libtiff/tif_write.c
+++ b/libtiff/tif_write.c
@@ -630,7 +630,7 @@ TIFFAppendToStrip(TIFF* tif, tstrip_t strip, tidata_t data, tsize_t cc)
 
             if( td->td_stripbytecount[strip] != 0 
                 && td->td_stripoffset[strip] != 0 
-                && td->td_stripbytecount[strip] >= cc )
+                && (tsize_t) td->td_stripbytecount[strip] >= cc )
             {
                 /* 
                  * There is already tile data on disk, and the new tile
diff --git a/tools/rgb2ycbcr.c b/tools/rgb2ycbcr.c
index 0c41c3e9..84c30009 100644
--- a/tools/rgb2ycbcr.c
+++ b/tools/rgb2ycbcr.c
@@ -34,6 +34,7 @@
 # include <unistd.h>
 #endif
 
+#include "tiffiop.h"
 #include "tiffio.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
@@ -279,13 +280,30 @@ tiffcvt(TIFF* in, TIFF* out)
 	char *stringv;
 	uint32 longv;
 
+	size_t pixel_count;
 	TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &width);
 	TIFFGetField(in, TIFFTAG_IMAGELENGTH, &height);
-	raster = (uint32*)_TIFFmalloc(width * height * sizeof (uint32));
+	pixel_count = width * height;
+
+	/* XXX: Check the integer overflow. */
+	if (!width || !height || pixel_count / width != height) {
+		TIFFError(TIFFFileName(in),
+			  "Malformed input file; "
+			  "can't allocate buffer for raster of %lux%lu size",
+			  (unsigned long)width, (unsigned long)height);
+		return 0;
+	}
+
+	raster = (uint32*)_TIFFCheckMalloc(in, pixel_count, sizeof(uint32),
+					   "raster buffer");
 	if (raster == 0) {
-		TIFFError(TIFFFileName(in), "No space for raster buffer");
+		TIFFError(TIFFFileName(in),
+			  "Requested buffer size is %lu elements %lu each",
+			  (unsigned long)pixel_count,
+			  (unsigned long)sizeof(uint32));
 		return (0);
 	}
+
 	if (!TIFFReadRGBAImage(in, width, height, raster, 0)) {
 		_TIFFfree(raster);
 		return (0);
diff --git a/tools/tiff2rgba.c b/tools/tiff2rgba.c
index 4337deac..60c89b5a 100644
--- a/tools/tiff2rgba.c
+++ b/tools/tiff2rgba.c
@@ -34,6 +34,7 @@
 # include <unistd.h>
 #endif
 
+#include "tiffiop.h"
 #include "tiffio.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
@@ -345,16 +346,27 @@ cvt_whole_image( TIFF *in, TIFF *out )
     uint32* raster;			/* retrieve RGBA image */
     uint32  width, height;		/* image width & height */
     uint32  row;
+    size_t pixel_count;
         
     TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &width);
     TIFFGetField(in, TIFFTAG_IMAGELENGTH, &height);
+    pixel_count = width * height;
+
+    /* XXX: Check the integer overflow. */
+    if (!width || !height || pixel_count / width != height) {
+        TIFFError(TIFFFileName(in),
+		  "Malformed input file; can't allocate buffer for raster of %lux%lu size",
+		  (unsigned long)width, (unsigned long)height);
+        return 0;
+    }
 
     rowsperstrip = TIFFDefaultStripSize(out, rowsperstrip);
     TIFFSetField(out, TIFFTAG_ROWSPERSTRIP, rowsperstrip);
 
-    raster = (uint32*)_TIFFmalloc(width * height * sizeof (uint32));
+    raster = (uint32*)_TIFFCheckMalloc(in, pixel_count, sizeof(uint32), "raster buffer");
     if (raster == 0) {
-        TIFFError(TIFFFileName(in), "No space for raster buffer");
+        TIFFError(TIFFFileName(in), "Requested buffer size is %lu elements %lu each",
+		  (unsigned long)pixel_count, (unsigned long)sizeof(uint32));
         return (0);
     }
 
@@ -378,16 +390,17 @@ cvt_whole_image( TIFF *in, TIFF *out )
      */
     if (no_alpha)
     {
-        int pixel_count = width * height;
+        size_t count = pixel_count;
         unsigned char *src, *dst;
 
 	src = dst = (unsigned char *) raster;
-        while (pixel_count > 0)
+        while (count > 0)
         {
 	    *(dst++) = *(src++);
 	    *(dst++) = *(src++);
 	    *(dst++) = *(src++);
-	    src++, pixel_count--;
+	    src++;
+	    count--;
         }
     }
 
