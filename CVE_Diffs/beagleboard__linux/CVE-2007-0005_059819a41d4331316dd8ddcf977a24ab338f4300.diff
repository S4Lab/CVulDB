beagleboard__linux
commit 059819a41d4331316dd8ddcf977a24ab338f4300
Author:     Marcel Holtmann <marcel@holtmann.org>
AuthorDate: Tue Mar 6 22:12:00 2007 +0100
Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
CommitDate: Tue Mar 6 18:01:04 2007 -0800

    [PATCH] Fix buffer overflow in Omnikey CardMan 4040 driver (CVE-2007-0005)
    
    Based on a patch from Don Howard <dhoward@redhat.com>
    
    When calling write() with a buffer larger than 512 bytes, the
    driver's write buffer overflows, allowing to overwrite the EIP and
    execute arbitrary code with kernel privileges.
    
    In read(), there exists a similar problem, but coming from the device.
    A malicous or buggy device sending more than 512 bytes can overflow
    of the driver's read buffer, with the same effects as above.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Harald Welte <laforge@gnumonks.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/char/pcmcia/cm4040_cs.c b/drivers/char/pcmcia/cm4040_cs.c
index 0e82968c2f38..f2e4ec4fd407 100644
--- a/drivers/char/pcmcia/cm4040_cs.c
+++ b/drivers/char/pcmcia/cm4040_cs.c
@@ -273,6 +273,7 @@ static ssize_t cm4040_read(struct file *filp, char __user *buf,
 	DEBUGP(6, dev, "BytesToRead=%lu\n", bytes_to_read);
 
 	min_bytes_to_read = min(count, bytes_to_read + 5);
+	min_bytes_to_read = min_t(size_t, min_bytes_to_read, READ_WRITE_BUFFER_SIZE);
 
 	DEBUGP(6, dev, "Min=%lu\n", min_bytes_to_read);
 
@@ -340,7 +341,7 @@ static ssize_t cm4040_write(struct file *filp, const char __user *buf,
 		return 0;
 	}
 
-	if (count < 5) {
+	if ((count < 5) || (count > READ_WRITE_BUFFER_SIZE)) {
 		DEBUGP(2, dev, "<- cm4040_write buffersize=%Zd < 5\n", count);
 		return -EIO;
 	}
