franciscofranco__Shamu
commit 3c980dd0bdbbf1fdcd7a2079a5d181b223f56f7a
Author:     Benjamin LaHaise <bcrl@kvack.org>
AuthorDate: Tue Jun 24 13:12:55 2014 -0400
Commit:     Elektroschmock <elektroschmock78@googlemail.com>
CommitDate: Wed Oct 4 19:23:06 2017 +0200

    aio: fix aio request leak when events are reaped by userspace
    
    commit f8567a3845ac05bb28f3c1b478ef752762bd39ef upstream.
    
    The aio cleanups and optimizations by kmo that were merged into the 3.10
    tree added a regression for userspace event reaping.  Specifically, the
    reference counts are not decremented if the event is reaped in userspace,
    leading to the application being unable to submit further aio requests.
    This patch applies to 3.12+.  A separate backport is required for 3.10/3.11.
    This issue was uncovered as part of CVE-2014-0206.
    
    [jmoyer@redhat.com: backported to 3.10]
    Signed-off-by: Benjamin LaHaise <bcrl@kvack.org>
    Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
    Cc: Kent Overstreet <kmo@daterainc.com>
    Cc: Mateusz Guzik <mguzik@redhat.com>
    Cc: Petr Matousek <pmatouse@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/aio.c b/fs/aio.c
index 411f2ecab44..0f2c38f29c4 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -314,7 +314,6 @@ static void free_ioctx(struct kioctx *ctx)
 
 		avail = (head <= ctx->tail ? ctx->tail : ctx->nr_events) - head;
 
-		atomic_sub(avail, &ctx->reqs_active);
 		head += avail;
 		head %= ctx->nr_events;
 	}
@@ -682,6 +681,7 @@ void aio_complete(struct kiocb *iocb, long res, long res2)
 put_rq:
 	/* everything turned out well, dispose of the aiocb. */
 	aio_put_req(iocb);
+	atomic_dec(&ctx->reqs_active);
 
 	/*
 	 * We have to order our ring_info tail store above and test
@@ -761,8 +761,6 @@ static long aio_read_events_ring(struct kioctx *ctx,
 	flush_dcache_page(ctx->ring_pages[0]);
 
 	pr_debug("%li  h%u t%u\n", ret, head, ctx->tail);
-
-	atomic_sub(ret, &ctx->reqs_active);
 out:
 	mutex_unlock(&ctx->ring_lock);
 
