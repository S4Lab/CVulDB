OpenVZ__vzkernel
commit d9ee19fbbc45119b0de71b41a93411361e140a1e
Author:     Cong Wang <xiyou.wangcong@gmail.com>
AuthorDate: Wed Oct 2 13:10:32 2019 +0300
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Tue Oct 15 14:38:40 2019 +0300

    ms/tun: call dev_get_valid_name() before register_netdevice()
    
    ML commit: 0ad646c81b2182f7fa67ec0c8c825e0ee165696d
    
    register_netdevice() could fail early when we have an invalid
    dev name, in which case ->ndo_uninit() is not called. For tun
    device, this is a problem because a timer etc. are already
    initialized and it expects ->ndo_uninit() to clean them up.
    
    We could move these initializations into a ->ndo_init() so
    that register_netdevice() knows better, however this is still
    complicated due to the logic in tun_detach().
    
    Therefore, I choose to just call dev_get_valid_name() before
    register_netdevice(), which is quicker and much easier to audit.
    And for this specific case, it is already enough.
    
    Fixes: 96442e42429e ("tuntap: choose the txq based on rxq")
    Reported-by: Dmitry Alexeev <avekceeb@gmail.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    CVE-2018-7191
    https://jira.sw.ru/browse/PSBM-96332
    
    The patch was re-diffed for vzkernel 3.10.0-957.21.3.vz7.106.x (context
    change only).
    
    Signed-off-by: Evgenii Shatokhin <eshatokhin@virtuozzo.com>
    
    =====================
    Patchset description:
    
    Fixes for CVE-2018-7191
    
    Although it is unclear if CVE-2018-7191 can do any harm to VZ7 or VIP, I
    think, it is better to add the fix anyway.
    
    CVE-2018-7191
    https://jira.sw.ru/browse/PSBM-96332
    
    The problem is that if a user passes an invalid name to ioctl(TUNSETIFF)
    called for /dev/net/tun, the implementation of that ioctl would still call
    register_netdevice(). The latter would fail but
    tun_struct::flow_gc_timer would not be destroyed in that case. If the
    timer could be armed at that moment (not sure if that is possible), it would
    crash the kernel.
    
    The patch set makes sure the name passed to ioctl(TUNSETIFF) is checked
    earlier, to avoid the issue.
    
      [PATCH RH7 1/2] tun: call dev_get_valid_name() before register_netdevice()
      [PATCH RH7 2/2] tun: allow positive return values on dev_get_valid_name() call

diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index d8376a340c1d..957482afed9e 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -2038,6 +2038,9 @@ static int tun_set_iff(struct net *net, struct file *file, struct ifreq *ifr)
 
 		if (!dev)
 			return -ENOMEM;
+		err = dev_get_valid_name(net, dev, name);
+		if (err)
+			goto err_free_dev;
 
 		dev_net_set(dev, net);
 		dev->rtnl_link_ops = &tun_link_ops;
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index bec955f1b67f..b049b46d48ac 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3799,6 +3799,9 @@ void ether_setup_rh(struct net_device *dev);
 struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 				    void (*setup)(struct net_device *),
 				    unsigned int txqs, unsigned int rxqs);
+int dev_get_valid_name(struct net *net, struct net_device *dev,
+		       const char *name);
+
 #define alloc_netdev(sizeof_priv, name, setup) \
 	alloc_netdev_mqs(sizeof_priv, name, setup, 1, 1)
 
diff --git a/net/core/dev.c b/net/core/dev.c
index 4c3399f8b6d5..61d2170f6010 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -1139,9 +1139,8 @@ static int dev_alloc_name_ns(struct net *net,
 	return ret;
 }
 
-static int dev_get_valid_name(struct net *net,
-			      struct net_device *dev,
-			      const char *name)
+int dev_get_valid_name(struct net *net, struct net_device *dev,
+		       const char *name)
 {
 	BUG_ON(!net);
 
@@ -1157,6 +1156,7 @@ static int dev_get_valid_name(struct net *net,
 
 	return 0;
 }
+EXPORT_SYMBOL(dev_get_valid_name);
 
 /**
  *	dev_change_name - change name of a device
