OpenVZ__vzkernel
commit d77bbdf823fcef8212ad3509aeb8c13fce7730b7
Author:     Jan H. Schönherr <jschoenh@amazon.de>
AuthorDate: Mon Sep 25 14:15:48 2017 +0000
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Mon Jan 15 14:18:02 2018 +0300

    KVM: VMX: Do not BUG() on out-of-bounds guest IRQ
    
    The value of the guest_irq argument to vmx_update_pi_irte() is
    ultimately coming from a KVM_IRQFD API call. Do not BUG() in
    vmx_update_pi_irte() if the value is out-of bounds. (Especially,
    since KVM as a whole seems to hang after that.)
    
    Instead, print a message only once if we find that we don't have a
    route for a certain IRQ (which can be out-of-bounds or within the
    array).
    
    This fixes CVE-2017-1000252.
    
    Fixes: efc644048ecde54 ("KVM: x86: Update IRTE for posted-interrupts")
    Signed-off-by: Jan H. Schönherr <jschoenh@amazon.de>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    (cherry picked from commit 3a8b0677fc6180a467e26cc32ce6b0c09a32f9bb)
    fix #PSBM-72381
    Signed-off-by: Denis Plotnikov <dplotnikov@virtuozzo.com>

diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 60b0e688e68e..3bfe6f8ac09d 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -10836,7 +10836,7 @@ static int vmx_update_pi_irte(struct kvm *kvm, unsigned int host_irq,
 	struct kvm_lapic_irq irq;
 	struct kvm_vcpu *vcpu;
 	struct vcpu_data vcpu_info;
-	int idx, ret = -EINVAL;
+	int idx, ret = 0;
 
 	if (!kvm_arch_has_assigned_device(kvm) ||
 		!irq_remapping_cap(IRQ_POSTING_CAP))
@@ -10844,7 +10844,12 @@ static int vmx_update_pi_irte(struct kvm *kvm, unsigned int host_irq,
 
 	idx = srcu_read_lock(&kvm->irq_srcu);
 	irq_rt = srcu_dereference(kvm->irq_routing, &kvm->irq_srcu);
-	BUG_ON(guest_irq >= irq_rt->nr_rt_entries);
+	if (guest_irq >= irq_rt->nr_rt_entries ||
+	    hlist_empty(&irq_rt->map[guest_irq])) {
+		pr_warn_once("no route for guest_irq %u/%u (broken user space?)\n",
+			     guest_irq, irq_rt->nr_rt_entries);
+		goto out;
+	}
 
 	hlist_for_each_entry(e, &irq_rt->map[guest_irq], link) {
 		if (e->type != KVM_IRQ_ROUTING_MSI)
