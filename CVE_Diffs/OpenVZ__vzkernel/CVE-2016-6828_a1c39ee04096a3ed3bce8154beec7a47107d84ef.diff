OpenVZ__vzkernel
commit a1c39ee04096a3ed3bce8154beec7a47107d84ef
Author:     Eric Dumazet <edumazet@google.com>
AuthorDate: Mon Nov 28 15:21:57 2016 +0400
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Tue Nov 29 15:35:44 2016 +0400

    ms/tcp: fix use after free in tcp_xmit_retransmit_queue()
    
    When tcp_sendmsg() allocates a fresh and empty skb, it puts it at the
    tail of the write queue using tcp_add_write_queue_tail()
    
    Then it attempts to copy user data into this fresh skb.
    
    If the copy fails, we undo the work and remove the fresh skb.
    
    Unfortunately, this undo lacks the change done to tp->highest_sack and
    we can leave a dangling pointer (to a freed skb)
    
    Later, tcp_xmit_retransmit_queue() can dereference this pointer and
    access freed memory. For regular kernels where memory is not unmapped,
    this might cause SACK bugs because tcp_highest_sack_seq() is buggy,
    returning garbage instead of tp->snd_nxt, but with various debug
    features like CONFIG_DEBUG_PAGEALLOC, this can crash the kernel.
    
    This bug was found by Marco Grassi thanks to syzkaller.
    
    Fixes: 6859d49475d4 ("[TCP]: Abstract tp->highest_sack accessing & point to next skb")
    Reported-by: Marco Grassi <marco.gra@gmail.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ilpo JÃ¤rvinen <ilpo.jarvinen@helsinki.fi>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    Commit bb1fceca22492109be12640d49f5ea5a544c6bb4 in the mainline kernel.
    
    Signed-off-by: Evgenii Shatokhin <eshatokhin@virtuozzo.com>
    
    Fix for CVE-2016-6828 from RK-Vz7.15.2
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Cyrill Gorcunov <gorcunov@openvz.org>

diff --git a/include/net/tcp.h b/include/net/tcp.h
index a45542021b16..0c242d3aaeea 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -1466,6 +1466,8 @@ static inline void tcp_check_send_head(struct sock *sk, struct sk_buff *skb_unli
 {
 	if (sk->sk_send_head == skb_unlinked)
 		sk->sk_send_head = NULL;
+	if (tcp_sk(sk)->highest_sack == skb_unlinked)
+		tcp_sk(sk)->highest_sack = NULL;
 }
 
 static inline void tcp_init_send_head(struct sock *sk)
