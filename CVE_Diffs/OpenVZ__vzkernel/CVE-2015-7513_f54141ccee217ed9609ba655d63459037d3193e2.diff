OpenVZ__vzkernel
commit f54141ccee217ed9609ba655d63459037d3193e2
Author:     Andrew Honig <ahonig@google.com>
AuthorDate: Wed Feb 3 19:24:11 2016 +0400
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Wed Feb 3 19:24:11 2016 +0400

    ms/KVM: x86: Reload pit counters for all channels when restoring state
    
    ms commit: 0185604c2d82c560dab2f2933a18f797e74ab5a8
    
        KVM: x86: Reload pit counters for all channels when restoring state
    
        Currently if userspace restores the pit counters with a count of 0
        on channels 1 or 2 and the guest attempts to read the count on those
        channels, then KVM will perform a mod of 0 and crash.  This will ensure
        that 0 values are converted to 65536 as per the spec.
    
        This is CVE-2015-7513.
    
        Signed-off-by: Andy Honig <ahonig@google.com>
        Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    
    khorenko@: RedHat has decided not to fix this security issue for some reason.
    https://bugzilla.redhat.com/show_bug.cgi?id=1284847

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 7406813942c5..7649178c4fd5 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -3549,9 +3549,11 @@ static int kvm_vm_ioctl_get_pit(struct kvm *kvm, struct kvm_pit_state *ps)
 
 static int kvm_vm_ioctl_set_pit(struct kvm *kvm, struct kvm_pit_state *ps)
 {
+	int i;
 	mutex_lock(&kvm->arch.vpit->pit_state.lock);
 	memcpy(&kvm->arch.vpit->pit_state, ps, sizeof(struct kvm_pit_state));
-	kvm_pit_load_count(kvm, 0, ps->channels[0].count, 0);
+	for (i = 0; i < 3; i++)
+		kvm_pit_load_count(kvm, i, ps->channels[i].count, 0);
 	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
 	return 0;
 }
@@ -3570,6 +3572,7 @@ static int kvm_vm_ioctl_get_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)
 static int kvm_vm_ioctl_set_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)
 {
 	int start = 0;
+	int i;
 	u32 prev_legacy, cur_legacy;
 	mutex_lock(&kvm->arch.vpit->pit_state.lock);
 	prev_legacy = kvm->arch.vpit->pit_state.flags & KVM_PIT_FLAGS_HPET_LEGACY;
@@ -3579,7 +3582,8 @@ static int kvm_vm_ioctl_set_pit2(struct kvm *kvm, struct kvm_pit_state2 *ps)
 	memcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels,
 	       sizeof(kvm->arch.vpit->pit_state.channels));
 	kvm->arch.vpit->pit_state.flags = ps->flags;
-	kvm_pit_load_count(kvm, 0, kvm->arch.vpit->pit_state.channels[0].count, start);
+	for (i = 0; i < 3; i++)
+		kvm_pit_load_count(kvm, i, kvm->arch.vpit->pit_state.channels[i].count, start);
 	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
 	return 0;
 }
