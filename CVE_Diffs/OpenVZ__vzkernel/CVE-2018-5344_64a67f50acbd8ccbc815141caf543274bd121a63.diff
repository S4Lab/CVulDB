OpenVZ__vzkernel
commit 64a67f50acbd8ccbc815141caf543274bd121a63
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Fri Jan 5 16:26:00 2018 -0800
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Fri May 25 13:14:33 2018 +0300

    ms/loop: fix concurrent lo_open/lo_release
    
    范龙飞 reports that KASAN can report a use-after-free in __lock_acquire.
    The reason is due to insufficient serialization in lo_release(), which
    will continue to use the loop device even after it has decremented the
    lo_refcnt to zero.
    
    In the meantime, another process can come in, open the loop device
    again as it is being shut down. Confusion ensues.
    
    Reported-by: 范龙飞 <long7573@126.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    
    (cherry picked from commit ae6650163c66a7eff1acd6eb8b0f752dcfa8eba5)
    CVE-2018-5344
    https://jira.sw.ru/browse/PSBM-80876
    
    Signed-off-by: Evgenii Shatokhin <eshatokhin@virtuozzo.com>

diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index c627ef6cb0a9..0d3f632c73f2 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -1533,9 +1533,8 @@ out:
 	return err;
 }
 
-static void lo_release(struct gendisk *disk, fmode_t mode)
+static void __lo_release(struct loop_device *lo)
 {
-	struct loop_device *lo = disk->private_data;
 	int err;
 
 	if (atomic_dec_return(&lo->lo_refcnt))
@@ -1561,6 +1560,13 @@ static void lo_release(struct gendisk *disk, fmode_t mode)
 	mutex_unlock(&lo->lo_ctl_mutex);
 }
 
+static void lo_release(struct gendisk *disk, fmode_t mode)
+{
+	mutex_lock(&loop_index_mutex);
+	__lo_release(disk->private_data);
+	mutex_unlock(&loop_index_mutex);
+}
+
 static const struct block_device_operations lo_fops = {
 	.owner =	THIS_MODULE,
 	.open =		lo_open,
