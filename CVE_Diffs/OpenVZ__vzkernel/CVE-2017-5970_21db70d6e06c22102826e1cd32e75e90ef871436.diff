OpenVZ__vzkernel
commit 21db70d6e06c22102826e1cd32e75e90ef871436
Author:     Eric Dumazet <edumazet@google.com>
AuthorDate: Sat Feb 4 11:16:52 2017 -0800
Commit:     Konstantin Khorenko <khorenko@virtuozzo.com>
CommitDate: Thu Jun 29 19:31:29 2017 +0400

    ms/ipv4: keep skb->dst around in presence of IP options
    
    Andrey Konovalov got crashes in __ip_options_echo() when a NULL skb->dst
    is accessed.
    
    ipv4_pktinfo_prepare() should not drop the dst if (evil) IP options
    are present.
    
    We could refine the test to the presence of ts_needtime or srr,
    but IP options are not often used, so let's be conservative.
    
    Thanks to syzkaller team for finding this bug.
    
    Fixes: d826eb14ecef ("ipv4: PKTINFO doesnt need dst reference")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    (cherry picked from commit 34b2cef20f19c87999fff3da4071e66937db9644)
    
    https://jira.sw.ru/browse/PSBM-65410
    CVE-2017-5970 kernel: ipv4: Invalid IP options could cause skb->dst drop
    
    https://bugzilla.redhat.com/show_bug.cgi?id=1421638
    A vulnerability was found in the Linux kernel. A remote attacker that can send
    packets containing malicious IP options could cause the ipv4_pktinfo_prepare()
    function to drop/free the dst. This could result in a system crash or possible
    privilege escalation if the attacker is able to place crafted objects in this
    dropped location.
    
    References:
    
    http://seclists.org/oss-sec/2017/q1/414
    https://patchwork.ozlabs.org/patch/724136/
    
    Signed-off-by: Konstantin Khorenko <khorenko@virtuozzo.com>

diff --git a/net/ipv4/ip_sockglue.c b/net/ipv4/ip_sockglue.c
index 786b324d55d8..c5b96c0f4c36 100644
--- a/net/ipv4/ip_sockglue.c
+++ b/net/ipv4/ip_sockglue.c
@@ -1093,7 +1093,14 @@ void ipv4_pktinfo_prepare(const struct sock *sk, struct sk_buff *skb)
 		pktinfo->ipi_ifindex = 0;
 		pktinfo->ipi_spec_dst.s_addr = 0;
 	}
-	skb_dst_drop(skb);
+	/* We need to keep the dst for __ip_options_echo()
+	 * We could restrict the test to opt.ts_needtime || opt.srr,
+	 * but the following is good enough as IP options are not often used.
+	 */
+	if (unlikely(IPCB(skb)->opt.optlen))
+		skb_dst_force(skb);
+	else
+		skb_dst_drop(skb);
 }
 
 int ip_setsockopt(struct sock *sk, int level,
