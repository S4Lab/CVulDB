aosp-mirror__platform_external_qemu
commit 4ce0b750a20a055736b073fa7dff3eba6f6e3b73
Author:     Daniel P. Berrangé <berrange@redhat.com>
AuthorDate: Mon May 21 22:54:22 2018 +0100
Commit:     Michael Roth <mdroth@linux.vnet.ibm.com>
CommitDate: Wed Jun 20 20:45:07 2018 -0500

    i386: define the 'ssbd' CPUID feature bit (CVE-2018-3639)
    
    New microcode introduces the "Speculative Store Bypass Disable"
    CPUID feature bit. This needs to be exposed to guest OS to allow
    them to protect against CVE-2018-3639.
    
    Signed-off-by: Daniel P. Berrangé <berrange@redhat.com>
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Message-Id: <20180521215424.13520-2-berrange@redhat.com>
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    (cherry picked from commit d19d1f965904a533998739698020ff4ee8a103da)
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

diff --git a/target/i386/cpu.c b/target/i386/cpu.c
index 70c8ae82d5..bc087e95c3 100644
--- a/target/i386/cpu.c
+++ b/target/i386/cpu.c
@@ -459,7 +459,7 @@ static FeatureWordInfo feature_word_info[FEATURE_WORDS] = {
             NULL, NULL, NULL, NULL,
             NULL, NULL, NULL, NULL,
             NULL, NULL, "spec-ctrl", NULL,
-            NULL, NULL, NULL, NULL,
+            NULL, NULL, NULL, "ssbd",
         },
         .cpuid_eax = 7,
         .cpuid_needs_ecx = true, .cpuid_ecx = 0,
diff --git a/target/i386/cpu.h b/target/i386/cpu.h
index f3d0ebb673..422d99d80c 100644
--- a/target/i386/cpu.h
+++ b/target/i386/cpu.h
@@ -644,6 +644,7 @@ typedef uint32_t FeatureWordArray[FEATURE_WORDS];
 #define CPUID_7_0_EDX_AVX512_4VNNIW (1U << 2) /* AVX512 Neural Network Instructions */
 #define CPUID_7_0_EDX_AVX512_4FMAPS (1U << 3) /* AVX512 Multiply Accumulation Single Precision */
 #define CPUID_7_0_EDX_SPEC_CTRL     (1U << 26) /* Speculation Control */
+#define CPUID_7_0_EDX_SPEC_CTRL_SSBD  (1U << 31) /* Speculative Store Bypass Disable */
 
 #define CPUID_8000_0008_EBX_IBPB    (1U << 12) /* Indirect Branch Prediction Barrier */
 
