beagleboard__buildroot
commit efbd36a141c51cfbae83dd63f902654b247943d8
Author:     Waldemar Brodkorb <wbx@openadk.org>
AuthorDate: Thu Aug 11 20:18:52 2016 +0200
Commit:     Peter Korsgaard <peter@korsgaard.com>
CommitDate: Tue Aug 16 08:02:28 2016 +0200

    uclibc: add upstream patch for CVE-2016-4429
    
    Add security related bugfix to fix CVE-2016-4429 from
    GNU libc project.
    
    Signed-off-by: Waldemar Brodkorb <wbx@openadk.org>
    Signed-off-by: Peter Korsgaard <peter@korsgaard.com>

diff --git a/package/uclibc/0002-sunrpc-Do-not-use-alloca-in-clntudp_call.patch b/package/uclibc/0002-sunrpc-Do-not-use-alloca-in-clntudp_call.patch
new file mode 100644
index 0000000000..b0c523cc5a
--- /dev/null
+++ b/package/uclibc/0002-sunrpc-Do-not-use-alloca-in-clntudp_call.patch
@@ -0,0 +1,59 @@
+From 9213ad631513d0e67d9d31465c9cdb3f3dde0399 Mon Sep 17 00:00:00 2001
+From: Waldemar Brodkorb <wbx@uclibc-ng.org>
+Date: Fri, 5 Aug 2016 21:33:44 +0200
+Subject: [PATCH 2/3] sunrpc: Do not use alloca in clntudp_call
+
+CVE-2016-4429:
+The call is technically in a loop, and under certain circumstances
+(which are quite difficult to reproduce in a test case), alloca
+can be invoked repeatedly during a single call to clntudp_call.
+As a result, the available stack space can be exhausted (even
+though individual alloca sizes are bounded implicitly by what
+can fit into a UDP packet, as a side effect of the earlier
+successful send operation).
+
+From GNU libc:
+https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commit;h=bc779a1a5b3035133024b21e2f339fe4219fb11c
+
+Signed-off-by: Waldemar Brodkorb <wbx@uclibc-ng.org>
+---
+ libc/inet/rpc/clnt_udp.c | 10 +++++++++-
+ 1 file changed, 9 insertions(+), 1 deletion(-)
+
+diff --git a/libc/inet/rpc/clnt_udp.c b/libc/inet/rpc/clnt_udp.c
+index 4fc55b7..ce7e9e6 100644
+--- a/libc/inet/rpc/clnt_udp.c
++++ b/libc/inet/rpc/clnt_udp.c
+@@ -368,9 +368,15 @@ send_again:
+ 	  struct sock_extended_err *e;
+ 	  struct sockaddr_in err_addr;
+ 	  struct iovec iov;
+-	  char *cbuf = (char *) alloca (outlen + 256);
++	  char *cbuf = malloc (outlen + 256);
+ 	  int ret;
+ 
++	  if (cbuf == NULL)
++	    {
++	      cu->cu_error.re_errno = errno;
++	      return (cu->cu_error.re_status = RPC_CANTRECV);
++	    }
++
+ 	  iov.iov_base = cbuf + 256;
+ 	  iov.iov_len = outlen;
+ 	  msg.msg_name = (void *) &err_addr;
+@@ -395,10 +401,12 @@ send_again:
+ 		 cmsg = CMSG_NXTHDR (&msg, cmsg))
+ 	      if (cmsg->cmsg_level == SOL_IP && cmsg->cmsg_type == IP_RECVERR)
+ 		{
++		  free (cbuf);
+ 		  e = (struct sock_extended_err *) CMSG_DATA(cmsg);
+ 		  cu->cu_error.re_errno = e->ee_errno;
+ 		  return (cu->cu_error.re_status = RPC_CANTRECV);
+ 		}
++	  free (cbuf);
+ 	}
+ #endif
+       do
+-- 
+2.7.4 (Apple Git-66)
+
