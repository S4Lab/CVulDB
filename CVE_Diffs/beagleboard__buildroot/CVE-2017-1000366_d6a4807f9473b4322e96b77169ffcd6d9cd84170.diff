beagleboard__buildroot
commit d6a4807f9473b4322e96b77169ffcd6d9cd84170
Author:     Romain Naour <romain.naour@gmail.com>
AuthorDate: Sat Sep 23 23:24:06 2017 +0200
Commit:     Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
CommitDate: Wed Sep 27 22:58:52 2017 +0200

    package/glibc: bump to 2.26
    
    Drop upstream patch:
    
    0001-sh-Fix-building-with-gcc5-6.patch
    https://sourceware.org/git/?p=glibc.git;a=commit;h=d40dbe722f004f999b589de776f7e57e564dda01
    
    0002-CVE-2017-1000366-Ignore-LD_LIBRARY_PATH-for-AT_SECUR.patch
    https://sourceware.org/git/?p=glibc.git;a=commit;h=f6110a8fee2ca36f8e2d2abecf3cba9fa7b8ea7d
    
    0003-ld.so-Reject-overly-long-LD_PRELOAD-path-elements.patch
    https://sourceware.org/git/?p=glibc.git;a=commit;h=6d0ba622891bed9d8394eef1935add53003b12e8
    
    0004-ld.so-Reject-overly-long-LD_AUDIT-path-elements.patch
    
    https://sourceware.org/git/?p=glibc.git;a=commit;h=81b82fb966ffbd94353f793ad17116c6088dedd9
    
    0005-fix-binutils-2-29-build.patch
    https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff_plain;h=388b4f1a02f3a801965028bbfcd48d905638b797
    
    0006-i686-Add-missing-IS_IN-libc-guards-to-vectorized-strcspn.patch
    https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff_plain;h=69052a3a95da37169a08f9e59b2cc1808312753c
    
    0006-sh4-trap.patch
    https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff_plain;h=db3d848e154b00071f4a5e729d5884efad410109
    
    But 2.26 version introduced quite a few regressions on x86, x86_64 and
    powerpc64le when float128 support was added. All these issues are now
    fixed in the glibc 2.26 stable branch.
    
    Backport patches from glibc 2.26 stable branch related to bug 21930.
    Take all patches listed in this bug report in order to have all fix
    for this issue [1] [2].
    
    Fixes gnuradio build:
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp: In function ‘std::size_t boost::hash_detail::float_hash_value(T)’:
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp:210:21: error: expected primary-expression before ‘float’
                 switch (fpclassify(v))
                         ^
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp:210:21: error: expected primary-expression before ‘long’
                 switch (fpclassify(v))
                         ^
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp:210:21: error: found ‘:’ in nested-name-specifier, expected ‘::’
                 switch (fpclassify(v))
                         ^
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp:210:21: error: ‘_Float128’ is not a class or namespace
                 switch (fpclassify(v))
                         ^
    
    [...]/sysroot/usr/include/boost/functional/hash/detail/hash_float.hpp:210:21: error: ‘_Generic’ was not declared in this scope
                 switch (fpclassify(v))
                         ^
    
    Also backport fix for glibc bug 22146.
    Without this patch some C++ applications (jsoncpp, mesa3d and kodi) fail
    to build due to an issue while building the toolchain.
    
    A test in the libstdc++ configure script fail when -Os and float128 are
    used.
    
    See the bug report for details [3].
    
    [1] https://sourceware.org/ml/libc-alpha/2017-08/msg00586.html
    [2] https://sourceware.org/bugzilla/show_bug.cgi?id=21930
    [3] https://sourceware.org/bugzilla/show_bug.cgi?id=22146
    
    Signed-off-by: Romain Naour <romain.naour@gmail.com>
    Cc: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Tested-by: Bernd Kuhls <bernd.kuhls@t-online.de>
    Signed-off-by: Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>

diff --git a/package/glibc/0001-Do-not-use-__builtin_types_compatible_p-in-C-mode-bu.patch b/package/glibc/0001-Do-not-use-__builtin_types_compatible_p-in-C-mode-bu.patch
new file mode 100644
index 0000000000..27a785e310
--- /dev/null
+++ b/package/glibc/0001-Do-not-use-__builtin_types_compatible_p-in-C-mode-bu.patch
@@ -0,0 +1,50 @@
+From f7439f9b1089e17b6721f28e228682831a2f0135 Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gftg@linux.vnet.ibm.com>
+Date: Mon, 21 Aug 2017 14:23:27 +0200
+Subject: [PATCH] Do not use __builtin_types_compatible_p in C++ mode (bug
+ 21930)
+
+The logic to define isinf for float128 depends on the availability of
+__builtin_types_compatible_p, which is only available in C mode,
+however, the conditionals do not check for C or C++ mode.  This lead to
+an error in libstdc++ configure, as reported by bug 21930.
+
+This patch adds a conditional for C mode in the definition of isinf for
+float128.  No definition is provided in C++ mode, since libstdc++
+headers undefine isinf.
+
+Tested for powerpc64le (glibc test suite and libstdc++-v3 configure).
+
+	[BZ #21930]
+	* math/math.h (isinf): Check if in C or C++ mode before using
+	__builtin_types_compatible_p, since this is a C mode feature.
+
+(cherry picked from commit 47a67213a9f51c5f8816d240500b10db605d8b77)
+[Romain rebase on glibc 2.26]
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ math/math.h | 8 ++++++--
+ 1 file changed, 6 insertions(+), 2 deletions(-)
+
+diff --git a/math/math.h b/math/math.h
+index e217080..dea8dbe 100644
+--- a/math/math.h
++++ b/math/math.h
+@@ -442,8 +442,12 @@ enum
+ 
+ /* Return nonzero value if X is positive or negative infinity.  */
+ # if __HAVE_DISTINCT_FLOAT128 && !__GNUC_PREREQ (7,0) \
+-     && !defined __SUPPORT_SNAN__
+-   /* __builtin_isinf_sign is broken for float128 only before GCC 7.0.  */
++     && !defined __SUPPORT_SNAN__ && !defined __cplusplus
++   /* Since __builtin_isinf_sign is broken for float128 before GCC 7.0,
++      use the helper function, __isinff128, with older compilers.  This is
++      only provided for C mode, because in C++ mode, GCC has no support
++      for __builtin_types_compatible_p (and when in C++ mode, this macro is
++      not used anyway, because libstdc++ headers undefine it).  */
+ #  define isinf(x) \
+     (__builtin_types_compatible_p (__typeof (x), _Float128) \
+      ? __isinff128 (x) : __builtin_isinf_sign (x))
+-- 
+2.9.5
+
diff --git a/package/glibc/0001-sh-Fix-building-with-gcc5-6.patch b/package/glibc/0001-sh-Fix-building-with-gcc5-6.patch
deleted file mode 100644
index fa43bddc8c..0000000000
--- a/package/glibc/0001-sh-Fix-building-with-gcc5-6.patch
+++ /dev/null
@@ -1,56 +0,0 @@
-From 3840d4c2add1dd282f5f01fa51720b2d5b8fd8d2 Mon Sep 17 00:00:00 2001
-From: Alexey Neyman <stilor@att.net>
-Date: Wed, 8 Feb 2017 16:00:57 -0200
-Subject: [PATCH] sh: Fix building with gcc5/6
-
-Build glibc for sh4-unknown-linux-gnu currently fails if one's
-using GCC5/6: in dl-conflict.c, the elf_machine_rela() function
-is called with NULL as its 3rd argument, sym. The implementation
-of that function in sysdeps/sh/dl-machine.h dereferences that pointer:
-
-const Elf32_Sym *const refsym = sym;
-...
-if (map == &GL(dl_rtld_map))
-  value -= map->l_addr + refsym->st_value + reloc->r_addend;
-
-GCC discovers a null pointer dereference, and in accordance with
--fdelete-null-pointer-checks (which is enabled in -O2) replaces this
-code with a trap - which, as SH does not implement a trap pattern in
-GCC, evaluates to an abort() call. This abort() call pulls many more
-objects from libc_nonshared.a, eventually resulting in link failure
-due to multiple definitions for a number of symbols.
-
-As far as I see, the conditional before this code is always false in
-rtld: _dl_resolve_conflicts() is called with main_map as the first
-argument, not GL(_dl_rtld_map), but since that call is in yet another
-compilation unit, GCC does not know about it. Patch that wraps this
-conditional into !defined RESOLVE_CONFLICT_FIND_MAP attached.
-
-	* sysdeps/sh/dl-machine.h (elf_machine_rela): The condition
-	in R_SH_DIR32 case is always false when inlined from
-	dl-conflict.c. Ifdef out to prevent GCC from insertin an
-	abort() call.
-
-[Waldemar: backport of
-https://sourceware.org/git/?p=glibc.git;a=commit;h=d40dbe722f004f999b589de776f7e57e564dda01.]
-Signed-off-by: Waldemar Brodkorb <wbx@openadk.org>
----
- sysdeps/sh/dl-machine.h | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/sysdeps/sh/dl-machine.h b/sysdeps/sh/dl-machine.h
-index 449deea..2b468af 100644
---- a/sysdeps/sh/dl-machine.h
-+++ b/sysdeps/sh/dl-machine.h
-@@ -389,7 +389,7 @@ elf_machine_rela (struct link_map *map, const Elf32_Rela *reloc,
- 	  break;
- 	case R_SH_DIR32:
- 	  {
--#ifndef RTLD_BOOTSTRAP
-+#if !defined RTLD_BOOTSTRAP && !defined RESOLVE_CONFLICT_FIND_MAP
- 	   /* This is defined in rtld.c, but nowhere in the static
- 	      libc.a; make the reference weak so static programs can
- 	      still link.  This declaration cannot be done when
--- 
-2.7.4
-
diff --git a/package/glibc/0002-CVE-2017-1000366-Ignore-LD_LIBRARY_PATH-for-AT_SECUR.patch b/package/glibc/0002-CVE-2017-1000366-Ignore-LD_LIBRARY_PATH-for-AT_SECUR.patch
deleted file mode 100644
index d701294deb..0000000000
--- a/package/glibc/0002-CVE-2017-1000366-Ignore-LD_LIBRARY_PATH-for-AT_SECUR.patch
+++ /dev/null
@@ -1,35 +0,0 @@
-From f6110a8fee2ca36f8e2d2abecf3cba9fa7b8ea7d Mon Sep 17 00:00:00 2001
-From: Florian Weimer <fweimer@redhat.com>
-Date: Mon, 19 Jun 2017 17:09:55 +0200
-Subject: [PATCH] CVE-2017-1000366: Ignore LD_LIBRARY_PATH for AT_SECURE=1
- programs [BZ #21624]
-
-LD_LIBRARY_PATH can only be used to reorder system search paths, which
-is not useful functionality.
-
-This makes an exploitable unbounded alloca in _dl_init_paths unreachable
-for AT_SECURE=1 programs.
-
-[Peter: Drop ChangeLog modification]
-Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
----
- elf/rtld.c | 3 ++-
- 1 file changed, 8 insertions(+), 1 deletion(-)
-
-diff --git a/elf/rtld.c b/elf/rtld.c
-index 2446a87680..2269dbec81 100644
---- a/elf/rtld.c
-+++ b/elf/rtld.c
-@@ -2422,7 +2422,8 @@ process_envvars (enum mode *modep)
- 
- 	case 12:
- 	  /* The library search path.  */
--	  if (memcmp (envline, "LIBRARY_PATH", 12) == 0)
-+	  if (!__libc_enable_secure
-+	      && memcmp (envline, "LIBRARY_PATH", 12) == 0)
- 	    {
- 	      library_path = &envline[13];
- 	      break;
--- 
-2.11.0
-
diff --git a/package/glibc/0002-Do-not-use-generic-selection-in-C-mode.patch b/package/glibc/0002-Do-not-use-generic-selection-in-C-mode.patch
new file mode 100644
index 0000000000..7321eebd6e
--- /dev/null
+++ b/package/glibc/0002-Do-not-use-generic-selection-in-C-mode.patch
@@ -0,0 +1,56 @@
+From bb21afc362a3ecba07ab386a0bc4385e75fbd4b5 Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gftg@linux.vnet.ibm.com>
+Date: Mon, 14 Aug 2017 17:51:51 -0300
+Subject: [PATCH] Do not use generic selection in C++ mode
+
+The logic to protect the use of generic selection (_Generic) does not
+check for C or C++ mode, however, generic selection is a C-only
+feature.
+
+Tested for powerpc64le.
+
+	* misc/sys/cdefs.h (__HAVE_GENERIC_SELECTION): Define to 0, if
+	in C++ mode.
+
+(cherry picked from commit 6913ad65e00bb32417ad39c41d292b976171e27e)
+[Romain rebase on glibc 2.26]
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ misc/sys/cdefs.h | 19 ++++++++++---------
+ 1 file changed, 10 insertions(+), 9 deletions(-)
+
+diff --git a/misc/sys/cdefs.h b/misc/sys/cdefs.h
+index 06523bf..0c80821 100644
+--- a/misc/sys/cdefs.h
++++ b/misc/sys/cdefs.h
+@@ -464,17 +464,18 @@
+ # define __glibc_macro_warning(msg)
+ #endif
+ 
+-/* Support for generic selection (ISO C11) is available in GCC since
+-   version 4.9.  Previous versions do not provide generic selection,
+-   even though they might set __STDC_VERSION__ to 201112L, when in
+-   -std=c11 mode.  Thus, we must check for !defined __GNUC__ when
+-   testing __STDC_VERSION__ for generic selection support.
++/* Generic selection (ISO C11) is a C-only feature, available in GCC
++   since version 4.9.  Previous versions do not provide generic
++   selection, even though they might set __STDC_VERSION__ to 201112L,
++   when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
++   when testing __STDC_VERSION__ for generic selection support.
+    On the other hand, Clang also defines __GNUC__, so a clang-specific
+    check is required to enable the use of generic selection.  */
+-#if __GNUC_PREREQ (4, 9) \
+-    || __glibc_clang_has_extension (c_generic_selections) \
+-    || (!defined __GNUC__ && defined __STDC_VERSION__ \
+-	&& __STDC_VERSION__ >= 201112L)
++#if !defined __cplusplus \
++    && (__GNUC_PREREQ (4, 9) \
++	|| __glibc_clang_has_extension (c_generic_selections) \
++	|| (!defined __GNUC__ && defined __STDC_VERSION__ \
++	    && __STDC_VERSION__ >= 201112L))
+ # define __HAVE_GENERIC_SELECTION 1
+ #else
+ # define __HAVE_GENERIC_SELECTION 0
+-- 
+2.9.5
+
diff --git a/package/glibc/0003-Provide-a-C-version-of-issignaling-that-does-not-use.patch b/package/glibc/0003-Provide-a-C-version-of-issignaling-that-does-not-use.patch
new file mode 100644
index 0000000000..b9cd3df396
--- /dev/null
+++ b/package/glibc/0003-Provide-a-C-version-of-issignaling-that-does-not-use.patch
@@ -0,0 +1,225 @@
+From 9bcf391a21677c6d5fa1c2be71554ec181e24f39 Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gftg@linux.vnet.ibm.com>
+Date: Mon, 14 Aug 2017 13:46:15 -0300
+Subject: [PATCH] Provide a C++ version of issignaling that does not use
+ __MATH_TG
+
+The macro __MATH_TG contains the logic to select between long double and
+_Float128, when these types are ABI-distinct.  This logic relies on
+__builtin_types_compatible_p, which is not available in C++ mode.
+
+On the other hand, C++ function overloading provides the means to
+distinguish between the floating-point types.  The overloading
+resolution will match the correct parameter regardless of type
+qualifiers, i.e.: const and volatile.
+
+Tested for powerpc64le, s390x, and x86_64.
+
+	* math/math.h [defined __cplusplus] (issignaling): Provide a C++
+	definition for issignaling that does not rely on __MATH_TG,
+	since __MATH_TG uses __builtin_types_compatible_p, which is only
+	available in C mode.
+	(CFLAGS-test-math-issignaling.cc): New variable.
+	* math/Makefile [CXX] (tests): Add test-math-issignaling.
+	* math/test-math-issignaling.cc: New test for C++ implementation
+	of type-generic issignaling.
+	* sysdeps/powerpc/powerpc64le/Makefile [subdir == math]
+	(CXXFLAGS-test-math-issignaling.cc): Add -mfloat128 to the build
+	options of test-math-issignaling on powerpc64le.
+
+(cherry picked from commit a16e8bc08edca84d507715c66d6cddbbc7ed3b62)
+[Romain rebase on glibc 2.26]
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ math/Makefile                        |   3 +-
+ math/math.h                          |  19 +++++-
+ math/test-math-issignaling.cc        | 113 +++++++++++++++++++++++++++++++++++
+ sysdeps/powerpc/powerpc64le/Makefile |   1 +
+ 4 files changed, 134 insertions(+), 2 deletions(-)
+ create mode 100644 math/test-math-issignaling.cc
+
+diff --git a/math/Makefile b/math/Makefile
+index e09b0c0..0130fcf 100644
+--- a/math/Makefile
++++ b/math/Makefile
+@@ -203,7 +203,7 @@ tests-static = test-fpucw-static test-fpucw-ieee-static \
+ 	       test-signgam-ullong-static test-signgam-ullong-init-static
+ 
+ ifneq (,$(CXX))
+-tests += test-math-isinff test-math-iszero
++tests += test-math-isinff test-math-iszero test-math-issignaling
+ endif
+ 
+ ifneq (no,$(PERL))
+@@ -350,6 +350,7 @@ CFLAGS-test-signgam-ullong-init-static.c = -std=c99
+ 
+ CFLAGS-test-math-isinff.cc = -std=gnu++11
+ CFLAGS-test-math-iszero.cc = -std=gnu++11
++CFLAGS-test-math-issignaling.cc = -std=gnu++11
+ 
+ CFLAGS-test-iszero-excess-precision.c = -fexcess-precision=standard
+ CFLAGS-test-iseqsig-excess-precision.c = -fexcess-precision=standard
+diff --git a/math/math.h b/math/math.h
+index dea8dbe..add86af 100644
+--- a/math/math.h
++++ b/math/math.h
+@@ -474,7 +474,24 @@ enum
+ # include <bits/iscanonical.h>
+ 
+ /* Return nonzero value if X is a signaling NaN.  */
+-# define issignaling(x) __MATH_TG ((x), __issignaling, (x))
++# ifndef __cplusplus
++#  define issignaling(x) __MATH_TG ((x), __issignaling, (x))
++# else
++   /* In C++ mode, __MATH_TG cannot be used, because it relies on
++      __builtin_types_compatible_p, which is a C-only builtin.  On the
++      other hand, overloading provides the means to distinguish between
++      the floating-point types.  The overloading resolution will match
++      the correct parameter (regardless of type qualifiers (i.e.: const
++      and volatile).  */
++extern "C++" {
++inline int issignaling (float __val) { return __issignalingf (__val); }
++inline int issignaling (double __val) { return __issignaling (__val); }
++inline int issignaling (long double __val) { return __issignalingl (__val); }
++#  if __HAVE_DISTINCT_FLOAT128
++inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }
++#  endif
++} /* extern C++ */
++# endif
+ 
+ /* Return nonzero value if X is subnormal.  */
+ # define issubnormal(x) (fpclassify (x) == FP_SUBNORMAL)
+diff --git a/math/test-math-issignaling.cc b/math/test-math-issignaling.cc
+new file mode 100644
+index 0000000..22ae9e1
+--- /dev/null
++++ b/math/test-math-issignaling.cc
+@@ -0,0 +1,113 @@
++/* Test for the C++ implementation of issignaling.
++   Copyright (C) 2017 Free Software Foundation, Inc.
++   This file is part of the GNU C Library.
++
++   The GNU C Library is free software; you can redistribute it and/or
++   modify it under the terms of the GNU Lesser General Public
++   License as published by the Free Software Foundation; either
++   version 2.1 of the License, or (at your option) any later version.
++
++   The GNU C Library is distributed in the hope that it will be useful,
++   but WITHOUT ANY WARRANTY; without even the implied warranty of
++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
++   Lesser General Public License for more details.
++
++   You should have received a copy of the GNU Lesser General Public
++   License along with the GNU C Library; if not, see
++   <http://www.gnu.org/licenses/>.  */
++
++#define _GNU_SOURCE 1
++#include <math.h>
++#include <stdio.h>
++
++#include <limits>
++
++/* There is no signaling_NaN for _Float128 in std::numeric_limits.
++   Include ieee754_float128.h and use the bitfields in the union
++   ieee854_float128.ieee_nan to build a signaling NaN.  */
++#if __HAVE_DISTINCT_FLOAT128
++# include <ieee754_float128.h>
++#endif
++
++static bool errors;
++
++static void
++check (int actual, int expected, const char *actual_expr, int line)
++{
++  if (actual != expected)
++    {
++      errors = true;
++      printf ("%s:%d: error: %s\n", __FILE__, line, actual_expr);
++      printf ("%s:%d:   expected: %d\n", __FILE__, line, expected);
++      printf ("%s:%d:   actual: %d\n", __FILE__, line, actual);
++    }
++}
++
++#define CHECK(actual, expected) \
++  check ((actual), (expected), #actual, __LINE__)
++
++template <class T>
++static void
++check_type ()
++{
++  typedef std::numeric_limits<T> limits;
++  CHECK (issignaling (T{0}), 0);
++  if (limits::has_infinity)
++    {
++      CHECK (issignaling (limits::infinity ()), 0);
++      CHECK (issignaling (-limits::infinity ()), 0);
++    }
++  if (limits::has_quiet_NaN)
++    CHECK (issignaling (limits::quiet_NaN ()), 0);
++  if (limits::has_signaling_NaN)
++    CHECK (issignaling (limits::signaling_NaN ()), 1);
++}
++
++#if __HAVE_DISTINCT_FLOAT128
++static void
++check_float128 ()
++{
++  ieee854_float128 q;
++
++  q.d = 0;
++  CHECK (issignaling (q.d), 0);
++
++  /* Infinity.  */
++  q.ieee.negative = 0;
++  q.ieee.exponent = 0x7FFF;
++  q.ieee.mantissa0 = 0x0000;
++  q.ieee.mantissa1 = 0x00000000;
++  q.ieee.mantissa2 = 0x00000000;
++  q.ieee.mantissa3 = 0x00000000;
++  CHECK (issignaling (q.d), 0);
++
++  /* Quiet NaN.  */
++  q.ieee_nan.quiet_nan = 1;
++  q.ieee_nan.mantissa0 = 0x0000;
++  CHECK (issignaling (q.d), 0);
++
++  /* Still a quiet NaN.  */
++  q.ieee_nan.quiet_nan = 1;
++  q.ieee_nan.mantissa0 = 0x4000;
++  CHECK (issignaling (q.d), 0);
++
++  /* Signaling NaN.  */
++  q.ieee_nan.quiet_nan = 0;
++  q.ieee_nan.mantissa0 = 0x4000;
++  CHECK (issignaling (q.d), 1);
++}
++#endif
++
++static int
++do_test (void)
++{
++  check_type<float> ();
++  check_type<double> ();
++  check_type<long double> ();
++#if __HAVE_DISTINCT_FLOAT128
++  check_float128 ();
++#endif
++  return errors;
++}
++
++#include <support/test-driver.c>
+diff --git a/sysdeps/powerpc/powerpc64le/Makefile b/sysdeps/powerpc/powerpc64le/Makefile
+index 77617b6..19adbfa 100644
+--- a/sysdeps/powerpc/powerpc64le/Makefile
++++ b/sysdeps/powerpc/powerpc64le/Makefile
+@@ -16,6 +16,7 @@ $(foreach suf,$(all-object-suffixes),%f128_r$(suf)): CFLAGS += -mfloat128
+ $(foreach suf,$(all-object-suffixes),$(objpfx)test-float128%$(suf)): CFLAGS += -mfloat128
+ $(foreach suf,$(all-object-suffixes),$(objpfx)test-ifloat128%$(suf)): CFLAGS += -mfloat128
+ CFLAGS-libm-test-support-float128.c += -mfloat128
++CFLAGS-test-math-issignaling.cc += -mfloat128
+ $(objpfx)test-float128% $(objpfx)test-ifloat128%: \
+   gnulib-tests += $(f128-loader-link)
+ endif
+-- 
+2.9.5
+
diff --git a/package/glibc/0003-ld.so-Reject-overly-long-LD_PRELOAD-path-elements.patch b/package/glibc/0003-ld.so-Reject-overly-long-LD_PRELOAD-path-elements.patch
deleted file mode 100644
index df410931da..0000000000
--- a/package/glibc/0003-ld.so-Reject-overly-long-LD_PRELOAD-path-elements.patch
+++ /dev/null
@@ -1,122 +0,0 @@
-From 6d0ba622891bed9d8394eef1935add53003b12e8 Mon Sep 17 00:00:00 2001
-From: Florian Weimer <fweimer@redhat.com>
-Date: Mon, 19 Jun 2017 22:31:04 +0200
-Subject: [PATCH] ld.so: Reject overly long LD_PRELOAD path elements
-
-[Peter: Drop ChangeLog modification]
-Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
----
- elf/rtld.c | 82 ++++++++++++++++++++++++++++++++++++++++++++++++++------------
- 1 file changed, 72 insertions(+), 16 deletions(-)
-
-diff --git a/elf/rtld.c b/elf/rtld.c
-index 2269dbec81..86ae20c83f 100644
---- a/elf/rtld.c
-+++ b/elf/rtld.c
-@@ -99,6 +99,35 @@ uintptr_t __pointer_chk_guard_local
- strong_alias (__pointer_chk_guard_local, __pointer_chk_guard)
- #endif
- 
-+/* Length limits for names and paths, to protect the dynamic linker,
-+   particularly when __libc_enable_secure is active.  */
-+#ifdef NAME_MAX
-+# define SECURE_NAME_LIMIT NAME_MAX
-+#else
-+# define SECURE_NAME_LIMIT 255
-+#endif
-+#ifdef PATH_MAX
-+# define SECURE_PATH_LIMIT PATH_MAX
-+#else
-+# define SECURE_PATH_LIMIT 1024
-+#endif
-+
-+/* Check that AT_SECURE=0, or that the passed name does not contain
-+   directories and is not overly long.  Reject empty names
-+   unconditionally.  */
-+static bool
-+dso_name_valid_for_suid (const char *p)
-+{
-+  if (__glibc_unlikely (__libc_enable_secure))
-+    {
-+      /* Ignore pathnames with directories for AT_SECURE=1
-+	 programs, and also skip overlong names.  */
-+      size_t len = strlen (p);
-+      if (len >= SECURE_NAME_LIMIT || memchr (p, '/', len) != NULL)
-+	return false;
-+    }
-+  return *p != '\0';
-+}
- 
- /* List of auditing DSOs.  */
- static struct audit_list
-@@ -718,6 +747,42 @@ static const char *preloadlist attribute_relro;
- /* Nonzero if information about versions has to be printed.  */
- static int version_info attribute_relro;
- 
-+/* The LD_PRELOAD environment variable gives list of libraries
-+   separated by white space or colons that are loaded before the
-+   executable's dependencies and prepended to the global scope list.
-+   (If the binary is running setuid all elements containing a '/' are
-+   ignored since it is insecure.)  Return the number of preloads
-+   performed.  */
-+unsigned int
-+handle_ld_preload (const char *preloadlist, struct link_map *main_map)
-+{
-+  unsigned int npreloads = 0;
-+  const char *p = preloadlist;
-+  char fname[SECURE_PATH_LIMIT];
-+
-+  while (*p != '\0')
-+    {
-+      /* Split preload list at space/colon.  */
-+      size_t len = strcspn (p, " :");
-+      if (len > 0 && len < sizeof (fname))
-+	{
-+	  memcpy (fname, p, len);
-+	  fname[len] = '\0';
-+	}
-+      else
-+	fname[0] = '\0';
-+
-+      /* Skip over the substring and the following delimiter.  */
-+      p += len;
-+      if (*p != '\0')
-+	++p;
-+
-+      if (dso_name_valid_for_suid (fname))
-+	npreloads += do_preload (fname, main_map, "LD_PRELOAD");
-+    }
-+  return npreloads;
-+}
-+
- static void
- dl_main (const ElfW(Phdr) *phdr,
- 	 ElfW(Word) phnum,
-@@ -1464,23 +1529,8 @@ ERROR: ld.so: object '%s' cannot be loaded as audit interface: %s; ignored.\n",
- 
-   if (__glibc_unlikely (preloadlist != NULL))
-     {
--      /* The LD_PRELOAD environment variable gives list of libraries
--	 separated by white space or colons that are loaded before the
--	 executable's dependencies and prepended to the global scope
--	 list.  If the binary is running setuid all elements
--	 containing a '/' are ignored since it is insecure.  */
--      char *list = strdupa (preloadlist);
--      char *p;
--
-       HP_TIMING_NOW (start);
--
--      /* Prevent optimizing strsep.  Speed is not important here.  */
--      while ((p = (strsep) (&list, " :")) != NULL)
--	if (p[0] != '\0'
--	    && (__builtin_expect (! __libc_enable_secure, 1)
--		|| strchr (p, '/') == NULL))
--	  npreloads += do_preload (p, main_map, "LD_PRELOAD");
--
-+      npreloads += handle_ld_preload (preloadlist, main_map);
-       HP_TIMING_NOW (stop);
-       HP_TIMING_DIFF (diff, start, stop);
-       HP_TIMING_ACCUM_NT (load_time, diff);
--- 
-2.11.0
-
diff --git a/package/glibc/0004-Fix-the-C-version-of-issignaling-when-__NO_LONG_DOUB.patch b/package/glibc/0004-Fix-the-C-version-of-issignaling-when-__NO_LONG_DOUB.patch
new file mode 100644
index 0000000000..5e32f754d0
--- /dev/null
+++ b/package/glibc/0004-Fix-the-C-version-of-issignaling-when-__NO_LONG_DOUB.patch
@@ -0,0 +1,47 @@
+From 9dbd8386a1b706beb30291a7e76bbfe69c2620cf Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gftg@linux.vnet.ibm.com>
+Date: Wed, 23 Aug 2017 10:16:54 -0300
+Subject: [PATCH] Fix the C++ version of issignaling when __NO_LONG_DOUBLE_MATH
+ is defined
+
+When __NO_LONG_DOUBLE_MATH is defined, __issignalingl is not available,
+thus issignaling with long double argument should call __issignaling,
+instead.
+
+Tested for powerpc64le.
+
+	* math/math.h [defined __cplusplus] (issignaling): In the long
+	double case, call __issignalingl only if __NO_LONG_DOUBLE_MATH
+	is not defined.  Call __issignaling, otherwise.
+
+(cherry picked from commit 3d7b66f66cb223e899a7ebc0f4c20f13e711c9e0)
+[Romain rebase on glibc 2.26]
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ math/math.h | 10 +++++++++-
+ 1 file changed, 9 insertions(+), 1 deletion(-)
+
+diff --git a/math/math.h b/math/math.h
+index add86af..60dfa31 100644
+--- a/math/math.h
++++ b/math/math.h
+@@ -486,7 +486,15 @@ enum
+ extern "C++" {
+ inline int issignaling (float __val) { return __issignalingf (__val); }
+ inline int issignaling (double __val) { return __issignaling (__val); }
+-inline int issignaling (long double __val) { return __issignalingl (__val); }
++inline int
++issignaling (long double __val)
++{
++#  ifdef __NO_LONG_DOUBLE_MATH
++  return __issignaling (__val);
++#  else
++  return __issignalingl (__val);
++#  endif
++}
+ #  if __HAVE_DISTINCT_FLOAT128
+ inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }
+ #  endif
+-- 
+2.9.5
+
diff --git a/package/glibc/0004-ld.so-Reject-overly-long-LD_AUDIT-path-elements.patch b/package/glibc/0004-ld.so-Reject-overly-long-LD_AUDIT-path-elements.patch
deleted file mode 100644
index 25e937bd10..0000000000
--- a/package/glibc/0004-ld.so-Reject-overly-long-LD_AUDIT-path-elements.patch
+++ /dev/null
@@ -1,204 +0,0 @@
-From 81b82fb966ffbd94353f793ad17116c6088dedd9 Mon Sep 17 00:00:00 2001
-From: Florian Weimer <fweimer@redhat.com>
-Date: Mon, 19 Jun 2017 22:32:12 +0200
-Subject: [PATCH] ld.so: Reject overly long LD_AUDIT path elements
-
-Also only process the last LD_AUDIT entry.
-
-[Peter: Drop ChangeLog modification]
-Signed-off-by: Peter Korsgaard <peter@korsgaard.com>
----
- elf/rtld.c | 110 ++++++++++++++++++++++++++++++++++++++++++++++++++++---------
- 1 file changed, 105 insertions(+), 15 deletions(-)
-
-diff --git a/elf/rtld.c b/elf/rtld.c
-index 86ae20c83f..65647fb1c8 100644
---- a/elf/rtld.c
-+++ b/elf/rtld.c
-@@ -129,13 +129,91 @@ dso_name_valid_for_suid (const char *p)
-   return *p != '\0';
- }
- 
--/* List of auditing DSOs.  */
-+/* LD_AUDIT variable contents.  Must be processed before the
-+   audit_list below.  */
-+const char *audit_list_string;
-+
-+/* Cyclic list of auditing DSOs.  audit_list->next is the first
-+   element.  */
- static struct audit_list
- {
-   const char *name;
-   struct audit_list *next;
- } *audit_list;
- 
-+/* Iterator for audit_list_string followed by audit_list.  */
-+struct audit_list_iter
-+{
-+  /* Tail of audit_list_string still needing processing, or NULL.  */
-+  const char *audit_list_tail;
-+
-+  /* The list element returned in the previous iteration.  NULL before
-+     the first element.  */
-+  struct audit_list *previous;
-+
-+  /* Scratch buffer for returning a name which is part of
-+     audit_list_string.  */
-+  char fname[SECURE_NAME_LIMIT];
-+};
-+
-+/* Initialize an audit list iterator.  */
-+static void
-+audit_list_iter_init (struct audit_list_iter *iter)
-+{
-+  iter->audit_list_tail = audit_list_string;
-+  iter->previous = NULL;
-+}
-+
-+/* Iterate through both audit_list_string and audit_list.  */
-+static const char *
-+audit_list_iter_next (struct audit_list_iter *iter)
-+{
-+  if (iter->audit_list_tail != NULL)
-+    {
-+      /* First iterate over audit_list_string.  */
-+      while (*iter->audit_list_tail != '\0')
-+	{
-+	  /* Split audit list at colon.  */
-+	  size_t len = strcspn (iter->audit_list_tail, ":");
-+	  if (len > 0 && len < sizeof (iter->fname))
-+	    {
-+	      memcpy (iter->fname, iter->audit_list_tail, len);
-+	      iter->fname[len] = '\0';
-+	    }
-+	  else
-+	    /* Do not return this name to the caller.  */
-+	    iter->fname[0] = '\0';
-+
-+	  /* Skip over the substring and the following delimiter.  */
-+	  iter->audit_list_tail += len;
-+	  if (*iter->audit_list_tail == ':')
-+	    ++iter->audit_list_tail;
-+
-+	  /* If the name is valid, return it.  */
-+	  if (dso_name_valid_for_suid (iter->fname))
-+	    return iter->fname;
-+	  /* Otherwise, wrap around and try the next name.  */
-+	}
-+      /* Fall through to the procesing of audit_list.  */
-+    }
-+
-+  if (iter->previous == NULL)
-+    {
-+      if (audit_list == NULL)
-+	/* No pre-parsed audit list.  */
-+	return NULL;
-+      /* Start of audit list.  The first list element is at
-+	 audit_list->next (cyclic list).  */
-+      iter->previous = audit_list->next;
-+      return iter->previous->name;
-+    }
-+  if (iter->previous == audit_list)
-+    /* Cyclic list wrap-around.  */
-+    return NULL;
-+  iter->previous = iter->previous->next;
-+  return iter->previous->name;
-+}
-+
- #ifndef HAVE_INLINED_SYSCALLS
- /* Set nonzero during loading and initialization of executable and
-    libraries, cleared before the executable's entry point runs.  This
-@@ -1305,11 +1383,13 @@ of this helper program; chances are you did not intend to run this program.\n\
-     GL(dl_rtld_map).l_tls_modid = _dl_next_tls_modid ();
- 
-   /* If we have auditing DSOs to load, do it now.  */
--  if (__glibc_unlikely (audit_list != NULL))
-+  bool need_security_init = true;
-+  if (__glibc_unlikely (audit_list != NULL)
-+      || __glibc_unlikely (audit_list_string != NULL))
-     {
--      /* Iterate over all entries in the list.  The order is important.  */
-       struct audit_ifaces *last_audit = NULL;
--      struct audit_list *al = audit_list->next;
-+      struct audit_list_iter al_iter;
-+      audit_list_iter_init (&al_iter);
- 
-       /* Since we start using the auditing DSOs right away we need to
- 	 initialize the data structures now.  */
-@@ -1320,9 +1400,14 @@ of this helper program; chances are you did not intend to run this program.\n\
- 	 use different values (especially the pointer guard) and will
- 	 fail later on.  */
-       security_init ();
-+      need_security_init = false;
- 
--      do
-+      while (true)
- 	{
-+	  const char *name = audit_list_iter_next (&al_iter);
-+	  if (name == NULL)
-+	    break;
-+
- 	  int tls_idx = GL(dl_tls_max_dtv_idx);
- 
- 	  /* Now it is time to determine the layout of the static TLS
-@@ -1331,7 +1416,7 @@ of this helper program; chances are you did not intend to run this program.\n\
- 	     no DF_STATIC_TLS bit is set.  The reason is that we know
- 	     glibc will use the static model.  */
- 	  struct dlmopen_args dlmargs;
--	  dlmargs.fname = al->name;
-+	  dlmargs.fname = name;
- 	  dlmargs.map = NULL;
- 
- 	  const char *objname;
-@@ -1344,7 +1429,7 @@ of this helper program; chances are you did not intend to run this program.\n\
- 	    not_loaded:
- 	      _dl_error_printf ("\
- ERROR: ld.so: object '%s' cannot be loaded as audit interface: %s; ignored.\n",
--				al->name, err_str);
-+				name, err_str);
- 	      if (malloced)
- 		free ((char *) err_str);
- 	    }
-@@ -1448,10 +1533,7 @@ ERROR: ld.so: object '%s' cannot be loaded as audit interface: %s; ignored.\n",
- 		  goto not_loaded;
- 		}
- 	    }
--
--	  al = al->next;
- 	}
--      while (al != audit_list->next);
- 
-       /* If we have any auditing modules, announce that we already
- 	 have two objects loaded.  */
-@@ -1715,7 +1797,7 @@ ERROR: ld.so: object '%s' cannot be loaded as audit interface: %s; ignored.\n",
-   if (tcbp == NULL)
-     tcbp = init_tls ();
- 
--  if (__glibc_likely (audit_list == NULL))
-+  if (__glibc_likely (need_security_init))
-     /* Initialize security features.  But only if we have not done it
-        earlier.  */
-     security_init ();
-@@ -2346,9 +2428,7 @@ process_dl_audit (char *str)
-   char *p;
- 
-   while ((p = (strsep) (&str, ":")) != NULL)
--    if (p[0] != '\0'
--	&& (__builtin_expect (! __libc_enable_secure, 1)
--	    || strchr (p, '/') == NULL))
-+    if (dso_name_valid_for_suid (p))
-       {
- 	/* This is using the local malloc, not the system malloc.  The
- 	   memory can never be freed.  */
-@@ -2412,7 +2492,7 @@ process_envvars (enum mode *modep)
- 	      break;
- 	    }
- 	  if (memcmp (envline, "AUDIT", 5) == 0)
--	    process_dl_audit (&envline[6]);
-+	    audit_list_string = &envline[6];
- 	  break;
- 
- 	case 7:
--- 
-2.11.0
-
diff --git a/package/glibc/0005-Provide-a-C-version-of-iszero-that-does-not-use-__MA.patch b/package/glibc/0005-Provide-a-C-version-of-iszero-that-does-not-use-__MA.patch
new file mode 100644
index 0000000000..e12c8438fd
--- /dev/null
+++ b/package/glibc/0005-Provide-a-C-version-of-iszero-that-does-not-use-__MA.patch
@@ -0,0 +1,210 @@
+From 45970aa26d1af87b016ef95b4b35c566aeb6e841 Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gftg@linux.vnet.ibm.com>
+Date: Tue, 22 Aug 2017 16:34:42 -0300
+Subject: [PATCH] Provide a C++ version of iszero that does not use __MATH_TG
+ (bug 21930)
+
+When signaling nans are enabled (with -fsignaling-nans), the C++ version
+of iszero uses the fpclassify macro, which is defined with __MATH_TG.
+However, when support for float128 is available, __MATH_TG uses the
+builtin __builtin_types_compatible_p, which is only available in C mode.
+
+This patch refactors the C++ version of iszero so that it uses function
+overloading to select between the floating-point types, instead of
+relying on fpclassify and __MATH_TG.
+
+Tested for powerpc64le, s390x, x86_64, and with build-many-glibcs.py.
+
+	[BZ #21930]
+	* math/math.h [defined __cplusplus && defined __SUPPORT_SNAN__]
+	(iszero): New C++ implementation that does not use
+	fpclassify/__MATH_TG/__builtin_types_compatible_p, when
+	signaling nans are enabled, since __builtin_types_compatible_p
+	is a C-only feature.
+	* math/test-math-iszero.cc: When __HAVE_DISTINCT_FLOAT128 is
+	defined, include ieee754_float128.h for access to the union and
+	member ieee854_float128.ieee.
+	[__HAVE_DISTINCT_FLOAT128] (do_test): Call check_float128.
+	[__HAVE_DISTINCT_FLOAT128] (check_float128): New function.
+	* sysdeps/powerpc/powerpc64le/Makefile [subdir == math]
+	(CXXFLAGS-test-math-iszero.cc): Add -mfloat128 to the build
+	options of test-math-zero on powerpc64le.
+
+(cherry picked from commit 42496114ec0eb7d6d039d05d4262e109951c600c)
+[Romain rebase on glibc 2.26]
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ math/math.h                          | 33 +++++++++++++--
+ math/test-math-iszero.cc             | 79 ++++++++++++++++++++++++++++++++++++
+ sysdeps/powerpc/powerpc64le/Makefile |  3 +-
+ 3 files changed, 110 insertions(+), 5 deletions(-)
+
+diff --git a/math/math.h b/math/math.h
+index 60dfa31..7c0fc6d 100644
+--- a/math/math.h
++++ b/math/math.h
+@@ -513,15 +513,40 @@ inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }
+ #  endif
+ # else	/* __cplusplus */
+ extern "C++" {
++#  ifdef __SUPPORT_SNAN__
++inline int
++iszero (float __val)
++{
++  return __fpclassifyf (__val) == FP_ZERO;
++}
++inline int
++iszero (double __val)
++{
++  return __fpclassify (__val) == FP_ZERO;
++}
++inline int
++iszero (long double __val)
++{
++#   ifdef __NO_LONG_DOUBLE_MATH
++  return __fpclassify (__val) == FP_ZERO;
++#   else
++  return __fpclassifyl (__val) == FP_ZERO;
++#   endif
++}
++#   if __HAVE_DISTINCT_FLOAT128
++inline int
++iszero (_Float128 __val)
++{
++  return __fpclassifyf128 (__val) == FP_ZERO;
++}
++#   endif
++#  else
+ template <class __T> inline bool
+ iszero (__T __val)
+ {
+-#  ifdef __SUPPORT_SNAN__
+-  return fpclassify (__val) == FP_ZERO;
+-#  else
+   return __val == 0;
+-#  endif
+ }
++#  endif
+ } /* extern C++ */
+ # endif	/* __cplusplus */
+ #endif /* Use IEC_60559_BFP_EXT.  */
+diff --git a/math/test-math-iszero.cc b/math/test-math-iszero.cc
+index 027e972..5c07261 100644
+--- a/math/test-math-iszero.cc
++++ b/math/test-math-iszero.cc
+@@ -22,6 +22,13 @@
+ 
+ #include <limits>
+ 
++/* Support for _Float128 in std::numeric_limits is limited.
++   Include ieee754_float128.h and use the bitfields in the union
++   ieee854_float128.ieee_nan to build corner-case inputs.  */
++#if __HAVE_DISTINCT_FLOAT128
++# include <ieee754_float128.h>
++#endif
++
+ static bool errors;
+ 
+ static void
+@@ -72,12 +79,84 @@ check_type ()
+          std::numeric_limits<T>::has_denorm == std::denorm_absent);
+ }
+ 
++#if __HAVE_DISTINCT_FLOAT128
++static void
++check_float128 ()
++{
++  ieee854_float128 q;
++
++  q.d = 0.0Q;
++  CHECK (iszero (q.d), 1);
++  q.d = -0.0Q;
++  CHECK (iszero (q.d), 1);
++  q.d = 1.0Q;
++  CHECK (iszero (q.d), 0);
++  q.d = -1.0Q;
++  CHECK (iszero (q.d), 0);
++
++  /* Normal min.  */
++  q.ieee.negative = 0;
++  q.ieee.exponent = 0x0001;
++  q.ieee.mantissa0 = 0x0000;
++  q.ieee.mantissa1 = 0x00000000;
++  q.ieee.mantissa2 = 0x00000000;
++  q.ieee.mantissa3 = 0x00000000;
++  CHECK (iszero (q.d), 0);
++  q.ieee.negative = 1;
++  CHECK (iszero (q.d), 0);
++
++  /* Normal max.  */
++  q.ieee.negative = 0;
++  q.ieee.exponent = 0x7FFE;
++  q.ieee.mantissa0 = 0xFFFF;
++  q.ieee.mantissa1 = 0xFFFFFFFF;
++  q.ieee.mantissa2 = 0xFFFFFFFF;
++  q.ieee.mantissa3 = 0xFFFFFFFF;
++  CHECK (iszero (q.d), 0);
++  q.ieee.negative = 1;
++  CHECK (iszero (q.d), 0);
++
++  /* Infinity.  */
++  q.ieee.negative = 0;
++  q.ieee.exponent = 0x7FFF;
++  q.ieee.mantissa0 = 0x0000;
++  q.ieee.mantissa1 = 0x00000000;
++  q.ieee.mantissa2 = 0x00000000;
++  q.ieee.mantissa3 = 0x00000000;
++  CHECK (iszero (q.d), 0);
++
++  /* Quiet NaN.  */
++  q.ieee_nan.quiet_nan = 1;
++  q.ieee_nan.mantissa0 = 0x0000;
++  CHECK (iszero (q.d), 0);
++
++  /* Signaling NaN.  */
++  q.ieee_nan.quiet_nan = 0;
++  q.ieee_nan.mantissa0 = 0x4000;
++  CHECK (iszero (q.d), 0);
++
++  /* Denormal min.  */
++  q.ieee.negative = 0;
++  q.ieee.exponent = 0x0000;
++  q.ieee.mantissa0 = 0x0000;
++  q.ieee.mantissa1 = 0x00000000;
++  q.ieee.mantissa2 = 0x00000000;
++  q.ieee.mantissa3 = 0x00000001;
++  CHECK (iszero (q.d), 0);
++  q.ieee.negative = 1;
++  CHECK (iszero (q.d), 0);
++}
++#endif
++
+ static int
+ do_test (void)
+ {
+   check_type<float> ();
+   check_type<double> ();
+   check_type<long double> ();
++#if __HAVE_DISTINCT_FLOAT128
++  check_float128 ();
++#endif
+   return errors;
+ }
+ 
+diff --git a/sysdeps/powerpc/powerpc64le/Makefile b/sysdeps/powerpc/powerpc64le/Makefile
+index 19adbfa..dea2290 100644
+--- a/sysdeps/powerpc/powerpc64le/Makefile
++++ b/sysdeps/powerpc/powerpc64le/Makefile
+@@ -17,7 +17,8 @@ $(foreach suf,$(all-object-suffixes),$(objpfx)test-float128%$(suf)): CFLAGS += -
+ $(foreach suf,$(all-object-suffixes),$(objpfx)test-ifloat128%$(suf)): CFLAGS += -mfloat128
+ CFLAGS-libm-test-support-float128.c += -mfloat128
+ CFLAGS-test-math-issignaling.cc += -mfloat128
+-$(objpfx)test-float128% $(objpfx)test-ifloat128%: \
++CFLAGS-test-math-iszero.cc += -mfloat128
++$(objpfx)test-float128% $(objpfx)test-ifloat128% $(objpfx)test-math-iszero: \
+   gnulib-tests += $(f128-loader-link)
+ endif
+ 
+-- 
+2.9.5
+
diff --git a/package/glibc/0005-fix-binutils-2-29-build.patch b/package/glibc/0005-fix-binutils-2-29-build.patch
deleted file mode 100644
index 47fcd2f84e..0000000000
--- a/package/glibc/0005-fix-binutils-2-29-build.patch
+++ /dev/null
@@ -1,65 +0,0 @@
-From: H.J. Lu <hjl.tools@gmail.com>
-Date: Fri, 23 Jun 2017 21:38:46 +0000 (-0700)
-Subject: Avoid .symver on common symbols [BZ #21666]
-X-Git-Tag: glibc-2.26~241
-X-Git-Url: https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=commitdiff_plain;h=388b4f1a02f3a801965028bbfcd48d905638b797
-
-Avoid .symver on common symbols [BZ #21666]
-
-The .symver directive on common symbol just creates a new common symbol,
-not an alias and the newer assembler with the bug fix for
-
-https://sourceware.org/bugzilla/show_bug.cgi?id=21661
-
-will issue an error.  Before the fix, we got
-
-$ readelf -sW libc.so | grep "loc[12s]"
-  5109: 00000000003a0608     8 OBJECT  LOCAL  DEFAULT   36 loc1
-  5188: 00000000003a0610     8 OBJECT  LOCAL  DEFAULT   36 loc2
-  5455: 00000000003a0618     8 OBJECT  LOCAL  DEFAULT   36 locs
-  6575: 00000000003a05f0     8 OBJECT  GLOBAL DEFAULT   36 locs@GLIBC_2.2.5
-  7156: 00000000003a05f8     8 OBJECT  GLOBAL DEFAULT   36 loc1@GLIBC_2.2.5
-  7312: 00000000003a0600     8 OBJECT  GLOBAL DEFAULT   36 loc2@GLIBC_2.2.5
-
-in libc.so.  The versioned loc1, loc2 and locs have the wrong addresses.
-After the fix, we got
-
-$ readelf -sW libc.so | grep "loc[12s]"
-  6570: 000000000039e3b8     8 OBJECT  GLOBAL DEFAULT   34 locs@GLIBC_2.2.5
-  7151: 000000000039e3c8     8 OBJECT  GLOBAL DEFAULT   34 loc1@GLIBC_2.2.5
-  7307: 000000000039e3c0     8 OBJECT  GLOBAL DEFAULT   34 loc2@GLIBC_2.2.5
-
-	[BZ #21666]
-	* misc/regexp.c (loc1): Add __attribute__ ((nocommon));
-	(loc2): Likewise.
-	(locs): Likewise.
-
-Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
-[Backported from upstream commit
-388b4f1a02f3a801965028bbfcd48d905638b797, to fix the build with
-binutils 2.29.]
----
-diff --git a/misc/regexp.c b/misc/regexp.c
-index 19d76c0..eaea7c3 100644
---- a/misc/regexp.c
-+++ b/misc/regexp.c
-@@ -29,14 +29,15 @@
- 
- #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)
- 
--/* Define the variables used for the interface.  */
--char *loc1;
--char *loc2;
-+/* Define the variables used for the interface.  Avoid .symver on common
-+   symbol, which just creates a new common symbol, not an alias.  */
-+char *loc1 __attribute__ ((nocommon));
-+char *loc2 __attribute__ ((nocommon));
- compat_symbol (libc, loc1, loc1, GLIBC_2_0);
- compat_symbol (libc, loc2, loc2, GLIBC_2_0);
- 
- /* Although we do not support the use we define this variable as well.  */
--char *locs;
-+char *locs __attribute__ ((nocommon));
- compat_symbol (libc, locs, locs, GLIBC_2_0);
- 
- 
diff --git a/package/glibc/0006-Let-fpclassify-use-the-builtin-when-optimizing-for-s.patch b/package/glibc/0006-Let-fpclassify-use-the-builtin-when-optimizing-for-s.patch
new file mode 100644
index 0000000000..37807c4598
--- /dev/null
+++ b/package/glibc/0006-Let-fpclassify-use-the-builtin-when-optimizing-for-s.patch
@@ -0,0 +1,63 @@
+From 33f54cf4f81a51e5c8cbfb2408edd439bdee9435 Mon Sep 17 00:00:00 2001
+From: "Gabriel F. T. Gomes" <gabriel@inconstante.eti.br>
+Date: Wed, 20 Sep 2017 15:10:26 -0300
+Subject: [PATCH] Let fpclassify use the builtin when optimizing for size in
+ C++ mode (bug 22146)
+
+When optimization for size is on (-Os), fpclassify does not use the
+type-generic __builtin_fpclassify builtin, instead it uses __MATH_TG.
+However, when library support for float128 is available, __MATH_TG uses
+__builtin_types_compatible_p, which is not available in C++ mode.
+
+On the other hand, libstdc++ undefines (in cmath) many macros from
+math.h, including fpclassify, so that it can provide its own functions.
+However, during its configure tests, libstdc++ just tests for the
+availability of the macros (it does not undefine them, nor does it
+provide its own functions).
+
+Finally, when libstdc++ is configured with optimization for size
+enabled, its configure tests include math.h and get the definition of
+fpclassify that uses __MATH_TG (and __builtin_types_compatible_p).
+Since libstdc++ does not undefine the macros during its configure tests,
+they fail.
+
+This patch lets fpclassify use the builtin in C++ mode, even when
+optimization for size is on.  This allows the configure test in
+libstdc++ to work.
+
+Tested for powerpc64le and x86_64.
+
+	[BZ #22146]
+	math/math.h: Let fpclassify use the builtin in C++ mode, even
+	when optimazing for size.
+
+(cherry picked from commit c5c4a626098ec884b8527356abdf2a4bb7b6bf27)
+
+[Romain rebase on glibc 2.26)
+Signed-off-by: Romain Naour <romain.naour@gmail.com>
+---
+ math/math.h | 8 +++++++-
+ 1 file changed, 7 insertions(+), 1 deletion(-)
+
+diff --git a/math/math.h b/math/math.h
+index 7c0fc6d..f9348ec 100644
+--- a/math/math.h
++++ b/math/math.h
+@@ -402,7 +402,13 @@ enum
+ 
+ /* Return number of classification appropriate for X.  */
+ # if __GNUC_PREREQ (4,4) && !defined __SUPPORT_SNAN__			      \
+-     && !defined __OPTIMIZE_SIZE__
++     && (!defined __OPTIMIZE_SIZE__ || defined __cplusplus)
++     /* The check for __cplusplus allows the use of the builtin, even
++	when optimization for size is on.  This is provided for
++	libstdc++, only to let its configure test work when it is built
++	with -Os.  No further use of this definition of fpclassify is
++	expected in C++ mode, since libstdc++ provides its own version
++	of fpclassify in cmath (which undefines fpclassify).  */
+ #  define fpclassify(x) __builtin_fpclassify (FP_NAN, FP_INFINITE,	      \
+      FP_NORMAL, FP_SUBNORMAL, FP_ZERO, x)
+ # else
+-- 
+2.9.5
+
diff --git a/package/glibc/0006-i686-Add-missing-IS_IN-libc-guards-to-vectorized-strcspn.patch b/package/glibc/0006-i686-Add-missing-IS_IN-libc-guards-to-vectorized-strcspn.patch
deleted file mode 100644
index eebf89e599..0000000000
--- a/package/glibc/0006-i686-Add-missing-IS_IN-libc-guards-to-vectorized-strcspn.patch
+++ /dev/null
@@ -1,47 +0,0 @@
-From patchwork Wed Jun 14 06:19:50 2017
-Content-Type: text/plain; charset="utf-8"
-MIME-Version: 1.0
-Content-Transfer-Encoding: 7bit
-Subject: i686: Add missing IS_IN (libc) guards to vectorized strcspn
-From: Florian Weimer <fweimer@redhat.com>
-X-Patchwork-Id: 21003
-Message-Id: <20170614061950.400FE4010728F@oldenburg.str.redhat.com>
-To: libc-alpha@sourceware.org
-Date: Wed, 14 Jun 2017 08:19:50 +0200
-
-Since commit d957c4d3fa48d685ff2726c605c988127ef99395 (i386: Compile
-rtld-*.os with -mno-sse -mno-mmx -mfpmath=387), vector intrinsics can
-no longer be used in ld.so, even if the compiled code never makes it
-into the final ld.so link.  This commit adds the missing IS_IN (libc)
-guard to the SSE 4.2 strcspn implementation, so that it can be used from
-ld.so in the future.
-
-2017-06-14  Florian Weimer  <fweimer@redhat.com>
-
-	* sysdeps/i386/i686/multiarch/strcspn-c.c: Add IS_IN (libc) guard.
-	* sysdeps/i386/i686/multiarch/varshift.c: Likewise.
-
-[Thomas: fixes a build issue of glibc on x86:
-sysdeps/x86_64/multiarch/varshift.h:26:1: error: SSE vector return without SSE enabled changes the ABI]
-Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
-
-diff --git a/sysdeps/i386/i686/multiarch/strcspn-c.c b/sysdeps/i386/i686/multiarch/strcspn-c.c
-index 6d61e19..ec230fb 100644
---- a/sysdeps/i386/i686/multiarch/strcspn-c.c
-+++ b/sysdeps/i386/i686/multiarch/strcspn-c.c
-@@ -1,2 +1,4 @@
--#define __strcspn_sse2 __strcspn_ia32
--#include <sysdeps/x86_64/multiarch/strcspn-c.c>
-+#if IS_IN (libc)
-+# define __strcspn_sse2 __strcspn_ia32
-+# include <sysdeps/x86_64/multiarch/strcspn-c.c>
-+#endif
-diff --git a/sysdeps/i386/i686/multiarch/varshift.c b/sysdeps/i386/i686/multiarch/varshift.c
-index 7760b96..6742a35 100644
---- a/sysdeps/i386/i686/multiarch/varshift.c
-+++ b/sysdeps/i386/i686/multiarch/varshift.c
-@@ -1 +1,3 @@
--#include <sysdeps/x86_64/multiarch/varshift.c>
-+#if IS_IN (libc)
-+# include <sysdeps/x86_64/multiarch/varshift.c>
-+#endif
diff --git a/package/glibc/0006-sh4-trap.patch b/package/glibc/0006-sh4-trap.patch
deleted file mode 100644
index c986ac3192..0000000000
--- a/package/glibc/0006-sh4-trap.patch
+++ /dev/null
@@ -1,318 +0,0 @@
-commit db3d848e154b00071f4a5e729d5884efad410109
-Author: Adhemerval Zanella <adhemerval.zanella@linaro.org>
-Date:   Wed Mar 15 15:44:59 2017 -0300
-
-    Build divdi3 only for architecture that required it
-    
-    As noted in [1], divdi3 object is only exported in a handful ABIs
-    (i386, m68k, powerpc32, s390-32, and ia64), however it is built
-    for all current architectures regardless.
-    
-    This patch refact the make rules for this object to so only the
-    aforementioned architectures that actually require it builds it.
-    
-    Also, to avoid internal PLT calls to the exported symbol from the
-    module, glibc uses an internal header (symbol-hacks.h) which is
-    unrequired (and in fact breaks the build for architectures that
-    intend to get symbol definitions from libgcc.a).  The patch also
-    changes it to create its own header (divdi3-symbol-hacks.h) and
-    adjust the architectures that require it accordingly.
-    
-    I checked the build/check (with run-built-tests=no) on the
-    following architectures (which I think must cover all supported
-    ABI/builds) using GCC 6.3:
-    
-    aarch64-linux-gnu
-    alpha-linux-gnu
-    arm-linux-gnueabihf
-    hppa-linux-gnu
-    ia64-linux-gnu
-    m68k-linux-gnu
-    microblaze-linux-gnu
-    mips64-n32-linux-gnu
-    mips-linux-gnu
-    mips64-linux-gnu
-    nios2-linux-gnu
-    powerpc-linux-gnu
-    powerpc-linux-gnu-power4
-    powerpc64-linux-gnu
-    powerpc64le-linux-gnu
-    s390x-linux-gnu
-    s390-linux-gnu
-    sh4-linux-gnu
-    sh4-linux-gnu-soft
-    sparc64-linux-gnu
-    sparcv9-linux-gnu
-    tilegx-linux-gnu
-    tilegx-linux-gnu-32
-    tilepro-linux-gnu
-    x86_64-linux-gnu
-    x86_64-linux-gnu-x32
-    i686-linux-gnu
-    
-    I only saw one regression on sparcv9-linux-gnu (extra PLT call to
-    .udiv) which I address in next patch in the set.  It also correctly
-    build SH with GCC 7.0.1 (without any regression from c89721e25d).
-    
-    [1] https://sourceware.org/ml/libc-alpha/2017-03/msg00243.html
-    
-Signed-off-by: Waldemar Brodkorb <wbx@openadk.org>
-
-diff --git a/sysdeps/i386/symbol-hacks.h b/sysdeps/i386/symbol-hacks.h
-new file mode 100644
-index 0000000000..36a13c83f7
---- /dev/null
-+++ b/sysdeps/i386/symbol-hacks.h
-@@ -0,0 +1,21 @@
-+/* Hacks needed for symbol manipulation.  i386 version.
-+   Copyright (C) 2017 Free Software Foundation, Inc.
-+   This file is part of the GNU C Library.
-+
-+   The GNU C Library is free software; you can redistribute it and/or
-+   modify it under the terms of the GNU Lesser General Public
-+   License as published by the Free Software Foundation; either
-+   version 2.1 of the License, or (at your option) any later version.
-+
-+   The GNU C Library is distributed in the hope that it will be useful,
-+   but WITHOUT ANY WARRANTY; without even the implied warranty of
-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-+   Lesser General Public License for more details.
-+
-+   You should have received a copy of the GNU Lesser General Public
-+   License along with the GNU C Library; if not, see
-+   <http://www.gnu.org/licenses/>.  */
-+
-+#include <sysdeps/wordsize-32/divdi3-symbol-hacks.h>
-+
-+#include_next "symbol-hacks.h"
-diff --git a/sysdeps/m68k/symbol-hacks.h b/sysdeps/m68k/symbol-hacks.h
-new file mode 100644
-index 0000000000..e449d29810
---- /dev/null
-+++ b/sysdeps/m68k/symbol-hacks.h
-@@ -0,0 +1,21 @@
-+/* Hacks needed for symbol manipulation.  m68k version.
-+   Copyright (C) 2017 Free Software Foundation, Inc.
-+   This file is part of the GNU C Library.
-+
-+   The GNU C Library is free software; you can redistribute it and/or
-+   modify it under the terms of the GNU Lesser General Public
-+   License as published by the Free Software Foundation; either
-+   version 2.1 of the License, or (at your option) any later version.
-+
-+   The GNU C Library is distributed in the hope that it will be useful,
-+   but WITHOUT ANY WARRANTY; without even the implied warranty of
-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-+   Lesser General Public License for more details.
-+
-+   You should have received a copy of the GNU Lesser General Public
-+   License along with the GNU C Library; if not, see
-+   <http://www.gnu.org/licenses/>.  */
-+
-+#include <sysdeps/wordsize-32/divdi3-symbol-hacks.h>
-+
-+#include_next "symbol-hacks.h"
-diff --git a/sysdeps/powerpc/powerpc32/symbol-hacks.h b/sysdeps/powerpc/powerpc32/symbol-hacks.h
-new file mode 100644
-index 0000000000..dbb3141621
---- /dev/null
-+++ b/sysdeps/powerpc/powerpc32/symbol-hacks.h
-@@ -0,0 +1,21 @@
-+/* Hacks needed for symbol manipulation.  powerpc version.
-+   Copyright (C) 2017 Free Software Foundation, Inc.
-+   This file is part of the GNU C Library.
-+
-+   The GNU C Library is free software; you can redistribute it and/or
-+   modify it under the terms of the GNU Lesser General Public
-+   License as published by the Free Software Foundation; either
-+   version 2.1 of the License, or (at your option) any later version.
-+
-+   The GNU C Library is distributed in the hope that it will be useful,
-+   but WITHOUT ANY WARRANTY; without even the implied warranty of
-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-+   Lesser General Public License for more details.
-+
-+   You should have received a copy of the GNU Lesser General Public
-+   License along with the GNU C Library; if not, see
-+   <http://www.gnu.org/licenses/>.  */
-+
-+#include <sysdeps/wordsize-32/divdi3-symbol-hacks.h>
-+
-+#include_next "symbol-hacks.h"
-diff --git a/sysdeps/s390/s390-32/symbol-hacks.h b/sysdeps/s390/s390-32/symbol-hacks.h
-new file mode 100644
-index 0000000000..585c42365a
---- /dev/null
-+++ b/sysdeps/s390/s390-32/symbol-hacks.h
-@@ -0,0 +1,21 @@
-+/* Hacks needed for symbol manipulation.  s390 version.
-+   Copyright (C) 2017 Free Software Foundation, Inc.
-+   This file is part of the GNU C Library.
-+
-+   The GNU C Library is free software; you can redistribute it and/or
-+   modify it under the terms of the GNU Lesser General Public
-+   License as published by the Free Software Foundation; either
-+   version 2.1 of the License, or (at your option) any later version.
-+
-+   The GNU C Library is distributed in the hope that it will be useful,
-+   but WITHOUT ANY WARRANTY; without even the implied warranty of
-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-+   Lesser General Public License for more details.
-+
-+   You should have received a copy of the GNU Lesser General Public
-+   License along with the GNU C Library; if not, see
-+   <http://www.gnu.org/licenses/>.  */
-+
-+#include <sysdeps/wordsize-32/divdi3-symbol-hacks.h>
-+
-+#include_next "symbol-hacks.h"
-diff --git a/sysdeps/unix/sysv/linux/i386/Makefile b/sysdeps/unix/sysv/linux/i386/Makefile
-index 6aac0dfe15..4080b8c966 100644
---- a/sysdeps/unix/sysv/linux/i386/Makefile
-+++ b/sysdeps/unix/sysv/linux/i386/Makefile
-@@ -26,6 +26,11 @@ endif
- 
- ifeq ($(subdir),csu)
- sysdep-dl-routines += sysdep
-+ifeq (yes,$(build-shared))
-+sysdep_routines += divdi3
-+shared-only-routines += divdi3
-+CPPFLAGS-divdi3.c = -Din_divdi3_c
-+endif
- endif
- 
- ifeq ($(subdir),nptl)
-diff --git a/sysdeps/unix/sysv/linux/m68k/Makefile b/sysdeps/unix/sysv/linux/m68k/Makefile
-index 5c50ce6927..ce1f696a6f 100644
---- a/sysdeps/unix/sysv/linux/m68k/Makefile
-+++ b/sysdeps/unix/sysv/linux/m68k/Makefile
-@@ -4,6 +4,11 @@ m68k-syntax-flag = -DMOTOROLA_SYNTAX
- 
- ifeq ($(subdir),csu)
- sysdep_routines += m68k-helpers
-+ifeq (yes,$(build-shared))
-+sysdep_routines += divdi3
-+shared-only-routines += divdi3
-+CPPFLAGS-divdi3.c = -Din_divdi3_c
-+endif
- endif
- 
- ifeq ($(subdir),misc)
-diff --git a/sysdeps/unix/sysv/linux/powerpc/powerpc32/Makefile b/sysdeps/unix/sysv/linux/powerpc/powerpc32/Makefile
-index 3d6c150582..1f45659ed1 100644
---- a/sysdeps/unix/sysv/linux/powerpc/powerpc32/Makefile
-+++ b/sysdeps/unix/sysv/linux/powerpc/powerpc32/Makefile
-@@ -1,2 +1,10 @@
- # See Makeconfig regarding the use of default-abi.
- default-abi := 32
-+
-+ifeq ($(subdir),csu)
-+ifeq (yes,$(build-shared))
-+sysdep_routines += divdi3
-+shared-only-routines += divdi3
-+CPPFLAGS-divdi3.c = -Din_divdi3_c
-+endif
-+endif
-diff --git a/sysdeps/unix/sysv/linux/s390/s390-32/Makefile b/sysdeps/unix/sysv/linux/s390/s390-32/Makefile
-index da3b3c76b4..fd8cf92633 100644
---- a/sysdeps/unix/sysv/linux/s390/s390-32/Makefile
-+++ b/sysdeps/unix/sysv/linux/s390/s390-32/Makefile
-@@ -21,3 +21,11 @@ endif
- ifeq ($(subdir),stdlib)
- sysdep_routines += __makecontext_ret
- endif
-+
-+ifeq ($(subdir),csu)
-+ifeq (yes,$(build-shared))
-+sysdep_routines += divdi3
-+shared-only-routines += divdi3
-+CPPFLAGS-divdi3.c = -Din_divdi3_c
-+endif
-+endif
-diff --git a/sysdeps/wordsize-32/Makefile b/sysdeps/wordsize-32/Makefile
-deleted file mode 100644
-index 82beac44ed..0000000000
---- a/sysdeps/wordsize-32/Makefile
-+++ /dev/null
-@@ -1,7 +0,0 @@
--ifeq ($(subdir),csu)
--ifeq (yes,$(build-shared))
--sysdep_routines += divdi3
--shared-only-routines += divdi3
--CPPFLAGS-divdi3.c = -Din_divdi3_c
--endif
--endif
-diff --git a/sysdeps/wordsize-32/divdi3-symbol-hacks.h b/sysdeps/wordsize-32/divdi3-symbol-hacks.h
-new file mode 100644
-index 0000000000..6c90cb796d
---- /dev/null
-+++ b/sysdeps/wordsize-32/divdi3-symbol-hacks.h
-@@ -0,0 +1,31 @@
-+/* Hacks needed for divdi3 symbol manipulation.
-+   Copyright (C) 2004-2017 Free Software Foundation, Inc.
-+   This file is part of the GNU C Library.
-+
-+   The GNU C Library is free software; you can redistribute it and/or
-+   modify it under the terms of the GNU Lesser General Public
-+   License as published by the Free Software Foundation; either
-+   version 2.1 of the License, or (at your option) any later version.
-+
-+   The GNU C Library is distributed in the hope that it will be useful,
-+   but WITHOUT ANY WARRANTY; without even the implied warranty of
-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-+   Lesser General Public License for more details.
-+
-+   You should have received a copy of the GNU Lesser General Public
-+   License along with the GNU C Library; if not, see
-+   <http://www.gnu.org/licenses/>.  */
-+
-+/* A very dirty trick: gcc emits references to __divdi3, __udivdi3,
-+   __moddi3, and __umoddi3.  These functions are exported and
-+   therefore we get PLTs.  Unnecessarily so.  Changing gcc is a big
-+   task which might not be worth it so we play tricks with the
-+   assembler.
-+   Note: in_divdi3_c is only used to avoid symbol alias on divdi3
-+   build itself.  */
-+#if !defined __ASSEMBLER__ && !defined in_divdi3_c && IS_IN (libc) && defined SHARED
-+asm ("__divdi3 = __divdi3_internal");
-+asm ("__udivdi3 = __udivdi3_internal");
-+asm ("__moddi3 = __moddi3_internal");
-+asm ("__umoddi3 = __umoddi3_internal");
-+#endif
-diff --git a/sysdeps/wordsize-32/symbol-hacks.h b/sysdeps/wordsize-32/symbol-hacks.h
-deleted file mode 100644
-index 0aec1e0b97..0000000000
---- a/sysdeps/wordsize-32/symbol-hacks.h
-+++ /dev/null
-@@ -1,31 +0,0 @@
--/* Hacks needed for symbol manipulation.
--   Copyright (C) 2004-2017 Free Software Foundation, Inc.
--   This file is part of the GNU C Library.
--
--   The GNU C Library is free software; you can redistribute it and/or
--   modify it under the terms of the GNU Lesser General Public
--   License as published by the Free Software Foundation; either
--   version 2.1 of the License, or (at your option) any later version.
--
--   The GNU C Library is distributed in the hope that it will be useful,
--   but WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--   Lesser General Public License for more details.
--
--   You should have received a copy of the GNU Lesser General Public
--   License along with the GNU C Library; if not, see
--   <http://www.gnu.org/licenses/>.  */
--
--#include_next "symbol-hacks.h"
--
--/* A very dirty trick: gcc emits references to __divdi3, __udivdi3,
--   __moddi3, and __umoddi3.  These functions are exported and
--   therefore we get PLTs.  Unnecessarily so.  Changing gcc is a big
--   task which might not be worth it so we play tricks with the
--   assembler.  */
--#if !defined __ASSEMBLER__ && !defined in_divdi3_c && IS_IN (libc) && defined SHARED
--asm ("__divdi3 = __divdi3_internal");
--asm ("__udivdi3 = __udivdi3_internal");
--asm ("__moddi3 = __moddi3_internal");
--asm ("__umoddi3 = __umoddi3_internal");
--#endif
diff --git a/package/glibc/glibc.hash b/package/glibc/glibc.hash
index daaf014a00..afae10fa57 100644
--- a/package/glibc/glibc.hash
+++ b/package/glibc/glibc.hash
@@ -1,2 +1,2 @@
 # Locally calculated after checking pgp signature (glibc)
-sha256	067bd9bb3390e79aa45911537d13c3721f1d9d3769931a30c2681bfee66f23a0	glibc-2.25.tar.xz
+sha256	e54e0a934cd2bc94429be79da5e9385898d2306b9eaf3c92d5a77af96190f6bd	glibc-2.26.tar.xz
diff --git a/package/glibc/glibc.mk b/package/glibc/glibc.mk
index c9a65796b0..f5d028239f 100644
--- a/package/glibc/glibc.mk
+++ b/package/glibc/glibc.mk
@@ -4,7 +4,7 @@
 #
 ################################################################################
 
-GLIBC_VERSION = 2.25
+GLIBC_VERSION = 2.26
 GLIBC_SITE = $(BR2_GNU_MIRROR)/libc
 GLIBC_SOURCE = glibc-$(GLIBC_VERSION).tar.xz
 GLIBC_SRC_SUBDIR = .
