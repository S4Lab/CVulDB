libreswan__libreswan
commit d64ec2420a21f76d08106a074cbc6b3795810325
Author:     D. Hugh Redelmeier <hugh@mimosa.com>
AuthorDate: Sun May 24 20:08:32 2015 -0400
Commit:     Paul Wouters <pwouters@redhat.com>
CommitDate: Mon Jun 1 09:41:41 2015 -0400

    CVE-2015-3204 process_packet_tail() fix
    
    Signed-off-by: Paul Wouters <pwouters@redhat.com>

diff --git a/programs/pluto/ikev1.c b/programs/pluto/ikev1.c
index 52524067b0..cb554b6c71 100644
--- a/programs/pluto/ikev1.c
+++ b/programs/pluto/ikev1.c
@@ -1,6 +1,6 @@
 /* State machine for IKEv1
  * Copyright (C) 1997 Angelos D. Keromytis.
- * Copyright (C) 1998-2010,2013 D. Hugh Redelmeier <hugh@mimosa.com>
+ * Copyright (C) 1998-2010,2013-2015 D. Hugh Redelmeier <hugh@mimosa.com>
  * Copyright (C) 2003-2008 Michael Richardson <mcr@xelerance.com>
  * Copyright (C) 2008-2009 David McCullough <david_mccullough@securecomputing.com>
  * Copyright (C) 2008-2010 Paul Wouters <paul@xelerance.com>
@@ -1769,8 +1769,7 @@ void process_packet_tail(struct msg_digest **mdp)
 				switch (np) {
 				case ISAKMP_NEXT_NATD_RFC:
 				case ISAKMP_NEXT_NATOA_RFC:
-					if (st == NULL ||
-					    (st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) == LEMPTY) {
+					if ((st->hidden_variables.st_nat_traversal & NAT_T_WITH_RFC_VALUES) == LEMPTY) {
 						/*
 						 * don't accept NAT-D/NAT-OA reloc directly in message,
 						 * unless we're using NAT-T RFC
@@ -1791,6 +1790,7 @@ void process_packet_tail(struct msg_digest **mdp)
 				/* payload type is out of range or requires special handling */
 				switch (np) {
 				case ISAKMP_NEXT_ID:
+					/* ??? two kinds of ID payloads */
 					sd = (IS_PHASE1(from_state) ||
 					      IS_PHASE15(from_state)) ?
 						&isakmp_identification_desc :
@@ -1798,20 +1798,48 @@ void process_packet_tail(struct msg_digest **mdp)
 					break;
 
 				case ISAKMP_NEXT_NATD_DRAFTS:
-					np = ISAKMP_NEXT_NATD_RFC; /* NAT-D was a private use type before RFC-3947 */
-					sd = v1_payload_desc(np);
+					/* NAT-D was a private use type before RFC-3947 -- same format */
+					np = ISAKMP_NEXT_NATD_RFC;
+					sd = payload_desc(np);
 					break;
 
 				case ISAKMP_NEXT_NATOA_DRAFTS:
-					np = ISAKMP_NEXT_NATOA_RFC; /* NAT-OA was a private use type before RFC-3947 */
-					sd = v1_payload_desc(np);
+					/* NAT-OA was a private use type before RFC-3947 -- same format */
+					np = ISAKMP_NEXT_NATOA_RFC;
+					sd = payload_desc(np);
 					break;
 
-				case ISAKMP_NEXT_SAK: /* AKA ISAKMP_NEXT_NATD_BADDRAFTS */
+				case ISAKMP_NEXT_SAK: /* or ISAKMP_NEXT_NATD_BADDRAFTS */
+					/*
+                                         * Official standards say that this is ISAKMP_NEXT_SAK,
+                                         * a part of Group DOI, something we don't implement.
+                                         * Old non-updated Cisco gear abused this number in ancient NAT drafts.
+                                         * We ignore (rather than reject) this in support of people
+                                         * with crufty Cisco machines.
+                                        */
 					loglog(RC_LOG_SERIOUS,
-						"%smessage with unsupported payload ISAKMP_NEXT_SAK (as ISAKMP_NEXT_NATD_BADDRAFTS) ignored",
+						"%smessage with unsupported payload ISAKMP_NEXT_SAK (or ISAKMP_NEXT_NATD_BADDRAFTS) ignored",
 						excuse);
-					break;
+					/*
+					 * Hack to discard payload, whatever it was.
+					 * Since we are skipping the rest of the loop
+					 * body we must do some things ourself:
+					 * - demarshall the payload
+					 * - grab the next payload number (np)
+					 * - don't keep payload (don't increment pd)
+					 * - skip rest of loop body
+					 */
+					if (!in_struct(&pd->payload, &isakmp_ignore_desc, &md->message_pbs,
+						       &pd->pbs)) {
+						loglog(RC_LOG_SERIOUS,
+						       "%smalformed payload in packet",
+						       excuse);
+						SEND_NOTIFICATION(PAYLOAD_MALFORMED);
+						return;
+					}
+					np = pd->payload.generic.isag_np;
+					/* NOTE: we do not increment pd! */
+					continue;  /* skip rest of the loop */
 
 				default:
 					loglog(RC_LOG_SERIOUS,
@@ -1824,6 +1852,8 @@ void process_packet_tail(struct msg_digest **mdp)
 				passert(sd != NULL);
 			}
 
+			passert(np < LELEM_ROOF);
+
 			{
 				lset_t s = LELEM(np);
 
diff --git a/programs/pluto/packet.c b/programs/pluto/packet.c
index 896f14f318..32a8d0e81b 100644
--- a/programs/pluto/packet.c
+++ b/programs/pluto/packet.c
@@ -83,9 +83,6 @@ static field_desc isag_fields[] = {
 	{ ft_end, 0, NULL, NULL }
 };
 
-static struct_desc isakmp_generic_desc =
-	{ "ISAKMP Generic Payload", isag_fields, sizeof(struct isakmp_generic) };
-
 /* ISAKMP Data Attribute (generic representation within payloads)
  * layout from RFC 2408 "ISAKMP" section 3.3
  * This is not a payload type.
@@ -649,6 +646,11 @@ struct_desc isakmp_nat_oa =
 	{ "ISAKMP NAT-OA Payload", isanat_oa_fields,
 	  sizeof(struct isakmp_nat_oa) };
 
+/* Generic payload (when ignoring) */
+
+struct_desc isakmp_ignore_desc =
+	{ "ignored ISAKMP Generic Payload", isag_fields, sizeof(struct isakmp_generic) };
+
 /* ISAKMP IKE Fragmentation Payload
  * Cisco proprietary, undocumented
  *
@@ -1943,7 +1945,7 @@ bool out_generic(u_int8_t np, struct_desc *sd,
 {
 	struct isakmp_generic gen;
 
-	passert(sd->fields == isakmp_generic_desc.fields);
+	passert(sd->fields == isag_fields);
 	gen.isag_np = np;
 	return out_struct(&gen, sd, outs, obj_pbs);
 }
diff --git a/programs/pluto/packet.h b/programs/pluto/packet.h
index 15af444326..1c37a6b085 100644
--- a/programs/pluto/packet.h
+++ b/programs/pluto/packet.h
@@ -643,6 +643,8 @@ struct isakmp_nat_oa {
 extern struct_desc isakmp_nat_d;
 extern struct_desc isakmp_nat_oa;
 
+extern struct_desc isakmp_ignore_desc; /* generic payload (when ignoring) */
+
 /* ISAKMP IKE Fragmentation Payload
  * Cisco proprietary, undocumented
  * Microsoft documentation link: http://msdn.microsoft.com/en-us/library/cc233452.aspx
