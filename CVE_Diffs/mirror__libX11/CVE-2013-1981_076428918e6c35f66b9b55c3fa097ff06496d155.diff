mirror__libX11
commit 076428918e6c35f66b9b55c3fa097ff06496d155
Author:     Alan Coopersmith <alan.coopersmith@oracle.com>
AuthorDate: Fri Mar 1 18:37:37 2013 -0800
Commit:     Alan Coopersmith <alan.coopersmith@oracle.com>
CommitDate: Thu May 9 18:59:52 2013 -0700

    integer overflow in ReadInFile() in Xrm.c [CVE-2013-1981 7/13]
    
    Called from XrmGetFileDatabase() which gets called from InitDefaults()
    which gets the filename from getenv ("XENVIRONMENT")
    
    If file is exactly 0xffffffff bytes long (or longer and truncates to
    0xffffffff, on implementations where off_t is larger than an int),
    then size may be set to a value which overflows causing less memory
    to be allocated than is written to by the following read() call.
    
    size is left limited to an int, because if your Xresources file is
    larger than 2gb, you're very definitely doing it wrong.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
    Reviewed-by: Matthieu Herrb <matthieu.herrb@laas.fr>

diff --git a/src/Xrm.c b/src/Xrm.c
index d6899d97..3e29ab0f 100644
--- a/src/Xrm.c
+++ b/src/Xrm.c
@@ -62,6 +62,7 @@ from The Open Group.
 #endif
 #include	<X11/Xos.h>
 #include	<sys/stat.h>
+#include	<limits.h>
 #include "Xresinternal.h"
 #include "Xresource.h"
 
@@ -1594,11 +1595,12 @@ ReadInFile(_Xconst char *filename)
      */
     {
 	struct stat status_buffer;
-	if ( (fstat(fd, &status_buffer)) == -1 ) {
+	if ( ((fstat(fd, &status_buffer)) == -1 ) ||
+             (status_buffer.st_size >= INT_MAX) ) {
 	    close (fd);
 	    return (char *)NULL;
 	} else
-	    size = status_buffer.st_size;
+	    size = (int) status_buffer.st_size;
     }
 
     if (!(filebuf = Xmalloc(size + 1))) { /* leave room for '\0' */
