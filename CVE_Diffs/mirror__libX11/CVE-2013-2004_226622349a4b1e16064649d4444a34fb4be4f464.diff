mirror__libX11
commit 226622349a4b1e16064649d4444a34fb4be4f464
Author:     Alan Coopersmith <alan.coopersmith@oracle.com>
AuthorDate: Sat Mar 2 12:39:58 2013 -0800
Commit:     Alan Coopersmith <alan.coopersmith@oracle.com>
CommitDate: Thu May 9 18:59:52 2013 -0700

    Unbounded recursion in _XimParseStringFile() when parsing include files [CVE-2013-2004 2/2]
    
    parseline() can call _XimParseStringFile() which can call parseline()
    which can call _XimParseStringFile() which can call parseline() ....
    eventually causing recursive stack overflow and crash.
    
    Limit is set to a include depth of 100 files, which should be enough
    for all known use cases, but could be adjusted later if necessary.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
    Reviewed-by: Matthieu Herrb <matthieu.herrb@laas.fr>

diff --git a/modules/im/ximcp/imLcPrs.c b/modules/im/ximcp/imLcPrs.c
index 4e54385b..4c7d6f0d 100644
--- a/modules/im/ximcp/imLcPrs.c
+++ b/modules/im/ximcp/imLcPrs.c
@@ -56,6 +56,8 @@ extern int _Xmbstoutf8(
     int		len
 );
 
+static void parsestringfile(FILE *fp, Xim im, int depth);
+
 /*
  *	Parsing File Format:
  *
@@ -423,7 +425,8 @@ static int
 parseline(
     FILE *fp,
     Xim   im,
-    char* tokenbuf)
+    char* tokenbuf,
+    int   depth)
 {
     int token;
     DTModifier modifier_mask;
@@ -470,11 +473,13 @@ parseline(
                 goto error;
             if ((filename = TransFileName(im, tokenbuf)) == NULL)
                 goto error;
+            if (++depth > 100)
+                goto error;
             infp = _XFopenFile(filename, "r");
                 Xfree(filename);
             if (infp == NULL)
                 goto error;
-            _XimParseStringFile(infp, im);
+            parsestringfile(infp, im, depth);
             fclose(infp);
             return (0);
 	} else if ((token == KEY) && (strcmp("None", tokenbuf) == 0)) {
@@ -667,6 +672,15 @@ void
 _XimParseStringFile(
     FILE *fp,
     Xim   im)
+{
+    parsestringfile(fp, im, 0);
+}
+
+static void
+parsestringfile(
+    FILE *fp,
+    Xim   im,
+    int   depth)
 {
     char tb[8192];
     char* tbp;
@@ -678,7 +692,7 @@ _XimParseStringFile(
 	else tbp = malloc (size);
 
 	if (tbp != NULL) {
-	    while (parseline(fp, im, tbp) >= 0) {}
+	    while (parseline(fp, im, tbp, depth) >= 0) {}
 	    if (tbp != tb) free (tbp);
 	}
     }
