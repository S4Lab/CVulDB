bq__aquaris-E5
commit e472f27273ff1f645868d7c890e997e772851c3c
Author:     Shachar Raindel <raindel@mellanox.com>
AuthorDate: Wed Mar 18 17:39:08 2015 +0000
Commit:     John McAleely <john.mcaleely@canonical.com>
CommitDate: Fri Dec 18 21:53:51 2015 +0000

    IB/uverbs: Prevent integer overflow in ib_umem_get address arithmetic
    
    Properly verify that the resulting page aligned end address is larger
    than both the start address and the length of the memory area requested.
    
    Both the start and length arguments for ib_umem_get are controlled by
    the user. A misbehaving user can provide values which will cause an
    integer overflow when calculating the page aligned end address.
    
    This overflow can cause also miscalculation of the number of pages
    mapped, and additional logic issues.
    
    Addresses: CVE-2014-8159
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shachar Raindel <raindel@mellanox.com>
    Signed-off-by: Jack Morgenstein <jackm@mellanox.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    (cherry picked from commit 8494057ab5e40df590ef6ef7d66324d3ae33356b)
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    
    Change-Id: I340f337fcbdb8d161f1d6efc6305ac677b73b841

diff --git a/kernel/drivers/infiniband/core/umem.c b/kernel/drivers/infiniband/core/umem.c
index a84112322..055ebebc0 100644
--- a/kernel/drivers/infiniband/core/umem.c
+++ b/kernel/drivers/infiniband/core/umem.c
@@ -94,6 +94,14 @@ struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,
 	if (dmasync)
 		dma_set_attr(DMA_ATTR_WRITE_BARRIER, &attrs);
 
+	/*
+	 * If the combination of the addr and size requested for this memory
+	 * region causes an integer overflow, return error.
+	 */
+	if ((PAGE_ALIGN(addr + size) <= size) ||
+	    (PAGE_ALIGN(addr + size) <= addr))
+		return ERR_PTR(-EINVAL);
+
 	if (!can_do_mlock())
 		return ERR_PTR(-EPERM);
 
