dorimanx__DORIMANX_LG_STOCK_LP_KERNEL
commit c8cdd2136309cacc7ac3837d377232d157cc96fa
Author:     Ravi Kumar Siddojigari <rsiddoji@codeaurora.org>
AuthorDate: Mon Oct 10 12:51:24 2016 +0800
Commit:     Dorimanx <yuri@bynet.co.il>
CommitDate: Mon Oct 31 13:16:07 2016 +0200

    input: synaptics_dsx: allocate heap memory for temp buf
    
    There is a possible stack overflow vulnerability in the rmidev_write
    function because the stack array size is from user space.
    changes to allocate heap memory for the temporary buffer instead of
    stack memory to prevent the stack overflow vulnerability.
    As discussed under  CVE-2016-3865 and ANDROID-28799389.
    
    G.S.: Revised the code, adapted for the different synaptics we have
    in the LG G2, they are a mirror of the original one.
    Fixed CAF mistake 'free' -> 'kfree' that would break compilation since
    free() isn't used on synaptics.
    
    Change-Id: I20f639e09aaf3c533c98a12a2413570feae3d6d0
    Signed-off-by: Ravi Kumar Siddojigari <rsiddoji@codeaurora.org>
    Signed-off-by: Shantanu Jain <shjain@codeaurora.org>
    Signed-off-by: √çcaro Hoff <icarohoff@gmail.com>

diff --git a/drivers/input/touchscreen/g2/synaptics/synaptics_dsx_rmi_dev.c b/drivers/input/touchscreen/g2/synaptics/synaptics_dsx_rmi_dev.c
index 287eb98e9a38..8258f194647c 100644
--- a/drivers/input/touchscreen/g2/synaptics/synaptics_dsx_rmi_dev.c
+++ b/drivers/input/touchscreen/g2/synaptics/synaptics_dsx_rmi_dev.c
@@ -326,7 +326,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -339,7 +339,9 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
-
+	tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+	if (!tmpbuf)
+		return -ENOMEM;
 	mutex_lock(&(dev_data->file_mutex));
 
 	retval = rmidev->fn_ptr->read(rmidev->rmi4_data,
@@ -356,7 +358,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 clean_up:
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
@@ -372,7 +374,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -386,8 +388,15 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
+	tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+	if (!tmpbuf)
+		return -ENOMEM;
+
 	if (copy_from_user(tmpbuf, buf, count))
+	{
+		kfree(tmpbuf);
 		return -EFAULT;
+	}
 
 	mutex_lock(&(dev_data->file_mutex));
 
@@ -399,7 +408,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		*f_pos += retval;
 
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
diff --git a/drivers/input/touchscreen/synaptics_rmi_dev.c b/drivers/input/touchscreen/synaptics_rmi_dev.c
index 8478b24b5832..6d5a98aafa8d 100644
--- a/drivers/input/touchscreen/synaptics_rmi_dev.c
+++ b/drivers/input/touchscreen/synaptics_rmi_dev.c
@@ -291,7 +291,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -304,7 +304,9 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
-
+	tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+	if (!tmpbuf)
+		return -ENOMEM;
 	mutex_lock(&(dev_data->file_mutex));
 
 	retval = rmidev->fn_ptr->read(rmidev->rmi4_data,
@@ -321,7 +323,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 clean_up:
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
@@ -337,7 +339,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -351,9 +353,15 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
+        tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+        if (!tmpbuf)
+                return -ENOMEM;
+
 	if (copy_from_user(tmpbuf, buf, count))
+	{
+		kfree(tmpbuf);
 		return -EFAULT;
-
+	}
 	mutex_lock(&(dev_data->file_mutex));
 
 	retval = rmidev->fn_ptr->write(rmidev->rmi4_data,
@@ -364,7 +372,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		*f_pos += retval;
 
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
diff --git a/drivers/input/touchscreen/tigers/synaptics/synaptics_dsx_rmi_dev.c b/drivers/input/touchscreen/tigers/synaptics/synaptics_dsx_rmi_dev.c
index 287eb98e9a38..8258f194647c 100644
--- a/drivers/input/touchscreen/tigers/synaptics/synaptics_dsx_rmi_dev.c
+++ b/drivers/input/touchscreen/tigers/synaptics/synaptics_dsx_rmi_dev.c
@@ -326,7 +326,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -339,7 +339,9 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
-
+	tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+	if (!tmpbuf)
+		return -ENOMEM;
 	mutex_lock(&(dev_data->file_mutex));
 
 	retval = rmidev->fn_ptr->read(rmidev->rmi4_data,
@@ -356,7 +358,7 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 clean_up:
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
@@ -372,7 +374,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
+	unsigned char *tmpbuf;
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -386,8 +388,15 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
+	tmpbuf = kzalloc(count + 1, GFP_KERNEL);
+	if (!tmpbuf)
+		return -ENOMEM;
+
 	if (copy_from_user(tmpbuf, buf, count))
+	{
+		kfree(tmpbuf);
 		return -EFAULT;
+	}
 
 	mutex_lock(&(dev_data->file_mutex));
 
@@ -399,7 +408,7 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		*f_pos += retval;
 
 	mutex_unlock(&(dev_data->file_mutex));
-
+	kfree(tmpbuf);
 	return retval;
 }
 
