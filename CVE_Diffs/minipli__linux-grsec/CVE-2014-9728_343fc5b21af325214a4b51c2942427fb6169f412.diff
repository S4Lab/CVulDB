minipli__linux-grsec
commit 343fc5b21af325214a4b51c2942427fb6169f412
Author:     Jan Kara <jack@suse.cz>
AuthorDate: Fri Dec 19 12:03:53 2014 +0100
Commit:     Willy Tarreau <w@1wt.eu>
CommitDate: Fri Sep 18 13:51:54 2015 +0200

    udf: Verify i_size when loading inode
    
    commit e159332b9af4b04d882dbcfe1bb0117f0a6d4b58 upstream.
    
    Verify that inode size is sane when loading inode with data stored in
    ICB. Otherwise we may get confused later when working with the inode and
    inode size is too big.
    
    Reported-by: Carl Henrik Lunde <chlunde@ping.uio.no>
    Signed-off-by: Jan Kara <jack@suse.cz>
    [bwh: Backported to 2.6.32: on error, call make_bad_inode() then return]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    
    CVE-2014-9728, CVE-2014-9729
    
    Signed-off-by: Willy Tarreau <w@1wt.eu>

diff --git a/fs/udf/inode.c b/fs/udf/inode.c
index 11c291ecce9a..7901ad768478 100644
--- a/fs/udf/inode.c
+++ b/fs/udf/inode.c
@@ -1286,6 +1286,24 @@ static void udf_fill_inode(struct inode *inode, struct buffer_head *bh)
 							iinfo->i_lenEAttr;
 	}
 
+	/* Sanity checks for files in ICB so that we don't get confused later */
+	if (iinfo->i_alloc_type == ICBTAG_FLAG_AD_IN_ICB) {
+		/*
+		 * For file in ICB data is stored in allocation descriptor
+		 * so sizes should match
+		 */
+		if (iinfo->i_lenAlloc != inode->i_size) {
+			make_bad_inode(inode);
+			return;
+		}
+		/* File in ICB has to fit in there... */
+		if (inode->i_size > inode->i_sb->s_blocksize -
+					udf_file_entry_alloc_offset(inode)) {
+			make_bad_inode(inode);
+			return;
+		}
+	}
+
 	switch (fe->icbTag.fileType) {
 	case ICBTAG_FILE_TYPE_DIRECTORY:
 		inode->i_op = &udf_dir_inode_operations;
