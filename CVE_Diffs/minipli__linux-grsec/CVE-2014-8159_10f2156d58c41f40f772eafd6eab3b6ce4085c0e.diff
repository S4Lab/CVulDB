minipli__linux-grsec
commit 10f2156d58c41f40f772eafd6eab3b6ce4085c0e
Author:     PaX Team <pageexec@freemail.hu>
AuthorDate: Mon Apr 6 19:00:37 2015 +0200
Commit:     Mathias Krause <minipli@googlemail.com>
CommitDate: Mon Apr 6 19:00:37 2015 +0200

    [pax] Updated to patch 3.19.3-test14
    
    Updated to pax-linux-3.19.3-test14.patch
    
    PaX Team says:
      - fixed early boot crash due to some misplaced STACs on i386, reported by Arnaud Fontaine <arnaud@drno.eu>
      - properly fixed CVE-2014-8159, http://seclists.org/oss-sec/2015/q1/886 and http://seclists.org/oss-sec/2015/q2/10

diff --git a/arch/sparc/include/asm/uaccess_32.h b/arch/sparc/include/asm/uaccess_32.h
index f55fe4fc659a..020b2dc752d8 100644
--- a/arch/sparc/include/asm/uaccess_32.h
+++ b/arch/sparc/include/asm/uaccess_32.h
@@ -47,6 +47,7 @@
 #define __user_ok(addr, size) ({ (void)(size); (addr) < STACK_TOP; })
 #define __kernel_ok (segment_eq(get_fs(), KERNEL_DS))
 #define __access_ok(addr,size) (__user_ok((addr) & get_fs().seg,(size)))
+#define access_ok_noprefault(type, addr, size) access_ok((type), (addr), (size))
 #define access_ok(type, addr, size)					\
 	({ (void)(type); __access_ok((unsigned long)(addr), size); })
 
diff --git a/arch/sparc/include/asm/uaccess_64.h b/arch/sparc/include/asm/uaccess_64.h
index f17b9c1c4644..7384856a5cd1 100644
--- a/arch/sparc/include/asm/uaccess_64.h
+++ b/arch/sparc/include/asm/uaccess_64.h
@@ -55,6 +55,11 @@ static inline int __access_ok(const void __user * addr, unsigned long size)
 	return 1;
 }
 
+static inline int access_ok_noprefault(int type, const void __user * addr, unsigned long size)
+{
+	return 1;
+}
+
 static inline int access_ok(int type, const void __user * addr, unsigned long size)
 {
 	return 1;
diff --git a/arch/x86/lib/getuser.S b/arch/x86/lib/getuser.S
index 1daa95616dfc..a74bfa3c3f69 100644
--- a/arch/x86/lib/getuser.S
+++ b/arch/x86/lib/getuser.S
@@ -51,7 +51,6 @@ ENTRY(__get_user_1)
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_DX
@@ -63,6 +62,7 @@ ENTRY(__get_user_1)
 
 #endif
 
+	ASM_STAC
 1:	__copyuser_seg movzbl (%_ASM_AX),%edx
 	xor %eax,%eax
 	ASM_CLAC
@@ -80,7 +80,6 @@ ENTRY(__get_user_2)
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_DX
@@ -92,6 +91,7 @@ ENTRY(__get_user_2)
 
 #endif
 
+	ASM_STAC
 2:	__copyuser_seg movzwl -1(%_ASM_AX),%edx
 	xor %eax,%eax
 	ASM_CLAC
@@ -109,7 +109,6 @@ ENTRY(__get_user_4)
 	GET_THREAD_INFO(%_ASM_DX)
 	cmp TI_addr_limit(%_ASM_DX),%_ASM_AX
 	jae bad_get_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_DX
@@ -121,6 +120,7 @@ ENTRY(__get_user_4)
 
 #endif
 
+	ASM_STAC
 3:	__copyuser_seg movl -3(%_ASM_AX),%edx
 	xor %eax,%eax
 	ASM_CLAC
diff --git a/arch/x86/lib/putuser.S b/arch/x86/lib/putuser.S
index d4d989dd8822..14ad9a54afd3 100644
--- a/arch/x86/lib/putuser.S
+++ b/arch/x86/lib/putuser.S
@@ -58,7 +58,6 @@ ENTRY(__put_user_1)
 	GET_THREAD_INFO(%_ASM_BX)
 	cmp TI_addr_limit(%_ASM_BX),%_ASM_CX
 	jae bad_put_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_BX
@@ -70,6 +69,7 @@ ENTRY(__put_user_1)
 
 #endif
 
+	ASM_STAC
 1:	__copyuser_seg movb %al,(_DEST)
 	xor %eax,%eax
 	EXIT
@@ -84,7 +84,6 @@ ENTRY(__put_user_2)
 	sub $1,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_BX
@@ -96,6 +95,7 @@ ENTRY(__put_user_2)
 
 #endif
 
+	ASM_STAC
 2:	__copyuser_seg movw %ax,(_DEST)
 	xor %eax,%eax
 	EXIT
@@ -110,7 +110,6 @@ ENTRY(__put_user_4)
 	sub $3,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_BX
@@ -122,6 +121,7 @@ ENTRY(__put_user_4)
 
 #endif
 
+	ASM_STAC
 3:	__copyuser_seg movl %eax,(_DEST)
 	xor %eax,%eax
 	EXIT
@@ -136,7 +136,6 @@ ENTRY(__put_user_8)
 	sub $7,%_ASM_BX
 	cmp %_ASM_BX,%_ASM_CX
 	jae bad_put_user
-	ASM_STAC
 
 #if defined(CONFIG_X86_64) && defined(CONFIG_PAX_MEMORY_UDEREF)
 	mov pax_user_shadow_base,%_ASM_BX
@@ -148,6 +147,7 @@ ENTRY(__put_user_8)
 
 #endif
 
+	ASM_STAC
 4:	__copyuser_seg mov %_ASM_AX,(_DEST)
 #ifdef CONFIG_X86_32
 5:	__copyuser_seg movl %edx,4(_DEST)
diff --git a/drivers/infiniband/core/uverbs_cmd.c b/drivers/infiniband/core/uverbs_cmd.c
index 6c52e72f8d2c..6303e3f2d43d 100644
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -945,6 +945,9 @@ ssize_t ib_uverbs_reg_mr(struct ib_uverbs_file *file,
 	if (copy_from_user(&cmd, buf, sizeof cmd))
 		return -EFAULT;
 
+	if (!access_ok_noprefault(VERIFY_READ, cmd.start, cmd.length))
+		return -EFAULT;
+
 	INIT_UDATA(&udata, buf + sizeof cmd,
 		   (unsigned long) cmd.response + sizeof resp,
 		   in_len - sizeof cmd, out_len - sizeof resp);
