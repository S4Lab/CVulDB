MotorolaMobilityLLC__kernel-msm
commit bb0a281132bb2f73d047cb103489cec0cdff85b9
Author:     Martijn Coenen <maco@android.com>
AuthorDate: Thu Oct 10 11:48:54 2019 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Thu Nov 28 04:46:36 2019 -0600

    UPSTREAM: binder: Set end of SG buffer area properly.
    
    In case the target node requests a security context, the
    extra_buffers_size is increased with the size of the security context.
    But, that size is not available for use by regular scatter-gather
    buffers; make sure the ending of that buffer is marked correctly.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2019-2214
    Bug: 136210786
    
    Acked-by: Todd Kjos <tkjos@google.com>
    Fixes: ec74136ded79 ("binder: create node flag to request sender's security context")
    Signed-off-by: Martijn Coenen <maco@android.com>
    Cc: stable@vger.kernel.org # 5.1+
    Link: https://lore.kernel.org/r/20190709110923.220736-1-maco@android.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    (cherry picked from commit a56587065094fd96eb4c2b5ad65571daad32156d)
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    
    Change-Id: If3dMontanacbbb4c700755ed0af95198bc6a2fb983b8
    Reviewed-on: https://gerrit.mot.com/1434810
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Ling Jin <lingjin@motorola.com>
    Submit-Approved: Jira Key
    Reviewed-on: https://gerrit.mot.com/1460750
    Tested-by: Raja Phani K <a16821@motorola.com>
    SLTApproved: Sindhu C <a12924@motorola.com>
    (cherry picked from commit 406093d297202d3732499a07f9360c85f01d6d2d)

diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index 20f15b84ef0b..6a6931f95fa3 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -3331,7 +3331,8 @@ static void binder_transaction(struct binder_proc *proc,
 	buffer_offset = off_start_offset;
 	off_end_offset = off_start_offset + tr->offsets_size;
 	sg_buf_offset = ALIGN(off_end_offset, sizeof(void *));
-	sg_buf_end_offset = sg_buf_offset + extra_buffers_size;
+	sg_buf_end_offset = sg_buf_offset + extra_buffers_size -
+		ALIGN(secctx_sz, sizeof(u64));
 	off_min = 0;
 	for (buffer_offset = off_start_offset; buffer_offset < off_end_offset;
 	     buffer_offset += sizeof(binder_size_t)) {
