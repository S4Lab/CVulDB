MotorolaMobilityLLC__kernel-msm
commit 7addbe6ee5b012f87e8f8d5e62aede1aed29e97f
Author:     Dennis Cagle <d-cagle@codeaurora.org>
AuthorDate: Thu Apr 27 16:08:02 2017 -0700
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Aug 9 03:23:16 2017 -0500

    msm: camera2: cpp: Fix out-of-bounds frame or command buffer access
    
    When user application provides invalid (out of range) stripe size and
    stripe indices, while submitting  requests for the stripe based image
    processing by the CPP kernel driver, the driver could  perform out of
    bounds access of the internal buffers.
    
    This fix ensures that stripe size and indices of frame/command buffer
    are properly validated during the configuration and before processing
    such requests through the CPP hardware block.
    
    Bug: 34620535
    CRs-fixed: 2002207
    CVE-fixed: CVE-2017-8268
    Mot-CRs-fixed: (CR), (CR)
    
    Change-Id: Ib79e36fb507d8e75d8fc28afb990020a0e1bf845
    Signed-off-by: Ravi kumar Koyyana <rkoyyana@codeaurora.org>
    Signed-off-by: Dennis Cagle <d-cagle@codeaurora.org>
    Signed-off-by: Srikanth A R <arsrikan@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1011644
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Robert Kubicki <w17311@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
index 5d8bb1855727..7c4f814864b9 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
@@ -2192,9 +2192,29 @@ static int msm_cpp_cfg_frame(struct cpp_device *cpp_dev,
 		return -EINVAL;
 	}
 
-	if (stripe_base == UINT_MAX || new_frame->num_strips >
-		(UINT_MAX - 1 - stripe_base) / stripe_size) {
-		pr_err("Invalid frame message,num_strips %d is large\n",
+	/* Stripe index starts at zero */
+	if ((!new_frame->num_strips) ||
+		(new_frame->first_stripe_index >= new_frame->num_strips) ||
+		(new_frame->last_stripe_index  >= new_frame->num_strips) ||
+		(new_frame->first_stripe_index >
+			new_frame->last_stripe_index)) {
+		pr_err("Invalid frame message, #stripes=%d, stripe indices=[%d,%d]\n",
+			new_frame->num_strips,
+			new_frame->first_stripe_index,
+			new_frame->last_stripe_index);
+		return -EINVAL;
+	}
+
+	if (!stripe_size) {
+		pr_err("Invalid frame message, invalid stripe_size (%d)!\n",
+			stripe_size);
+		return -EINVAL;
+	}
+
+	if ((stripe_base == UINT_MAX) ||
+		(new_frame->num_strips >
+			(UINT_MAX - 1 - stripe_base) / stripe_size)) {
+		pr_err("Invalid frame message, num_strips %d is large\n",
 			new_frame->num_strips);
 		return -EINVAL;
 	}
