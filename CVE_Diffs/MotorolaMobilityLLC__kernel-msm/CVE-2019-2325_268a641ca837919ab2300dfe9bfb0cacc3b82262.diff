MotorolaMobilityLLC__kernel-msm
commit 268a641ca837919ab2300dfe9bfb0cacc3b82262
Author:     Vignesh Kulothungan <vigneshk@codeaurora.org>
AuthorDate: Thu Feb 28 14:55:05 2019 -0800
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Sun Sep 15 17:27:45 2019 -0500

    msm: asm: validate ADSP data size before access
    
    Check the size of ADSP payload before accessing it.
    Validate buffer index obtained from ADSP token before using it.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2019-2325
    CRs-Fixed: 2370589
    
    Change-Id: I5c3b1634bd08b516844638dd67f726a882edfc17
    Signed-off-by: Vignesh Kulothungan <vigneshk@codeaurora.org>
    Signed-off-by: Meghana Reddy Mula <mmula@codeaurora.org>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1354750
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
    Submit-Approved: Jira Key

diff --git a/sound/soc/msm/qdsp6v2/q6asm.c b/sound/soc/msm/qdsp6v2/q6asm.c
index 783e7495c791..f5b5cf189f65 100644
--- a/sound/soc/msm/qdsp6v2/q6asm.c
+++ b/sound/soc/msm/qdsp6v2/q6asm.c
@@ -1714,6 +1714,7 @@ static int32_t q6asm_callback(struct apr_client_data *data, void *priv)
 		data->dest_port);
 	if ((data->opcode != ASM_DATA_EVENT_RENDERED_EOS) &&
 	    (data->opcode != ASM_DATA_EVENT_EOS) &&
+	    (data->opcode != ASM_SESSION_EVENTX_OVERFLOW) &&
 	    (data->opcode != ASM_SESSION_EVENT_RX_UNDERFLOW)) {
 		if (payload == NULL) {
 			pr_err("%s: payload is null\n", __func__);
@@ -1874,6 +1875,17 @@ static int32_t q6asm_callback(struct apr_client_data *data, void *priv)
 				return -EINVAL;
 			}
 			spin_lock_irqsave(&port->dsp_lock, dsp_flags);
+			if (data->token < 0 ||
+					data->token >= port->max_buf_cnt) {
+				pr_err("%s: Invalid token buffer index %u\n",
+				__func__, data->token);
+				spin_unlock_irqrestore(&port->dsp_lock,
+								dsp_flags);
+				spin_unlock_irqrestore(
+					&(session[session_id].session_lock),
+					flags);
+				return -EINVAL;
+			}
 			if (lower_32_bits(port->buf[data->token].phys) !=
 			payload[0] ||
 			msm_audio_populate_upper_32_bits(
@@ -1965,6 +1977,16 @@ static int32_t q6asm_callback(struct apr_client_data *data, void *priv)
 			}
 			spin_lock_irqsave(&port->dsp_lock, dsp_flags);
 			token = data->token;
+			if (token < 0 || token >= port->max_buf_cnt) {
+				pr_err("%s: Invalid token buffer index %u\n",
+				__func__, token);
+				spin_unlock_irqrestore(&port->dsp_lock,
+								dsp_flags);
+				spin_unlock_irqrestore(
+					&(session[session_id].session_lock),
+					flags);
+				return -EINVAL;
+			}
 			port->buf[token].used = 0;
 			if (lower_32_bits(port->buf[token].phys) !=
 			payload[READDONE_IDX_BUFADD_LSW] ||
