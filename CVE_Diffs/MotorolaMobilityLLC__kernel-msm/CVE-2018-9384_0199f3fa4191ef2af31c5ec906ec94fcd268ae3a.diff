MotorolaMobilityLLC__kernel-msm
commit 0199f3fa4191ef2af31c5ec906ec94fcd268ae3a
Author:     Robin Murphy <robin.murphy@arm.com>
AuthorDate: Thu Dec 1 15:55:13 2016 +0000
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Fri Jun 15 07:20:26 2018 -0500

    UPSTREAM: arm64: smp: Prevent raw_smp_processor_id() recursion
    
    Under CONFIG_DEBUG_PREEMPT=y, this_cpu_ptr() ends up calling back into
    raw_smp_processor_id(), resulting in some hilariously catastrophic
    infinite recursion. In the normal case, we have:
    
      #define this_cpu_ptr(ptr) raw_cpu_ptr(ptr)
    
    and everything is dPerry. However for CONFIG_DEBUG_PREEMPT, this_cpu_ptr()
    is defined in terms of my_cpu_offset, wherein the fun begins:
    
      #define my_cpu_offset per_cpu_offset(smp_processor_id())
      ...
      #define smp_processor_id() debug_smp_processor_id()
      ...
      notrace unsigned int debug_smp_processor_id(void)
      {
            return check_preemption_disabled("smp_processor_id", "");
      ...
      notrace static unsigned int check_preemption_disabled(const char *what1,
                                                            const char *what2)
      {
            int this_cpu = raw_smp_processor_id();
    
    and bang. Use raw_cpu_ptr() directly to avoid that.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2018-9384
    Bug: 74356909
    
    Fixes: 57c82954e77f ("arm64: make cpu number a percpu variable")
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    
    Bug: 66351489
    Change-Id: I858c1f8347b6923b4641ab350bacd59131e815a7
    (cherry picked from commit 34a6980c82fb1342e7064844c95aa4cf933e5ecc)
    Signed-off-by: Zubin Mithra <zsm@google.com>
    Reviewed-on: https://gerrit.mot.com/1181661
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/arch/arm64/include/asm/smp.h b/arch/arm64/include/asm/smp.h
index 710cbd745615..ac13ff7f299b 100644
--- a/arch/arm64/include/asm/smp.h
+++ b/arch/arm64/include/asm/smp.h
@@ -28,8 +28,10 @@ DECLARE_PER_CPU_READ_MOSTLY(int, cpu_number);
  * We don't use this_cpu_read(cpu_number) as that has implicit writes to
  * preempt_count, and associated (compiler) barriers, that we'd like to avoid
  * the expense of. If we're preemptible, the value can be stale at use anyway.
+ * And we can't use this_cpu_ptr() either, as that winds up recursing back
+ * here under CONFIG_DEBUG_PREEMPT=y.
  */
-#define raw_smp_processor_id() (*this_cpu_ptr(&cpu_number))
+#define raw_smp_processor_id() (*raw_cpu_ptr(&cpu_number))
 
 struct seq_file;
 
