MotorolaMobilityLLC__kernel-msm
commit 37e66521232167c1f476a733aff5258e4714c364
Author:     Benjamin Tissoires <benjamin.tissoires@redhat.com>
AuthorDate: Tue Jan 19 12:34:58 2016 +0100
Commit:     Srihari Sathyanarayana <sriharis@motorola.com>
CommitDate: Sun Oct 23 10:38:02 2016 -0500

    HID: core: prevent out-of-bound readings
    
    Plugging a Logitech DJ receiver with KASAN activated raises a bunch of
    out-of-bound readings.
    
    The fields are allocated up to MAX_USAGE, meaning that potentially, we do
    not have enough fields to fit the incoming values.
    Add checks and silence KASAN.
    
    Change-Id: Ibfe2783947f34567291fde96400b0eb4cbc0f06e
    Mot-CRs-fixed:(CR)
    CVE-Fixed:CVE-2016-7915
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Reviewed-on: https://gerrit.mot.com/909148
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>
    (cherry picked from commit 258d4fae1dd9f0861ffb0a7ce00a8b70c672abae)
    Reviewed-on: https://gerrit.mot.com/911781
    Reviewed-by: Igor Kovalenko <igork@motorola.com>

diff --git a/drivers/hid/hid-core.c b/drivers/hid/hid-core.c
index 2bd798a7d9aa..54bbc2ce293b 100644
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@ -1148,6 +1148,7 @@ static void hid_input_field(struct hid_device *hid, struct hid_field *field,
 		/* Ignore report if ErrorRollOver */
 		if (!(field->flags & HID_MAIN_ITEM_VARIABLE) &&
 		    value[n] >= min && value[n] <= max &&
+		    value[n] - min < field->maxusage &&
 		    field->usage[value[n] - min].hid == HID_UP_KEYBOARD + 1)
 			goto exit;
 	}
@@ -1160,11 +1161,13 @@ static void hid_input_field(struct hid_device *hid, struct hid_field *field,
 		}
 
 		if (field->value[n] >= min && field->value[n] <= max
+			&& field->value[n] - min < field->maxusage
 			&& field->usage[field->value[n] - min].hid
 			&& search(value, field->value[n], count))
 				hid_process_event(hid, field, &field->usage[field->value[n] - min], 0, interrupt);
 
 		if (value[n] >= min && value[n] <= max
+			&& value[n] - min < field->maxusage
 			&& field->usage[value[n] - min].hid
 			&& search(field->value, value[n], count))
 				hid_process_event(hid, field, &field->usage[value[n] - min], 1, interrupt);
