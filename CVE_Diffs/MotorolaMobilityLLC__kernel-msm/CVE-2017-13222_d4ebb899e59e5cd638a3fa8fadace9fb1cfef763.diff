MotorolaMobilityLLC__kernel-msm
commit d4ebb899e59e5cd638a3fa8fadace9fb1cfef763
Author:     Chris Redpath <chris.redpath@arm.com>
AuthorDate: Tue Dec 19 15:59:13 2017 +0530
Commit:     Amarendra Reddy <amarenr@motorola.com>
CommitDate: Tue Dec 19 23:45:01 2017 -0600

    BACKPORT: ANDROID: sched/fair: Select correct capacity state for energy_diff
    
    The util returned from group_max_util is not capped at the max util
    present in the group, so it can be larger than the capacity stored in
    the array. Ensure that when this happens, we always use the last entry
    in the array to fetch energy from.
    
    Tested with synthetics on Juno board.
    
    Fixes: b/38159576
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-13222
    Bug: 38159576
    
    (backported from android-4.4, Change-Id: I89fb52fb7e6)
    Bug: 38159576
    Signed-off-by: Chris Redpath <chris.redpath@arm.com>
    
    Change-Id: I88efa916dc19908086e82018fbd952229312f028
    Reviewed-on: https://gerrit.mot.com/1106238
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 422438d43d90..8109d7c79934 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6535,17 +6535,21 @@ long group_norm_util(struct energy_env *eenv, struct sched_group *sg)
 static int find_new_capacity(struct energy_env *eenv,
 	const struct sched_group_energy * const sge)
 {
-	int idx;
+	int idx, max_idx = sge->nr_cap_states - 1;
 	unsigned long util = group_max_util(eenv);
 
+	/* default is max_cap if we don't find a match */
+	eenv->cap_idx = max_idx;
+
 	for (idx = 0; idx < sge->nr_cap_states; idx++) {
-		if (sge->cap_states[idx].cap >= util)
+		if (sge->cap_states[idx].cap >= util) {
+			/* Keep track of SG's capacity index */
+			eenv->cap_idx = idx;
 			break;
+		}
 	}
 
-	eenv->cap_idx = idx;
-
-	return idx;
+	return eenv->cap_idx;
 }
 
 static int group_idle_state(struct sched_group *sg)
