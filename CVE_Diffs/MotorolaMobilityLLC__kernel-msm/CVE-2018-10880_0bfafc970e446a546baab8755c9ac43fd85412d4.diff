MotorolaMobilityLLC__kernel-msm
commit 0bfafc970e446a546baab8755c9ac43fd85412d4
Author:     Ben Hutchings <ben@decadent.org.uk>
AuthorDate: Sat Sep 22 01:15:42 2018 +0100
Commit:     chenyt9 <chenyt9@lenovo.com>
CommitDate: Tue Aug 20 14:00:47 2019 +0800

    ext4: never move the system.data xattr out of the inode body
    
    When expanding the extra isize space, we must never move the
    system.data xattr out of the inode body.  For performance reasons, it
    doesn't make any sense, and the inline data implementation assumes
    that system.data xattr is never in the external xattr block.
    
    This addresses CVE-2018-10880
    
    https://bugzilla.kernel.org/show_bug.cgi?id=200005
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-10880
    BUG: 116406509
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Change-Id: Icfa05e25d2cf062759b82defcb76b115e56e9d36
    Reviewed-on: https://gerrit.mot.com/1287122
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index c71329f05b26..6ba2cfe61948 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -1389,6 +1389,11 @@ retry:
 		/* Find the entry best suited to be pushed into EA block */
 		entry = NULL;
 		for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {
+			/* never move system.data out of the inode */
+			if ((last->e_name_len == 4) &&
+			    (last->e_name_index == EXT4_XATTR_INDEX_SYSTEM) &&
+			    !memcmp(last->e_name, "data", 4))
+				continue;
 			total_size =
 			EXT4_XATTR_SIZE(le32_to_cpu(last->e_value_size)) +
 					EXT4_XATTR_LEN(last->e_name_len);
