MotorolaMobilityLLC__kernel-msm
commit 77ca160dd9d944038a79d3cbc0f50ddfa74ee21a
Author:     Konstantin Makariev <kmakariev@motorola.com>
AuthorDate: Wed Aug 24 10:13:49 2016 -0500
Commit:     Carlos Pinho <cpinho@motorola.com>
CommitDate: Fri Oct 11 20:57:51 2019 -0300

    input: synaptics_mmi: fix stack overflow
    
    Implement a fix for stack overflow CVE-2016-3865/A-28799389.
    
    Change-Id: I6daa77e357e4b6b25ae02079194de0c2f22fb932
    Signed-off-by: Konstantin Makariev <kmakariev@motorola.com>
    Reviewed-on: http://gerrit.mot.com/891762
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Reviewed-by: Alexander Filonenko <alexf@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/input/touchscreen/synaptics_mmi/synaptics_dsx_rmi_dev.c b/drivers/input/touchscreen/synaptics_mmi/synaptics_dsx_rmi_dev.c
index 0f186e361779..e5d1feeaed2a 100644
--- a/drivers/input/touchscreen/synaptics_mmi/synaptics_dsx_rmi_dev.c
+++ b/drivers/input/touchscreen/synaptics_mmi/synaptics_dsx_rmi_dev.c
@@ -34,6 +34,8 @@
 #define DEVICE_CLASS_NAME "rmidev"
 #define DEV_NUMBER 1
 #define REG_ADDR_LIMIT 0xFFFF
+#define MAX_READ_WRITE_SIZE 8096
+#define MIN_READ_WRITE_BUF_SIZE 256
 
 static ssize_t rmidev_sysfs_data_show(struct file *data_file,
 		struct kobject *kobj, struct bin_attribute *attributes,
@@ -75,6 +77,8 @@ struct rmidev_data {
 	struct class *device_class;
 	struct mutex file_mutex;
 	struct rmidev_handle *rmi_dev;
+	unsigned char *tmpbuf;
+	size_t tmpbuf_size;
 };
 
 static struct bin_attribute attr_data = {
@@ -315,6 +319,32 @@ clean_up:
 	return newpos;
 }
 
+static int alloc_tmpbuf(struct file *filp, size_t count)
+{
+	struct rmidev_data *dev_data = filp->private_data;
+
+	if (dev_data->tmpbuf_size != 0)	{
+		kfree(dev_data->tmpbuf);
+		dev_data->tmpbuf = NULL;
+		dev_data->tmpbuf_size = 0;
+	}
+
+	if (count > MAX_READ_WRITE_SIZE) {
+		pr_err("%s: Max buffer size exceeded\n", __func__);
+		return 1;
+	}
+
+	if (count < MIN_READ_WRITE_BUF_SIZE)
+		count = MIN_READ_WRITE_BUF_SIZE;
+
+	dev_data->tmpbuf = kzalloc(count, GFP_KERNEL);
+	if (!dev_data->tmpbuf)
+		return 1;
+
+	dev_data->tmpbuf_size = count;
+	return 0;
+}
+
 /*
  * rmidev_read: - use to read data from rmi device
  *
@@ -327,7 +357,6 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -343,21 +372,23 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 
 	mutex_lock(&(dev_data->file_mutex));
 
+	if (dev_data->tmpbuf_size < count && alloc_tmpbuf(filp, count) != 0)
+		return -ENOMEM;
+
 	retval = rmidev->fn_ptr->read(rmidev->rmi4_data,
 			*f_pos,
-			tmpbuf,
+			dev_data->tmpbuf,
 			count);
 	if (retval < 0)
 		goto clean_up;
 
-	if (copy_to_user(buf, tmpbuf, count))
+	if (copy_to_user(buf, dev_data->tmpbuf, count))
 		retval = -EFAULT;
 	else
 		*f_pos += retval;
 
 clean_up:
 	mutex_unlock(&(dev_data->file_mutex));
-
 	return retval;
 }
 
@@ -373,7 +404,6 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 		size_t count, loff_t *f_pos)
 {
 	ssize_t retval;
-	unsigned char tmpbuf[count + 1];
 	struct rmidev_data *dev_data = filp->private_data;
 
 	if (IS_ERR(dev_data)) {
@@ -387,20 +417,27 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
-	if (copy_from_user(tmpbuf, buf, count))
-		return -EFAULT;
-
 	mutex_lock(&(dev_data->file_mutex));
 
+	if (dev_data->tmpbuf_size < count && alloc_tmpbuf(filp, count) != 0) {
+		retval = -ENOMEM;
+		goto clean_up;
+	}
+
+	if (copy_from_user(dev_data->tmpbuf, buf, count)) {
+		retval = -EFAULT;
+		goto clean_up;
+	}
+
 	retval = rmidev->fn_ptr->write(rmidev->rmi4_data,
 			*f_pos,
-			tmpbuf,
+			dev_data->tmpbuf,
 			count);
 	if (retval >= 0)
 		*f_pos += retval;
 
+clean_up:
 	mutex_unlock(&(dev_data->file_mutex));
-
 	return retval;
 }
 
