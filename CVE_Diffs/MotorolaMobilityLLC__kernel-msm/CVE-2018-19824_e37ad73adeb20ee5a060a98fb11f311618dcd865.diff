MotorolaMobilityLLC__kernel-msm
commit e37ad73adeb20ee5a060a98fb11f311618dcd865
Author:     Hui Peng <benquike@gmail.com>
AuthorDate: Mon Dec 3 16:09:34 2018 +0100
Commit:     chenyt9 <chenyt9@lenovo.com>
CommitDate: Mon Dec 23 11:07:35 2019 +0800

    ALSA: usb-audio: Fix UAF decrement if card has no live interfaces in card.c
    
    If a USB sound card reports 0 interfaces, an error condition is triggered
    and the function usb_audio_probe errors out. In the error path, there was a
    use-after-free vulnerability where the memory object of the card was first
    freed, followed by a decrement of the number of active chips. Moving the
    decrement above the atomic_dec fixes the UAF.
    
    [ The oriGinal problem was introduced in 3.1 kernel, while it was
      developed in a different form.  The Fixes tag below indicates the
      oriGinal commit but it doesn't mean that the patch is applicable
      cleanly. -- tiwai ]
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-19824
    BUG: 120783587
    
    Change-Id: Ia56bb8029c7eba5af055ff542ee92b1999b0de2d
    Fixes: 362e4e49abe5 ("ALSA: usb-audio - clear chip->probing on error exit")
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Signed-off-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1419641
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Ling Jin <lingjin@motorola.com>
    Submit-Approved: Jira Key

diff --git a/sound/usb/card.c b/sound/usb/card.c
index 75fdfa8c74e4..0deef47ba6f2 100644
--- a/sound/usb/card.c
+++ b/sound/usb/card.c
@@ -743,9 +743,12 @@ static int usb_audio_probe(struct usb_interface *intf,
 
  __error:
 	if (chip) {
+		/* chip->active is inside the chip->card object,
+		 * decrement before memory is possibly returned.
+		 */
+		atomic_dec(&chip->active);
 		if (!chip->num_interfaces)
 			snd_card_free(chip->card);
-		atomic_dec(&chip->active);
 	}
 	mutex_unlock(&register_mutex);
 	return err;
