MotorolaMobilityLLC__kernel-msm
commit 9f367f7af8800b54b188dd0e8ac9cb9c324a7095
Author:     Mohit Aggarwal <maggarwa@codeaurora.org>
AuthorDate: Mon Sep 11 17:11:04 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Mon Oct 30 03:04:58 2017 -0500

    diag: Synchronize command registration table access
    
    Currently, command registration table is being read
    in debugfs without any protection which may lead to
    access of stale entries. The patch takes care of the
    issue by adding proper protection.
    
    CRs-Fixed: 2032672
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-9697
    
    Change-Id: I6ae058c16873f9eMontanaae6516a1a70fd6d2d0da80
    Signed-off-by: Mohit Aggarwal <maggarwa@codeaurora.org>
    Reviewed-on: https://gerrit.mot.com/1057094
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/char/diag/diag_debugfs.c b/drivers/char/diag/diag_debugfs.c
index 081257673232..3b1fba328944 100644
--- a/drivers/char/diag/diag_debugfs.c
+++ b/drivers/char/diag/diag_debugfs.c
@@ -567,15 +567,18 @@ static ssize_t diag_dbgfs_read_table(struct file *file, char __user *ubuf,
 	unsigned int buf_size;
 	buf_size = (DEBUG_BUF_SIZE < count) ? DEBUG_BUF_SIZE : count;
 
+	mutex_lock(&driver->cmd_reg_mutex);
 	if (diag_dbgfs_table_index >= diag_max_reg) {
 		/* Done. Reset to prepare for future requests */
 		diag_dbgfs_table_index = 0;
+		mutex_unlock(&driver->cmd_reg_mutex);
 		return 0;
 	}
 
 	buf = kzalloc(sizeof(char) * buf_size, GFP_KERNEL);
 	if (ZERO_OR_NULL_PTR(buf)) {
 		pr_err("diag: %s, Error allocating memory\n", __func__);
+		mutex_unlock(&driver->cmd_reg_mutex);
 		return -ENOMEM;
 	}
 	buf_size = ksize(buf);
@@ -617,6 +620,7 @@ static ssize_t diag_dbgfs_read_table(struct file *file, char __user *ubuf,
 			break;
 	}
 	diag_dbgfs_table_index = i+1;
+	mutex_unlock(&driver->cmd_reg_mutex);
 
 	*ppos = 0;
 	ret = simple_read_from_buffer(ubuf, count, ppos, buf, bytes_in_buffer);
diff --git a/drivers/char/diag/diagchar.h b/drivers/char/diag/diagchar.h
index b60430ef31a7..adfe085e0633 100644
--- a/drivers/char/diag/diagchar.h
+++ b/drivers/char/diag/diagchar.h
@@ -396,6 +396,7 @@ struct diagchar_dev {
 	unsigned char *apps_dci_buf;
 	int dci_state;
 	struct workqueue_struct *diag_dci_wq;
+	struct mutex cmd_reg_mutex;
 	/* Sizes that reflect memory pool sizes */
 	unsigned int itemsize;
 	unsigned int poolsize;
