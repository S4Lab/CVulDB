MotorolaMobilityLLC__kernel-msm
commit 3ceadb105d7301a4609be345a46843c5bf6a16d9
Author:     Andrey Konovalov <andreyknvl@google.com>
AuthorDate: Thu Feb 16 17:22:46 2017 +0100
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Tue Aug 8 06:12:16 2017 -0500

    dccp: fix freeing skb too early for IPV6_RECVPKTINFO
    
    In the current DCCP implementation an skb for a DCCP_PKT_REQUEST packet
    is forcibly freed via __kfree_skb in dccp_rcv_state_process if
    dccp_v6_conn_request successfully returns.
    
    However, if IPV6_RECVPKTINFO is set on a socket, the address of the skb
    is saved to ireq->pktopts and the ref count for skb is incremented in
    dccp_v6_conn_request, so skb is still in use. Nevertheless, it gets freed
    in dccp_rcv_state_process.
    
    Fix by calling consume_skb instead of doing goto discard and therefore
    calling __kfree_skb.
    
    Similar fixes for TCP:
    
    fb7e2399ec17f1004c0e0ccfd17439f8759ede01 [TCP]: skb is unexpectedly freed.
    0aea76d35c9651d55bbaf746e7914e5f9ae5a25d tcp: SYN packets are now
    simply consumed
    
    Mot-CRs-fixed:(CR)
    CVE-Fixed:CVE-2017-6074
    
    Bug: 35784697
    Upstream commit: 5edabca9d4cff7f1f2b68f0bac55ef99d9798ba4
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    (cherry picked from commit 8e35329aa97336f0f07637646d930156bc42bfb2)
    Signed-off-by: Vineet Angadi V <vineetv@motorola.com>
    
    Change-Id: I3bd67450835491301f6aeb13c8ff02d8c50ac880
    Reviewed-on: https://gerrit.mot.com/1009416
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/net/dccp/input.c b/net/dccp/input.c
index 14cdafad7a90..e511ccc74a07 100644
--- a/net/dccp/input.c
+++ b/net/dccp/input.c
@@ -606,7 +606,8 @@ int dccp_rcv_state_process(struct sock *sk, struct sk_buff *skb,
 			if (inet_csk(sk)->icsk_af_ops->conn_request(sk,
 								    skb) < 0)
 				return 1;
-			goto discard;
+			consume_skb(skb);
+			return 0;
 		}
 		if (dh->dccph_type == DCCP_PKT_RESET)
 			goto discard;
