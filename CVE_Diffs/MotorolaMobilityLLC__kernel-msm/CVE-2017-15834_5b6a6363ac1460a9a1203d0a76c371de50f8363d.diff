MotorolaMobilityLLC__kernel-msm
commit 5b6a6363ac1460a9a1203d0a76c371de50f8363d
Author:     Sreelakshmi Gownipalli <sgownipa@codeaurora.org>
AuthorDate: Mon Oct 9 12:59:56 2017 -0700
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Mon Feb 26 01:12:14 2018 -0600

    diag: Add mutex protection while reading dci debug statistics
    
    Unserialized access to diag_dbgfs_dci_data_index can lead to
    heap overflow. Add mutex protection while updating the
    diag_dbgfs_dci_data_index.
    
    CVE-fixed: CVE-2017-15834
    Mot-CRs-fixed: (CR)
    CRs-fixed: 2111858
    
    Change-Id: Iee9d0447494e3576e6293afcd4d7611bc429aa8a
    Signed-off-by: Sreelakshmi Gownipalli <sgownipa@codeaurora.org>
    Reviewed-on: https://gerrit.mot.com/1128936
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit ddaad87dd42347a783ff2c0eb3a7ca593332809c)

diff --git a/drivers/char/diag/diag_debugfs.c b/drivers/char/diag/diag_debugfs.c
index 4f9d700b45c6..c726986f16dd 100644
--- a/drivers/char/diag/diag_debugfs.c
+++ b/drivers/char/diag/diag_debugfs.c
@@ -42,7 +42,7 @@ static int diag_dbgfs_bridgeinfo_index;
 static int diag_dbgfs_finished;
 static int diag_dbgfs_dci_data_index;
 static int diag_dbgfs_dci_finished;
-
+static struct mutex diag_dci_dbgfs_mutex;
 static ssize_t diag_dbgfs_read_status(struct file *file, char __user *ubuf,
 				      size_t count, loff_t *ppos)
 {
@@ -139,6 +139,7 @@ static ssize_t diag_dbgfs_read_dcistats(struct file *file,
 	buf_size = ksize(buf);
 	bytes_remaining = buf_size;
 
+	mutex_lock(&diag_dci_dbgfs_mutex);
 	if (diag_dbgfs_dci_data_index == 0) {
 		bytes_written =
 			scnprintf(buf, buf_size,
@@ -194,8 +195,8 @@ static ssize_t diag_dbgfs_read_dcistats(struct file *file,
 		}
 		temp_data++;
 	}
-
 	diag_dbgfs_dci_data_index = (i >= DIAG_DCI_DEBUG_CNT) ? 0 : i + 1;
+	mutex_unlock(&diag_dci_dbgfs_mutex);
 	bytes_written = simple_read_from_buffer(ubuf, count, ppos, buf,
 								bytes_in_buf);
 	kfree(buf);
@@ -1008,6 +1009,7 @@ int diag_debugfs_init(void)
 		pr_warn("diag: could not allocate memory for dci debug info\n");
 
 	mutex_init(&dci_stat_mutex);
+	mutex_init(&diag_dci_dbgfs_mutex);
 	return 0;
 err:
 	kfree(dci_traffic);
@@ -1024,6 +1026,7 @@ void diag_debugfs_cleanup(void)
 
 	kfree(dci_traffic);
 	mutex_destroy(&dci_stat_mutex);
+	mutex_destroy(&diag_dci_dbgfs_mutex);
 }
 #else
 int diag_debugfs_init(void) { return 0; }
