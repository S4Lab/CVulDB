MotorolaMobilityLLC__kernel-msm
commit df928349e78fb436b7073d99799ec90a4ee9dee6
Author:     Amarendra Reddy <amarenr@motorola.com>
AuthorDate: Fri Feb 3 10:51:35 2017 -0200
Commit:     Marina Silva <mgsilva@motorola.com>
CommitDate: Wed Feb 15 11:32:20 2017 +0000

    usb: use %pK instead of %p to avoid kernel address leak in u_data_hsic.c
    
    The fix is designed to use %pK instead of %p, which also evaluates
    whether kptr_restrict is set.
    
    Change-Id: I03a3c126057e6d1c27b330468a144fe161e2d05c
    Mot-CRs-fixed:(CR)
    CVE-Fixed:CVE-2016-8403

diff --git a/drivers/usb/gadget/u_data_hsic.c b/drivers/usb/gadget/u_data_hsic.c
index 07bb5a8fac5f..df3cd70837f1 100644
--- a/drivers/usb/gadget/u_data_hsic.c
+++ b/drivers/usb/gadget/u_data_hsic.c
@@ -156,8 +156,8 @@ static int ghsic_data_alloc_requests(struct usb_ep *ep, struct list_head *head,
 	struct usb_request	*req;
 	unsigned long		flags;
 
-	pr_debug("%s: ep:%s head:%p num:%d cb:%p", __func__,
-			ep->name, head, num, cb);
+	pr_debug("%s: ep:%s head:%pK num:%d cb:%pK", __func__,
+		 ep->name, head, num, cb);
 
 	for (i = 0; i < num; i++) {
 		req = usb_ep_alloc_request(ep, GFP_KERNEL);
@@ -272,8 +272,8 @@ static int ghsic_data_receive(void *p, void *data, size_t len)
 		return -ENOTCONN;
 	}
 
-	pr_debug("%s: p:%p#%d skb_len:%d\n", __func__,
-			port, port->port_num, skb->len);
+	pr_debug("%s: p:%pK#%d skb_len:%d\n", __func__,
+		 port, port->port_num, skb->len);
 
 	spin_lock_irqsave(&port->tx_lock, flags);
 	__skb_queue_tail(&port->tx_skb_q, skb);
@@ -316,8 +316,8 @@ static void ghsic_data_write_tomdm(struct work_struct *w)
 	}
 
 	while ((skb = __skb_dequeue(&port->rx_skb_q))) {
-		pr_debug("%s: port:%p tom:%lu pno:%d\n", __func__,
-				port, port->to_modem, port->port_num);
+		pr_debug("%s: port:%pK tom:%lu pno:%d\n", __func__,
+			 port, port->to_modem, port->port_num);
 
 		info = (struct timestamp_info *)skb->cb;
 		info->rx_done_sent = get_timestamp();
@@ -424,7 +424,7 @@ static void ghsic_data_start_rx(struct gdata_port *port)
 	struct timestamp_info	*info;
 	unsigned int		created;
 
-	pr_debug("%s: port:%p\n", __func__, port);
+	pr_debug("%s: port:%pK\n", __func__, port);
 	if (!port)
 		return;
 
@@ -481,7 +481,7 @@ static void ghsic_data_start_io(struct gdata_port *port)
 	struct usb_ep	*ep_out, *ep_in;
 	int		ret;
 
-	pr_debug("%s: port:%p\n", __func__, port);
+	pr_debug("%s: port:%pK\n", __func__, port);
 
 	if (!port)
 		return;
@@ -538,12 +538,14 @@ static void ghsic_data_connect_w(struct work_struct *w)
 	struct gdata_port	*port =
 		container_of(w, struct gdata_port, connect_w);
 	int			ret;
-
+	pr_debug("%s: connected=%d, CH_READY=%d, port=%pK\n",
+		 __func__, atomic_read(&port->connected),
+		test_bit(CH_READY, &port->bridge_sts), port);
 	if (!port || !atomic_read(&port->connected) ||
 		!test_bit(CH_READY, &port->bridge_sts))
 		return;
 
-	pr_debug("%s: port:%p\n", __func__, port);
+	pr_debug("%s: port:%pK\n", __func__, port);
 
 	ret = data_bridge_open(&port->brdg);
 	if (ret) {
@@ -740,6 +742,8 @@ static int ghsic_data_port_alloc(unsigned port_num, enum gadget_type gtype)
 	pdrv->driver.owner = THIS_MODULE;
 
 	platform_driver_register(pdrv);
+	pr_debug("%s: port:%pK portno:%d\n", __func__, port, port_num);
+
 	return 0;
 }
 
@@ -855,15 +859,15 @@ int ghsic_data_connect(void *gptr, int port_num)
 
 	ret = usb_ep_enable(port->in);
 	if (ret) {
-		pr_err("%s: usb_ep_enable failed eptype:IN ep:%p",
-				__func__, port->in);
+		pr_err("%s: usb_ep_enable failed eptype:IN ep:%pK",
+		       __func__, port->in);
 		goto fail;
 	}
 	if (port->out) {
 		ret = usb_ep_enable(port->out);
 		if (ret) {
-			pr_err("%s: usb_ep_enable failed eptype:OUT ep:%p",
-					__func__, port->out);
+			pr_err("%s: usb_ep_enable failed eptype:OUT ep:%pK",
+			       __func__, port->out);
 			usb_ep_disable(port->in);
 			goto fail;
 		}
@@ -939,7 +943,7 @@ static void dbg_timestamp(char *event, struct sk_buff * skb)
 	write_lock_irqsave(&dbg_data.lck, flags);
 
 	scnprintf(dbg_data.buf[dbg_data.idx], DBG_DATA_MSG,
-		  "%p %u[%s] %u %u %u %u %u %u\n",
+		  "%pK %u[%s] %u %u %u %u %u %u\n",
 		  skb, skb->len, event, info->created, info->rx_queued,
 		  info->rx_done, info->rx_done_sent, info->tx_queued,
 		  get_timestamp());
@@ -1013,7 +1017,7 @@ static ssize_t ghsic_data_read_stats(struct file *file,
 		spin_lock_irqsave(&port->rx_lock, flags);
 		temp += scnprintf(buf + temp, DEBUG_DATA_BUF_SIZE - temp,
 				"\nName:           %s\n"
-				"#PORT:%d port#:   %p\n"
+				"#PORT:%d port#:   %pK\n"
 				"data_ch_open:	   %d\n"
 				"data_ch_ready:    %d\n"
 				"\n******UL INFO*****\n\n"
