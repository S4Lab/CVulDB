MotorolaMobilityLLC__kernel-msm
commit f74e78d8d444248dcb41d618ab314f9314a0c5ed
Author:     Srikanth A R <arsrikan@motorola.com>
AuthorDate: Fri Oct 21 14:46:52 2016 +0530
Commit:     a7301c <a7301c@motorola.com>
CommitDate: Wed Nov 2 14:34:36 2016 -0500

    msm: camera: Prevent potential heap overflow vulnerability
    
    In the msm_cpp_cfg_frame function, the new_frame->num_strips variable
    is not properly validated leading to a potential heap overflow
    vulnerability.The fix is designed to add additional bounds checks to
    prevent the potential heap overflow vulnerability.
    
    Mot-CRs-fixed: IKSECURITY-1568
    CVE-Fixed: CVE-2016-6739
    
    Change-Id: I6bc8dca82a0c27e552b3d6f286831162155960ee
    
    Signed-off-by: Srikanth A R <arsrikan@motorola.com>
    Change-Id: I1cb33f45d29c11084e2211f1f30359d215dbf356
    Reviewed-on: https://gerrit.mot.com/911717
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
index 9abfef21cc3d..040fd042d499 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
@@ -2274,21 +2274,19 @@ static int msm_cpp_cfg_frame(struct cpp_device *cpp_dev,
 		return -EINVAL;
 	}
 
-	if (!new_frame->partial_frame_indicator) {
-		if (cpp_frame_msg[new_frame->msg_len - 1] !=
-			MSM_CPP_MSG_ID_TRAILER) {
-			pr_err("Invalid frame message\n");
-			return -EINVAL;
-		}
+	if (cpp_frame_msg[new_frame->msg_len - 1] !=
+		MSM_CPP_MSG_ID_TRAILER) {
+		pr_err("Invalid frame message\n");
+		return -EINVAL;
+	}
 
-		if ((stripe_base + new_frame->num_strips * stripe_size + 1) !=
-			new_frame->msg_len) {
-			pr_err("Invalid frame message,len=%d,expected=%d\n",
-				new_frame->msg_len,
-				(stripe_base +
-				new_frame->num_strips * stripe_size + 1));
-			return -EINVAL;
-		}
+	if ((stripe_base + new_frame->num_strips * stripe_size + 1) !=
+		new_frame->msg_len) {
+		pr_err("Invalid frame message,len=%d,expected=%d\n",
+			new_frame->msg_len,
+			(stripe_base +
+			new_frame->num_strips * stripe_size + 1));
+		return -EINVAL;
 	}
 
 	if (cpp_dev->iommu_state != CPP_IOMMU_STATE_ATTACHED) {
