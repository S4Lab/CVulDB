MotorolaMobilityLLC__kernel-msm
commit 2654f975f18c6f7606011ecb934dbf4b4187e879
Author:     Ben Hutchings <ben@decadent.org.uk>
AuthorDate: Sat Sep 22 01:15:42 2018 +0100
Commit:     a7301c <a7301c@motorola.com>
CommitDate: Tue Feb 19 15:22:20 2019 -0600

    ext4: never move the system.data xattr out of the inode body
    
    When expanding the extra isize space, we must never move the
    system.data xattr out of the inode body.  For performance reasons, it
    doesn't make any sense, and the inline data implementation assumes
    that system.data xattr is never in the external xattr block.
    
    This addresses CVE-2018-10880
    
    https://bugzilla.kernel.org/show_bug.cgi?id=200005
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-10880
    BUG: 116406509
    
    Change-Id: I48c4c10e3cafdd8cec37cf236ef738c7f4ffc55e
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Reviewed-on: https://gerrit.mot.com/1286962
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index b16bfb52edb2..cdfc88633bd2 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -1410,6 +1410,11 @@ retry:
 		/* Find the entry best suited to be pushed into EA block */
 		entry = NULL;
 		for (; !IS_LAST_ENTRY(last); last = EXT4_XATTR_NEXT(last)) {
+			/* never move system.data out of the inode */
+			if ((last->e_name_len == 4) &&
+			    (last->e_name_index == EXT4_XATTR_INDEX_SYSTEM) &&
+			    !memcmp(last->e_name, "data", 4))
+				continue;
 			total_size =
 			EXT4_XATTR_SIZE(le32_to_cpu(last->e_value_size)) +
 					EXT4_XATTR_LEN(last->e_name_len);
