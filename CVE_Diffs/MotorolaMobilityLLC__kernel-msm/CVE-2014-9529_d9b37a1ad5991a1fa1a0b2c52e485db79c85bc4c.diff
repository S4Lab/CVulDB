MotorolaMobilityLLC__kernel-msm
commit d9b37a1ad5991a1fa1a0b2c52e485db79c85bc4c
Author:     Sasha Levin <sasha.levin@oracle.com>
AuthorDate: Thu Oct 20 12:53:13 2016 +0530
Commit:     Gerrit - the friendly Code Review server <code-review@localhost>
CommitDate: Fri Dec 2 13:58:13 2016 -0800

    KES: close race between key lookup and freeing
    
    When a key is being garbage collected, it's key->user would get put before
    the ->destroy() callback is called, where the key is removed from it's
    respective tracking structures.
    
    This leaves a key hanging in a semi-invalid state which leaves a window open
    for a different task to try an access key->user. An example is
    find_keyring_by_name() which would dereference key->user for a key that is
    in the process of being garbage collected (where key->user was freed but
    ->destroy() wasn't called yet - so it's still present in the linked list).
    
    This would cause either a panic, or corrupt memory.
    
    Fixes CVE-2014-9529.
    
    Git-commit: a3a8784454692dd72e5d5d34dcdab17b4420e74c
    Git-repo: http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Shreyas Narayan <shrena@codeaurora.org>
    Change-Id: Ia2092d68ae4890e4bc7ac107a2492817f18eaa3b

diff --git a/security/keys/gc.c b/security/keys/gc.c
index d67c97bb1025..08c596bf46ed 100644
--- a/security/keys/gc.c
+++ b/security/keys/gc.c
@@ -201,12 +201,12 @@ static noinline void key_gc_unused_keys(struct list_head *keys)
 		if (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))
 			atomic_dec(&key->user->nikeys);
 
-		key_user_put(key->user);
-
 		/* now throw away the key memory */
 		if (key->type->destroy)
 			key->type->destroy(key);
 
+                key_user_put(key->user);
+
 		kfree(key->description);
 
 #ifdef KEY_DEBUGGING
