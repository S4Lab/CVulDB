MotorolaMobilityLLC__kernel-msm
commit 2bba5fb7a624ab78fe7534c30180d88f83aa9823
Author:     Theodore Ts'o <tytso@mit.edu>
AuthorDate: Sat Jan 26 08:12:07 2019 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Feb 6 07:38:53 2019 -0600

    ext4: always verify the magic number in xattr blocks
    
    If there an inode points to a block which is also some other type of
    metadata block (such as a block allocation bitmap), the
    buffer_verified flag can be set when it was validated as that other
    metadata block type; however, it would make a really terrible external
    attribute block.  The reason why we use the verified flag is to avoid
    constantly reverifying the block.  However, it doesn't take much
    overhead to make sure the magic number of the xattr block is correct,
    and this will avoid potential crashes.
    
    This addresses CVE-2018-10879.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=200001
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-10879
    BUG: 116406063
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    [Backported to 4.4: adjust context]
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Change-Id: Idf80ee5cf00073000f3d1b7582c6f32fdd0a25f8
    Reviewed-on: https://gerrit.mot.com/1303077
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Ling Jin <lingjin@motorola.com>
    Submit-Approved: Jira Key

diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index 6ba2cfe61948..2eb5921e233d 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -218,12 +218,12 @@ ext4_xattr_check_block(struct inode *inode, struct buffer_head *bh)
 {
 	int error;
 
-	if (buffer_verified(bh))
-		return 0;
-
 	if (BHDR(bh)->h_magic != cpu_to_le32(EXT4_XATTR_MAGIC) ||
 	    BHDR(bh)->h_blocks != cpu_to_le32(1))
 		return -EIO;
+	if (buffer_verified(bh))
+		return 0;
+
 	if (!ext4_xattr_block_csum_verify(inode, bh->b_blocknr, BHDR(bh)))
 		return -EIO;
 	error = ext4_xattr_check_names(BFIRST(bh), bh->b_data + bh->b_size,
