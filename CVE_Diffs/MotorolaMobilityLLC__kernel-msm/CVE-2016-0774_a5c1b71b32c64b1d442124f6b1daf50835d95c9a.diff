MotorolaMobilityLLC__kernel-msm
commit a5c1b71b32c64b1d442124f6b1daf50835d95c9a
Author:     Ben Hutchings <ben@decadent.org.uk>
AuthorDate: Sat Feb 13 02:34:52 2016 +0000
Commit:     Gerrit - the friendly Code Review server <code-review@localhost>
CommitDate: Tue Aug 2 03:33:19 2016 -0700

    pipe: Fix buffer offset after partially failed read
    
    Quoting the RHEL advisory:
    
    > It was found that the fix for CVE-2015-1805 incorrectly kept buffer
    > offset and buffer length in sync on a failed atomic read, potentially
    > resulting in a pipe buffer state corruption. A local, unprivileged user
    > could use this flaw to crash the system or leak kernel memory to user
    > space. (CVE-2016-0774, Moderate)
    
    The same flawed fix was applied to stable branches from 2.6.32.y to
    3.14.y inclusive, and I was able to reproduce the issue on 3.2.y.
    We need to give pipe_iov_copy_to_user() a separate offset variable
    and only update the buffer offset if it succeeds.
    
    Change-Id: Ibc4d13da6c463d02bd6ef7addc0fc871b6f63760
    References: https://rhn.redhat.com/errata/RHSA-2016-0103.html
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Git-commit: feae3ca2e5e1a8f44aa6290255d3d9709985d0b2
    Git-repo: https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git
    Signed-off-by: Srinivasarao P <spathi@codeaurora.org>

diff --git a/fs/pipe.c b/fs/pipe.c
index 3e7ab278bb0c..50267e6ba688 100644
--- a/fs/pipe.c
+++ b/fs/pipe.c
@@ -401,6 +401,7 @@ pipe_read(struct kiocb *iocb, const struct iovec *_iov,
 			void *addr;
 			size_t chars = buf->len, remaining;
 			int error, atomic;
+			int offset;
 
 			if (chars > total_len)
 				chars = total_len;
@@ -414,9 +415,10 @@ pipe_read(struct kiocb *iocb, const struct iovec *_iov,
 
 			atomic = !iov_fault_in_pages_write(iov, chars);
 			remaining = chars;
+			offset = buf->offset;
 redo:
 			addr = ops->map(pipe, buf, atomic);
-			error = pipe_iov_copy_to_user(iov, addr, &buf->offset,
+			error = pipe_iov_copy_to_user(iov, addr, &offset,
 						      &remaining, atomic);
 			ops->unmap(pipe, buf, addr);
 			if (unlikely(error)) {
@@ -432,6 +434,7 @@ redo:
 				break;
 			}
 			ret += chars;
+			buf->offset += chars;
 			buf->len -= chars;
 
 			/* Was it a packet buffer? Clean up and exit */
