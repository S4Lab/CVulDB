MotorolaMobilityLLC__kernel-msm
commit c54b9a8f753cba467b4982b2c35b7e5af75c7da3
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Fri Jun 24 17:07:33 2016 -0700
Commit:     chenyt9 <chenyt9@lenovo.com>
CommitDate: Tue Dec 3 10:02:04 2019 +0800

    UPSTREAM: fix up initial thread stack pointer vs thread_info confusion
    
    The INIT_TASK() initializer was similarly confused about the stack vs
    thread_info allocation that the allocators had, and that were fixed in
    commit b235beea9e99 ("Clarify naming of thread info/stack allocators").
    
    The task ->stack pointer only incidentally ends up having the same value
    as the thread_info, and in fact that will change.
    
    So fix the initial task struct initializer to point to 'init_stack'
    instead of 'init_thread_info', and make sure the ia64 Defenderinition for
    that exists.
    
    This actually makes the ia64 tsk->stack pointer be sensible for the
    initial task, but not for any other task.  As mentioned in commit
    b235beea9e99, that whole pointer isn't actually used on ia64, since
    task_stack_page() there just points to the (single) allocation.
    
    All the other architectures seem to have copied the 'init_stack'
    Defenderinition, even if it tended to be generally unusued.
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2018-9384
    Bug: 74356909
    Bug: 66351489
    Change-Id: I9dce544baf967c8941e94e47ccea387a7edcc93e
    (cherry picked from commit 7f1a00b6fcd0e3c19beba2e92d157dc0c2cf3494)
    Signed-off-by: Zubin Mithra <zsm@google.com>
    Reviewed-on: https://gerrit.mot.com/1182384
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/arch/ia64/kernel/init_task.c b/arch/ia64/kernel/init_task.c
index f9efe9739d3f..0eaa89f3defd 100644
--- a/arch/ia64/kernel/init_task.c
+++ b/arch/ia64/kernel/init_task.c
@@ -26,6 +26,7 @@ static struct sighand_struct init_sighand = INIT_SIGHAND(init_sighand);
  * handled. This is done by having a special ".data..init_task" section...
  */
 #define init_thread_info	init_task_mem.s.thread_info
+#define init_stack		init_task_mem.stack
 
 union {
 	struct {
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 1c1ff7e4faa4..9a0056499337 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -190,7 +190,7 @@ extern struct task_group root_task_group;
 #define INIT_TASK(tsk)	\
 {									\
 	.state		= 0,						\
-	.stack		= &init_thread_info,				\
+	.stack		= init_stack,					\
 	.usage		= ATOMIC_INIT(2),				\
 	.flags		= PF_KTHREAD,					\
 	.prio		= MAX_PRIO-20,					\
