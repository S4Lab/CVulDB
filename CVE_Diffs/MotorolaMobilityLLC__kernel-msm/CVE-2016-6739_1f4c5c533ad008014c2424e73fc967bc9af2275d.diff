MotorolaMobilityLLC__kernel-msm
commit 1f4c5c533ad008014c2424e73fc967bc9af2275d
Author:     Srikanth A R <arsrikan@motorola.com>
AuthorDate: Wed Oct 5 18:24:20 2016 +0530
Commit:     Srikanth A R <arsrikan@motorola.com>
CommitDate: Tue Oct 25 01:19:21 2016 -0500

    msm: camera: Prevent potential heap overflow vulnerability
    
    In the msm_cpp_cfg_frame function, the new_frame->num_strips variable
    is not properly validated leading to a potential heap overflow
    vulnerability.The fix is designed to add additional bounds checks to
    prevent the potential heap overflow vulnerability.
    
    Mot-CRs-fixed: IKSECURITY-1568
    CVE-Fixed: CVE-2016-6739
    
    Change-Id: I6bc8dca82a0c27e552b3d6f286831162155960ee
    Signed-off-by: Srikanth A R <arsrikan@motorola.com>
    Reviewed-on: https://gerrit.mot.com/906545
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Robert Kubicki <w17311@motorola.com>
    Reviewed-by: Satya Prasad Kottisa <fvgm76@motorola.com>
    Reviewed-by: Christopher Fries <cfries@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>
    (cherry picked from commit 3e46168de61349748fbd1d806c013eb328de943d)
    Reviewed-on: https://gerrit.mot.com/910736
    Reviewed-by: Igor Kovalenko <igork@motorola.com>

diff --git a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
index 964703c33f96..7874cf6a1369 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
@@ -2184,21 +2184,19 @@ static int msm_cpp_cfg_frame(struct cpp_device *cpp_dev,
 		return -EINVAL;
 	}
 
-	if (!new_frame->partial_frame_indicator) {
-		if (cpp_frame_msg[new_frame->msg_len - 1] !=
-			MSM_CPP_MSG_ID_TRAILER) {
-			pr_err("Invalid frame message\n");
-			return -EINVAL;
-		}
+	if (cpp_frame_msg[new_frame->msg_len - 1] !=
+		MSM_CPP_MSG_ID_TRAILER) {
+		pr_err("Invalid frame message\n");
+		return -EINVAL;
+	}
 
-		if ((stripe_base + new_frame->num_strips * stripe_size + 1) !=
-			new_frame->msg_len) {
-			pr_err("Invalid frame message,len=%d,expected=%d\n",
-				new_frame->msg_len,
-				(stripe_base +
-				new_frame->num_strips * stripe_size + 1));
-			return -EINVAL;
-		}
+	if ((stripe_base + new_frame->num_strips * stripe_size + 1) !=
+		new_frame->msg_len) {
+		pr_err("Invalid frame message,len=%d,expected=%d\n",
+			new_frame->msg_len,
+			(stripe_base +
+			new_frame->num_strips * stripe_size + 1));
+		return -EINVAL;
 	}
 
 	if (cpp_dev->iommu_state != CPP_IOMMU_STATE_ATTACHED) {
