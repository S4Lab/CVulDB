MotorolaMobilityLLC__kernel-msm
commit 9a06f2e02b17541fbae20ec821a9b1f404af847b
Author:     Todd Kjos <tkjos@google.com>
AuthorDate: Mon Nov 26 17:24:15 2018 -0800
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Mar 20 05:34:34 2019 -0500

    binder: fix race between munmap() and direct reclaim
    
    An munmap() on a binder device causes binder_vma_close() to be called
    which clears the alloc->vma pointer.
    
    If direct reclaim causes binder_alloc_free_page() to be called, there
    is a race where alloc->vma is read into a local vma pointer and then
    used later after the mm->mmap_sem is acquired. This can result in
    calling zap_page_range() with an invalid vma which manifests as a
    use-after-free in zap_page_range().
    
    The fix is to check alloc->vma after acquiring the mmap_sem (which we
    were acquiring anyway) and bail out of binder_alloc_free_page() if it
    has changed to NULL.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2019-1999
    BUG: 120025196
    
    Change-Id: I9ea0558a57635a747d7a48ed35991d39b860abf6
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-on: https://gerrit.mot.com/1302466
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/android/binder_alloc.c b/drivers/android/binder_alloc.c
index 1c76daacfb0b..b8fffb591ec4 100644
--- a/drivers/android/binder_alloc.c
+++ b/drivers/android/binder_alloc.c
@@ -924,14 +924,13 @@ enum lru_status binder_alloc_free_page(struct list_head *item,
 
 	index = page - alloc->pages;
 	page_addr = (uintptr_t)alloc->buffer + index * PAGE_SIZE;
+
+	mm = alloc->vma_vm_mm;
+	if (!mmget_not_zero(mm))
+		goto err_mmget;
+	if (!down_write_trylock(&mm->mmap_sem))
+		goto err_down_write_mmap_sem_failed;
 	vma = alloc->vma;
-	if (vma) {
-		if (!mmget_not_zero(alloc->vma_vm_mm))
-			goto err_mmget;
-		mm = alloc->vma_vm_mm;
-		if (!down_write_trylock(&mm->mmap_sem))
-			goto err_down_write_mmap_sem_failed;
-	}
 
 	list_lru_isolate(lru, item);
 	spin_unlock(lock);
@@ -945,10 +944,9 @@ enum lru_status binder_alloc_free_page(struct list_head *item,
 			       PAGE_SIZE, NULL);
 
 		trace_binder_unmap_user_end(alloc, index);
-
-		up_write(&mm->mmap_sem);
-		mmput(mm);
 	}
+	up_write(&mm->mmap_sem);
+	mmput(mm);
 
 	trace_binder_unmap_kernel_start(alloc, index);
 
