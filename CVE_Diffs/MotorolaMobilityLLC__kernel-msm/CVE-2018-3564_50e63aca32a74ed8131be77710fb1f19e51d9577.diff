MotorolaMobilityLLC__kernel-msm
commit 50e63aca32a74ed8131be77710fb1f19e51d9577
Author:     Tharun Kumar Merugu <mtharu@codeaurora.org>
AuthorDate: Fri Mar 30 18:56:35 2018 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Mon Jun 11 04:20:36 2018 -0500

    msm: adsprpc: Fix race conditions on same buffer
    
    Variable map may pointing to the same buffer on race conditions
    in functions fastrpc_internal_mmap and fastrpc_internal_munmap,
    use mutex to avoid race conditions on same buffer.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-3564
    CRs-Fixed: 2062648
    
    Change-Id: I96ed884c44a36f574677ba3ba189dfbf2ce3751d
    Acked-by: Krishnaiah Tadakamalla <ktadakam@qti.qualcomm.com>
    Signed-off-by: Tharun Kumar Merugu <mtharu@codeaurora.org>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1156609
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit a755d63405ff33bf17cc0fadb7fe04571ca33a58)

diff --git a/drivers/char/adsprpc.c b/drivers/char/adsprpc.c
index 3cde43e35fb1..a16cb7cf7c0d 100644
--- a/drivers/char/adsprpc.c
+++ b/drivers/char/adsprpc.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -248,6 +248,7 @@ struct fastrpc_file {
 	int cid;
 	int ssrcount;
 	struct fastrpc_apps *apps;
+	struct mutex map_mutex;
 };
 
 static struct fastrpc_apps gfa;
@@ -1657,6 +1658,8 @@ static int fastrpc_internal_munmap(struct fastrpc_file *fl,
 {
 	int err = 0;
 	struct fastrpc_mmap *map = 0;
+
+	mutex_lock(&fl->map_mutex);
 	if (!fastrpc_mmap_remove(fl, ud->vaddrout, ud->size,
 				 &map)) {
 		VERIFY(err, !fastrpc_munmap_on_dsp(fl, map));
@@ -1667,6 +1670,7 @@ static int fastrpc_internal_munmap(struct fastrpc_file *fl,
 bail:
 	if (err && map)
 		fastrpc_mmap_add(map);
+	mutex_unlock(&fl->map_mutex);
 	return err;
 }
 
@@ -1676,10 +1680,12 @@ static int fastrpc_internal_mmap(struct fastrpc_file *fl,
 
 	struct fastrpc_mmap *map = 0;
 	int err = 0;
+	mutex_lock(&fl->map_mutex);
 	if (!fastrpc_mmap_find(fl, ud->fd, (uintptr_t)ud->vaddrin, ud->size,
-			       ud->flags, &map))
+			       ud->flags, &map)) {
+		mutex_unlock(&fl->map_mutex);
 		return 0;
-
+	}
 	VERIFY(err, !fastrpc_mmap_create(fl, ud->fd, (uintptr_t)ud->vaddrin,
 					 ud->size, ud->flags, &map));
 	if (err)
@@ -1691,6 +1697,7 @@ static int fastrpc_internal_mmap(struct fastrpc_file *fl,
  bail:
 	if (err && map)
 		fastrpc_mmap_free(map);
+	mutex_unlock(&fl->map_mutex);
 	return err;
 }
 
@@ -1871,6 +1878,7 @@ static int fastrpc_device_release(struct inode *inode, struct file *file)
 		}
 		me->pending_free++;
 		mutex_unlock(&me->flfree_mutex);
+		mutex_destroy(&fl->map_mutex);
 		file->private_data = 0;
 	}
 bail:
@@ -1978,7 +1986,7 @@ static int fastrpc_device_open(struct inode *inode, struct file *filp)
 		return err;
 
 	filp->private_data = fl;
-
+	mutex_init(&fl->map_mutex);
 	mutex_lock(&me->smd_mutex);
 
 	context_list_ctor(&fl->clst);
