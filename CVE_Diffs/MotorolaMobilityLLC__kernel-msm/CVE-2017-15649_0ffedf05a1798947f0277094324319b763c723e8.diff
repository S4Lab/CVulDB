MotorolaMobilityLLC__kernel-msm
commit 0ffedf05a1798947f0277094324319b763c723e8
Author:     Willem de Bruijn <willemb@google.com>
AuthorDate: Fri Feb 9 18:31:32 2018 +0530
Commit:     a7301c <a7301c@motorola.com>
CommitDate: Sun Apr 15 23:23:39 2018 -0500

    packet: in packet_do_bind, test fanout with bind_lock held
    
    Once a socket has po->fanout set, it remains a member of the group
    until it is destroyed. The prot_hook must be constant and identical
    across sockets in the group.
    
    If fanout_add races with packet_do_bind between the test of po->fanout
    and taking the lock, the bind call may make type or dev inconsistent
    with that of the fanout group.
    
    Hold po->bind_lock when testing po->fanout to avoid this race.
    
    I had to introduce artificial delay (local_bh_enable) to actually
    observe the race.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-15649
    BUG: 69160446
    
    Change-Id: I3d86d6a5ad6e9a0abce2724e8c09ea575d8c8624
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1135414
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 40a837fab740..e72b4655c97c 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -2503,17 +2503,19 @@ static int packet_release(struct socket *sock)
 static int packet_do_bind(struct sock *sk, struct net_device *dev, __be16 protocol)
 {
 	struct packet_sock *po = pkt_sk(sk);
+	int ret = 0;
 
+	lock_sock(sk);
+
+	spin_lock(&po->bind_lock);
 	if (po->fanout) {
 		if (dev)
 			dev_put(dev);
 
-		return -EINVAL;
+		ret = -EINVAL;
+		goto out_unlock;
 	}
 
-	lock_sock(sk);
-
-	spin_lock(&po->bind_lock);
 	unregister_prot_hook(sk, true);
 
 	po->num = protocol;
@@ -2540,7 +2542,7 @@ static int packet_do_bind(struct sock *sk, struct net_device *dev, __be16 protoc
 out_unlock:
 	spin_unlock(&po->bind_lock);
 	release_sock(sk);
-	return 0;
+	return ret;
 }
 
 /*
