MotorolaMobilityLLC__kernel-msm
commit 8e7ad678ef043e9be28ddc9e7a5e6f2259913706
Author:     Benjamin Chan <bkchan@codeaurora.org>
AuthorDate: Wed Apr 19 15:52:07 2017 -0400
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Thu Jul 27 04:25:27 2017 -0500

    msm: mdss: Add plane_count limit check for mdss_rotator buffer
    
    For each input and output buffer given to mdss rotator, it is necessary
    to check the range of the plane_count value against the MAX_PLANES
    definition, in order to avoid any plane array out of bound access.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-8271
    
    CRs-Fixed: 2028681
    Change-Id: I117bf5daead17e5e97c62c6dc8e21d1fcc9d8e74
    Signed-off-by: Benjamin Chan <bkchan@codeaurora.org>
    Signed-off-by: Ashwin Pathmudi <jfxr63@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1015498
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Bang Nguyen <bangnguyen@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/video/msm/mdss/mdss_rotator.c b/drivers/video/msm/mdss/mdss_rotator.c
index 055c5d22b2d2..019621b67b3a 100644
--- a/drivers/video/msm/mdss/mdss_rotator.c
+++ b/drivers/video/msm/mdss/mdss_rotator.c
@@ -501,6 +501,12 @@ static int mdss_rotator_import_buffer(struct mdp_layer_buffer *buffer,
 
 	memset(planes, 0, sizeof(planes));
 
+	if (buffer->plane_count > MAX_PLANES) {
+		pr_err("buffer plane_count exceeds MAX_PLANES limit:%d\n",
+				buffer->plane_count);
+		return -EINVAL;
+	}
+
 	for (i = 0; i < buffer->plane_count; i++) {
 		planes[i].memory_id = buffer->planes[i].fd;
 		planes[i].offset = buffer->planes[i].offset;
@@ -2098,6 +2104,20 @@ struct mdss_rot_entry_container *mdss_rotator_req_init(
 	struct mdss_rot_entry_container *req;
 	int size, i;
 
+	/*
+	 * Check input and output plane_count from each given item
+	 * are within the MAX_PLANES limit
+	 */
+	for (i = 0 ; i < count; i++) {
+		if ((items[i].input.plane_count > MAX_PLANES) ||
+				(items[i].output.plane_count > MAX_PLANES)) {
+			pr_err("Input/Output plane_count exceeds MAX_PLANES limit, input:%d, output:%d\n",
+					items[i].input.plane_count,
+					items[i].output.plane_count);
+			return ERR_PTR(-EINVAL);
+		}
+	}
+
 	size = sizeof(struct mdss_rot_entry_container);
 	size += sizeof(struct mdss_rot_entry) * count;
 	req = devm_kzalloc(&mgr->pdev->dev, size, GFP_KERNEL);
