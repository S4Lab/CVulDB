MotorolaMobilityLLC__kernel-msm
commit 6cb026d3642da224b3456d55dc61591ad0319041
Author:     Todd Kjos <tkjos@google.com>
AuthorDate: Mon Nov 26 17:24:15 2018 -0800
Commit:     Carlos Pinho <cpinho@motorola.com>
CommitDate: Fri Oct 11 21:32:48 2019 -0300

    binder: fix race between munmap() and direct reclaim
    
    An munmap() on a binder device causes binder_vma_close() to be called
    which clears the alloc->vma pointer.
    
    If direct reclaim causes binder_alloc_free_page() to be called, there
    is a race where alloc->vma is read into a local vma pointer and then
    used later after the mm->mmap_sem is acquired. This can result in
    calling zap_page_range() with an invalid vma which manifests as a
    use-after-free in zap_page_range().
    
    The fix is to check alloc->vma after acquiring the mmap_sem (which we
    were acquiring anyway) and bail out of binder_alloc_free_page() if it
    has changed to NULL.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2019-1999
    BUG: 120025196
    
    Change-Id: I9ea0558a57635a747d7a48ed35991d39b860abf6
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-on: https://gerrit.mot.com/1302503
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/android/binder_alloc.c b/drivers/android/binder_alloc.c
index 6bea2840e70a..74d6f8b9b8b9 100644
--- a/drivers/android/binder_alloc.c
+++ b/drivers/android/binder_alloc.c
@@ -931,8 +931,7 @@ enum lru_status binder_alloc_free_page(struct list_head *item,
 	page_addr = (uintptr_t)alloc->buffer + index * PAGE_SIZE;
 
 	mm = alloc->vma_vm_mm;
-	/* Same as mmget_not_zero() in later kernel versions */
-	if (!atomic_inc_not_zero(&alloc->vma_vm_mm->mm_users))
+	if (!atomic_inc_not_zero(&mm->mm_users))
 		goto err_mmget;
 	if (!down_write_trylock(&mm->mmap_sem))
 		goto err_down_write_mmap_sem_failed;
