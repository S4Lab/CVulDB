MotorolaMobilityLLC__kernel-msm
commit 1cd7c08120683731af11333c8589b74461cd786a
Author:     VijayaKumar T M <vtmuni@codeaurora.org>
AuthorDate: Tue Sep 6 06:34:57 2016 +0000
Commit:     chenlh4 <chenlh4@lenovo.com>
CommitDate: Tue Nov 28 20:31:51 2017 +0800

    msm: sensor: Avoid potential stack overflow
    
    Add a check to validate the user input data is not
    greater than expected stack buffer size to avoid out
    of bounds array accesses
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2016-6740
    
    Change-Id: Ie2630fad6459e431770f5128b82a70d1547e9308
    Signed-off-by: VijayaKumar T M <vtmuni@codeaurora.org>
    Signed-off-by: Srikanth A R <arsrikan@motorola.com> Please enter the commit message for your changes. Lines starting
    Reviewed-on: https://gerrit.mot.com/911286
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Robert Kubicki <w17311@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_cci_i2c.c b/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_cci_i2c.c
old mode 100644
new mode 100755
index 5fbb47ed0cc3..16bdbf2ad1f8
--- a/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_cci_i2c.c
+++ b/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_cci_i2c.c
@@ -282,6 +282,12 @@ int32_t msm_camera_cci_i2c_write_seq_table(
 	client_addr_type = client->addr_type;
 	client->addr_type = write_setting->addr_type;
 
+	if (reg_setting->reg_data_size > I2C_SEQ_REG_DATA_MAX) {
+		pr_err("%s: number of bytes %u exceeding the max supported %d\n",
+		__func__, reg_setting->reg_data_size, I2C_SEQ_REG_DATA_MAX);
+		return rc;
+	}
+
 	for (i = 0; i < write_setting->size; i++) {
 		rc = msm_camera_cci_i2c_write_seq(client, reg_setting->reg_addr,
 			reg_setting->reg_data, reg_setting->reg_data_size);
@@ -339,6 +345,7 @@ static int32_t msm_camera_cci_i2c_compare(struct msm_camera_i2c_client *client,
 	int32_t rc;
 	uint16_t reg_data = 0;
 	int data_len = 0;
+
 	switch (data_type) {
 	case MSM_CAMERA_I2C_BYTE_DATA:
 	case MSM_CAMERA_I2C_WORD_DATA:
@@ -394,6 +401,7 @@ int32_t msm_camera_cci_i2c_poll(struct msm_camera_i2c_client *client,
 {
 	int32_t rc = -EFAULT;
 	int32_t i = 0;
+
 	S_I2C_DBG("%s: addr: 0x%x data: 0x%x dt: %d\n",
 		__func__, addr, data, data_type);
 
@@ -456,6 +464,7 @@ static int32_t msm_camera_cci_i2c_set_write_mask_data(
 {
 	int32_t rc;
 	uint16_t reg_data;
+
 	CDBG("%s\n", __func__);
 	if (mask == -1)
 		return 0;
@@ -485,8 +494,10 @@ int32_t msm_camera_cci_i2c_write_conf_tbl(
 {
 	int i;
 	int32_t rc = -EFAULT;
+
 	for (i = 0; i < size; i++) {
 		enum msm_camera_i2c_data_type dt;
+
 		if (reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL) {
 			rc = msm_camera_cci_i2c_poll(client,
 				reg_conf_tbl->reg_addr,
diff --git a/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_qup_i2c.c b/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_qup_i2c.c
old mode 100644
new mode 100755
index e7a73addadde..c0aabebe9c6d
--- a/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_qup_i2c.c
+++ b/drivers/media/platform/msm/camera_v2_2016/sensor/io/msm_camera_qup_i2c.c
@@ -401,6 +401,12 @@ int32_t msm_camera_qup_i2c_write_seq_table(struct msm_camera_i2c_client *client,
 	client_addr_type = client->addr_type;
 	client->addr_type = write_setting->addr_type;
 
+	if (reg_setting->reg_data_size > I2C_SEQ_REG_DATA_MAX) {
+		pr_err("%s: number of bytes %u exceeding the max supported %d\n",
+		__func__, reg_setting->reg_data_size, I2C_SEQ_REG_DATA_MAX);
+		return rc;
+	}
+
 	for (i = 0; i < write_setting->size; i++) {
 		rc = msm_camera_qup_i2c_write_seq(client, reg_setting->reg_addr,
 			reg_setting->reg_data, reg_setting->reg_data_size);
@@ -456,6 +462,7 @@ static int32_t msm_camera_qup_i2c_compare(
 	int32_t rc;
 	uint16_t reg_data = 0;
 	int data_len = 0;
+
 	switch (data_type) {
 	case MSM_CAMERA_I2C_BYTE_DATA:
 	case MSM_CAMERA_I2C_WORD_DATA:
@@ -511,6 +518,7 @@ int32_t msm_camera_qup_i2c_poll(struct msm_camera_i2c_client *client,
 {
 	int32_t rc = 0;
 	int i;
+
 	S_I2C_DBG("%s: addr: 0x%x data: 0x%x dt: %d\n",
 		__func__, addr, data, data_type);
 
@@ -570,6 +578,7 @@ static int32_t msm_camera_qup_i2c_set_write_mask_data(
 {
 	int32_t rc;
 	uint16_t reg_data;
+
 	CDBG("%s\n", __func__);
 	if (mask == -1)
 		return 0;
@@ -600,9 +609,11 @@ int32_t msm_camera_qup_i2c_write_conf_tbl(
 {
 	int i;
 	int32_t rc = -EFAULT;
+
 	pr_err("%s, E. ", __func__);
 	for (i = 0; i < size; i++) {
 		enum msm_camera_i2c_data_type dt;
+
 		if (reg_conf_tbl->cmd_type == MSM_CAMERA_I2C_CMD_POLL) {
 			rc = msm_camera_qup_i2c_poll(client,
 				reg_conf_tbl->reg_addr,
