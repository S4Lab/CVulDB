MotorolaMobilityLLC__kernel-msm
commit 0ea5f0f52b5896a9253ad7f8dbfbd708b901ba16
Author:     Utkarsh Saxena <usaxena@codeaurora.org>
AuthorDate: Tue Apr 25 17:39:41 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Mon Sep 4 23:39:25 2017 -0500

    msm: ipa: Fix for missing int overflow check in the refcount library
    
    Overflow of reference counter can lead to memory leak.
    
    Before incrementing the reference count, check with
    U32_MAX and return for error check.
    
    Mot-CRs-fixed:(CR)
    CVE-fixed: CVE-2017-0746
    
    Bug: 35467471
    CRs-Fixed: 2029392
    Change-Id: Ib96d36574ee086ec73c9836110cb2c98e8ae3d66
    Acked-by: Mohammed Javid <mjavid@qti.qualcomm.com>
    Signed-off-by: Utkarsh Saxena <usaxena@codeaurora.org>
    Reviewed-on: https://gerrit.mot.com/1025039
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit 68fc50d2a69508c26b81a041ec2b03cf213c7ce6)

diff --git a/drivers/platform/msm/ipa/ipa_rt.c b/drivers/platform/msm/ipa/ipa_rt.c
index 47767cdafa70..a6f6538656c5 100644
--- a/drivers/platform/msm/ipa/ipa_rt.c
+++ b/drivers/platform/msm/ipa/ipa_rt.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, 2016-2017 The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -1289,6 +1289,10 @@ int ipa_get_rt_tbl(struct ipa_ioc_get_rt_tbl *lookup)
 	mutex_lock(&ipa_ctx->lock);
 	entry = __ipa_find_rt_tbl(lookup->ip, lookup->name);
 	if (entry && entry->cookie == IPA_COOKIE) {
+		if (entry->ref_cnt == U32_MAX) {
+			IPAERR("fail: ref count crossed limit\n");
+			goto ret;
+		}
 		entry->ref_cnt++;
 		lookup->hdl = entry->id;
 
@@ -1298,6 +1302,8 @@ int ipa_get_rt_tbl(struct ipa_ioc_get_rt_tbl *lookup)
 
 		result = 0;
 	}
+
+ret:
 	mutex_unlock(&ipa_ctx->lock);
 
 	return result;
