MotorolaMobilityLLC__kernel-msm
commit 82891e6064f042730b4c2f581b5d4f5e0e78c912
Author:     Will Deacon <will.deacon@arm.com>
AuthorDate: Wed Feb 7 16:25:53 2018 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Mar 28 03:21:08 2018 -0500

    FROMLIST: arm64: mm: Add arm64_kernel_unmapped_at_el0 helper
    
    In order for code such as TLB invalidation to operate efficiently when
    the decision to map the kernel at EL0 is determined at runtime, this
    patch introduces a helper function, arm64_kernel_unmapped_at_el0, to
    determine whether or not the kernel is mapped whilst running in userspace.
    
    Currently, this just reports the value of CONFIG_UNMAP_KERNEL_AT_EL0,
    but will later be hooked up to a fake CPU capability using a static key.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-5754
    Bug: 69856074
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Tested-by: Shanker Donthineni <shankerd@codeaurora.org>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    (cherry picked from git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux.git
     commit fc0e1299da548b32440051f58f08e0c1eb7edd0b)
    
    Change-Id: I0f48eadf55ee97f09553380a62d9fffe54d9dc83
    Signed-off-by: Greg Hackmann <ghackmann@google.com>
    Reviewed-on: https://gerrit.mot.com/1132553
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/arch/arm64/include/asm/mmu.h b/arch/arm64/include/asm/mmu.h
index a11e52cc7b94..2c0d018d1506 100644
--- a/arch/arm64/include/asm/mmu.h
+++ b/arch/arm64/include/asm/mmu.h
@@ -18,6 +18,8 @@
 
 #define USER_ASID_FLAG	(UL(1) << 48)
 
+#ifndef __ASSEMBLY__
+
 typedef struct {
 	atomic64_t	id;
 	void		*vdso;
@@ -30,6 +32,11 @@ typedef struct {
  */
 #define ASID(mm)	((mm)->context.id.counter & 0xffff)
 
+static inline bool arm64_kernel_unmapped_at_el0(void)
+{
+	return IS_ENABLED(CONFIG_UNMAP_KERNEL_AT_EL0);
+}
+
 extern void paging_init(void);
 extern void __iomem *early_io_map(phys_addr_t phys, unsigned long virt);
 extern void init_mem_pgprot(void);
@@ -39,4 +46,5 @@ extern void create_pgd_mapping(struct mm_struct *mm, phys_addr_t phys,
 			       pgprot_t prot);
 
 extern void __iomem *early_io_map(phys_addr_t phys, unsigned long virt);
+#endif	/* !__ASSEMBLY__ */
 #endif
