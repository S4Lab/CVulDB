MotorolaMobilityLLC__kernel-msm
commit c01bc5720ee6a1d5e3a6d020d50c0c26e5720ec5
Author:     Willem de Bruijn <willemb@google.com>
AuthorDate: Fri Feb 9 19:21:27 2018 +0530
Commit:     lulu2 <lulu2@lenovo.com>
CommitDate: Wed Jul 11 22:14:31 2018 +0800

    packet: hold bind lock when rebinding to fanout hook
    
    commit 008ba2a13f2d04c947adc536d19debb8fe66f110 upstream.
    
    Packet socket bind operations must hold the po->bind_lock. This keeps
    po->running consistent with whether the socket is actually on a ptype
    list to receive packets.
    
    fanout_add unbinds a socket and its packet_rcv/tpacket_rcv call, then
    binds the fanout object to receive through packet_rcv_fanout.
    
    Make it hold the po->bind_lock when testing po->running and rebinding.
    Else, it can race with other rebind operations, such as that in
    packet_set_ring from packet_rcv to tpacket_rcv. Concurrent updates
    can result in a socket being added to a fanout group twice, causing
    use-after-free KASAN bug reports, among others.
    
    Reported independently by both trinity and syzkaller.
    Verified that the syzkaller reproducer passes after this patch.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-15649
    BUG: 69160446
    
    Change-Id: I21e31f958635ea1be743cf31c6c10dfeef3a9b8b
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Reported-by: nixioaming <nixiaoming@huawei.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: use atomic_read() not refcount_read()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1135381
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 1a4ed50b5742..533adcdc8008 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -1435,10 +1435,6 @@ static int fanout_add(struct sock *sk, u16 id, u16 type_flags)
 
 	mutex_lock(&fanout_mutex);
 
-	err = -EINVAL;
-	if (!po->running)
-		goto out;
-
 	err = -EALREADY;
 	if (po->fanout)
 		goto out;
