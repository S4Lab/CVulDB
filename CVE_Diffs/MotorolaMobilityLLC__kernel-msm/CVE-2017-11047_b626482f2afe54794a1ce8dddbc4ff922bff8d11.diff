MotorolaMobilityLLC__kernel-msm
commit b626482f2afe54794a1ce8dddbc4ff922bff8d11
Author:     Sravan Kumar D.V.N <sravank1@codeaurora.org>
AuthorDate: Fri Jun 23 20:15:13 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Fri Dec 22 00:17:39 2017 -0600

    msm: mdss: Avoid direct dereference user input in pp cache config
    
    Eliminate direct dereferencing of user input pointer in pp cache
    config functions.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-11047
    Change-Id: Ia07a0ecc3b4839635cbd9c2f635c1f713783683c
    CRs-Fixed: 2057285
    Signed-off-by: Sravan Kumar D.V.N <sravank1@codeaurora.org>
    Signed-off-by: Ashwin Pathmudi <jfxr63@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1093938
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Shi-Yong Li <a22381@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit 99ac251664aac7323669b09323a505b380cf7e27)
    (cherry picked from commit dc73d97dcd4befe17b70bc76045c46b25570d786)

diff --git a/drivers/video/msm/mdss/mdss_mdp_pp_cache_config.c b/drivers/video/msm/mdss/mdss_mdp_pp_cache_config.c
index ab178ae45cf8..4252c9cdd6f5 100644
--- a/drivers/video/msm/mdss/mdss_mdp_pp_cache_config.c
+++ b/drivers/video/msm/mdss/mdss_mdp_pp_cache_config.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014-2016, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2014-2017, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -185,8 +185,12 @@ static int pp_hist_lut_cache_params_pipe_v1_7(struct mdp_hist_lut_data *config,
 		return -EINVAL;
 	}
 
-	memcpy(&hist_lut_usr_config, config->cfg_payload,
-		sizeof(struct mdp_hist_lut_data_v1_7));
+	if (copy_from_user(&hist_lut_usr_config,
+				(void __user *) config->cfg_payload,
+				sizeof(hist_lut_usr_config))) {
+		pr_err("failed to copy hist lut config\n");
+		return -EFAULT;
+	}
 
 	hist_lut_cache_data = pipe->pp_res.hist_lut_cfg_payload;
 	if (!hist_lut_cache_data) {
@@ -597,8 +601,12 @@ static int pp_pcc_cache_params_pipe_v1_7(struct mdp_pcc_cfg_data *config,
 		return -EINVAL;
 	}
 
-	memcpy(&v17_usr_config, config->cfg_payload,
-			sizeof(v17_usr_config));
+	if (copy_from_user(&v17_usr_config,
+				(void __user *) config->cfg_payload,
+				sizeof(v17_usr_config))) {
+		pr_err("failed to copy pcc config\n");
+		return -EFAULT;
+	}
 
 	if (!(config->ops & MDP_PP_OPS_WRITE)) {
 		pr_debug("write ops not set value of flag is %d\n",
@@ -852,8 +860,12 @@ static int pp_igc_lut_cache_params_pipe_v1_7(struct mdp_igc_lut_data *config,
 		goto igc_config_exit;
 	}
 
-	memcpy(&v17_usr_config, config->cfg_payload,
-			sizeof(v17_usr_config));
+	if (copy_from_user(&v17_usr_config,
+				(void __user *) config->cfg_payload,
+				sizeof(v17_usr_config))) {
+		pr_err("failed to copy igc config\n");
+		return -EFAULT;
+	}
 
 	if (!(config->ops & MDP_PP_OPS_WRITE)) {
 		pr_debug("op for gamut %d\n", config->ops);
@@ -1248,8 +1260,12 @@ static int pp_pa_cache_params_pipe_v1_7(struct mdp_pa_v2_cfg_data *config,
 		return -EINVAL;
 	}
 
-	memcpy(&pa_usr_config, config->cfg_payload,
-			sizeof(struct mdp_pa_data_v1_7));
+	if (copy_from_user(&pa_usr_config,
+				(void __user *) config->cfg_payload,
+				sizeof(pa_usr_config))) {
+		pr_err("failed to copy pa usr config\n");
+		return -EFAULT;
+	}
 
 	pa_cache_data = pipe->pp_res.pa_cfg_payload;
 	if (!pa_cache_data) {
