MotorolaMobilityLLC__kernel-msm
commit d6192ab531ca89135a6761f5a273bc5855a6943a
Author:     Vasantha Balla <vballa@codeaurora.org>
AuthorDate: Tue Mar 28 16:04:06 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Mon Sep 4 23:17:47 2017 -0500

    msm-vidc: Allocate bus vote data during initialization
    
    Dynamic reallocation of vote_data memory can cause double free
    problem if multiple instances try to reallocate simultaneously.
    So allocate this memory statically.
    
    CRs-fixed: 1109755
    CVE-fixed: CVE-2017-8265
    Mot-CRs-fixed: (CR), (CR)
    
    Change-Id: Ib5ff08c600a4b69a38b519688bbc153de9f50090
    Signed-off-by: Vasantha Balla <vballa@codeaurora.org>
    Signed-off-by: Srikanth A R <arsrikan@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1011476
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit e05953a3e86ddca9a37505b73942c784c8fc8a24)

diff --git a/drivers/media/platform/msm/vidc/venus_hfi.c b/drivers/media/platform/msm/vidc/venus_hfi.c
index 551dc69548d2..f8119f13530c 100644
--- a/drivers/media/platform/msm/vidc/venus_hfi.c
+++ b/drivers/media/platform/msm/vidc/venus_hfi.c
@@ -928,16 +928,12 @@ static int venus_hfi_vote_active_buses(void *dev,
 		dprintk(VIDC_ERR, "Invalid voting data\n");
 		return -EINVAL;
 	}
-
-	/* (Re-)alloc memory to store the new votes (in case we internally
-	 * re-vote after power collapse, which is transparent to client) */
-	cached_vote_data = krealloc(device->bus_load.vote_data, num_data *
-			sizeof(*cached_vote_data), GFP_KERNEL);
-	if (!cached_vote_data) {
-		dprintk(VIDC_ERR, "Can't alloc memory to cache bus votes\n");
-		rc = -ENOMEM;
-		goto err_no_mem;
-	}
+        cached_vote_data = device->bus_load.vote_data;
+        if (!cached_vote_data) {
+                dprintk(VIDC_ERR,"Invalid bus load vote data\n");
+                rc = -ENOMEM;
+                goto err_no_mem;
+        }
 
 	/* Alloc & init the load table */
 	num_bus = device->res->bus_set.count;
@@ -3746,9 +3742,15 @@ static int venus_hfi_init_bus(struct venus_hfi_device *device)
 		dprintk(VIDC_DBG, "Registered bus client %s\n", name);
 	}
 
-	device->bus_load.vote_data = NULL;
-	device->bus_load.vote_data_count = 0;
+        device->bus_load.vote_data = (struct vidc_bus_vote_data *)
+                                        kzalloc(sizeof(struct vidc_bus_vote_data)*MAX_SUPPORTED_INSTANCES_COUNT, GFP_KERNEL);
 
+        if (device->bus_load.vote_data == NULL) {
+                dprintk(VIDC_ERR,"Failed to allocate memory for vote_data\n");
+                rc = -ENOMEM;
+                goto err_init_bus;
+        }
+        device->bus_load.vote_data_count = 0;
 	return rc;
 err_init_bus:
 	venus_hfi_deinit_bus(device);
