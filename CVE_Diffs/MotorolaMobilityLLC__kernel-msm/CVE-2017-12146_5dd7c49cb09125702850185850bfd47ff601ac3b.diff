MotorolaMobilityLLC__kernel-msm
commit 5dd7c49cb09125702850185850bfd47ff601ac3b
Author:     Adrian Salido <salidoa@google.com>
AuthorDate: Tue Apr 25 16:55:26 2017 -0700
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Sep 13 01:06:30 2017 -0500

    driver core: platform: fix race condition with driver_override
    
    The driver_override implementation is susceptible to race condition when
    different threads are reading vs storing a different driver override.
    Add locking to avoid race condition.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-12146
    Bug: 35676417
    
    Change-Id: I3a1213af102f7b406eee0938ee38ed3ab302436a
    Fixes: 3d713e0e382e ("driver core: platform: add device binding path 'driver_override'")
    Cc: stable@vger.kernel.org
    Signed-off-by: Adrian Salido <salidoa@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Amarendra Reddy <amarenr@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1041959
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/drivers/base/platform.c b/drivers/base/platform.c
index b387fb91885e..94987ff92567 100644
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@ -727,9 +727,10 @@ static ssize_t driver_override_store(struct device *dev,
 				     const char *buf, size_t count)
 {
 	struct platform_device *pdev = to_platform_device(dev);
-	char *driver_override, *old = pdev->driver_override, *cp;
+	char *driver_override, *old, *cp;
 
-	if (count > PATH_MAX)
+	/* We need to keep extra room for a newline */
+	if (count >= (PATH_MAX - 1))
 		return -EINVAL;
 
 	driver_override = kstrndup(buf, count, GFP_KERNEL);
@@ -740,12 +741,15 @@ static ssize_t driver_override_store(struct device *dev,
 	if (cp)
 		*cp = '\0';
 
+	device_lock(dev);
+	old = pdev->driver_override;
 	if (strlen(driver_override)) {
 		pdev->driver_override = driver_override;
 	} else {
 		kfree(driver_override);
 		pdev->driver_override = NULL;
 	}
+	device_unlock(dev);
 
 	kfree(old);
 
@@ -756,8 +760,12 @@ static ssize_t driver_override_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
 	struct platform_device *pdev = to_platform_device(dev);
+	ssize_t len;
 
-	return sprintf(buf, "%s\n", pdev->driver_override);
+	device_lock(dev);
+	len = snprintf(buf, PAGE_SIZE, "%s\n", pdev->driver_override);
+	device_unlock(dev);
+	return (len >= PAGE_SIZE) ? (PAGE_SIZE - 1) : len;
 }
 static DEVICE_ATTR_RW(driver_override);
 
