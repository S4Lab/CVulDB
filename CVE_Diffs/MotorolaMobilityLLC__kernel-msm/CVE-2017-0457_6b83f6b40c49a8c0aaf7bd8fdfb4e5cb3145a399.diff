MotorolaMobilityLLC__kernel-msm
commit 6b83f6b40c49a8c0aaf7bd8fdfb4e5cb3145a399
Author:     Wei Wang <wvw@google.com>
AuthorDate: Wed Feb 15 15:57:12 2017 +0530
Commit:     Neeraj Kumar <neerajk@motorola.com>
CommitDate: Fri Feb 17 01:03:16 2017 -0600

    msm: ADSPRPC: Buffer length to be copied is truncated
    
    The buffer length that is being used to allocate gets truncated
    due to it being assigned to wrong type causing a much smaller
    buffer to be allocated than what is required for copying.
    
    Bug: 31695439
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-0457
    CRs-Fixed: 1100695
    Change-Id: I30818acd42bd282837c7c7aa16d56d3b95d4dfe7
    Signed-off-by: Sathish Ambley <sathishambley@codeaurora.org>
    Signed-off-by: Biswajit Paul <biswajitpaul@codeaurora.org>
    Signed-off-by: Wei Wang <wvw@google.com>
    ---
    Reviewed-on: https://gerrit.mot.com/951170
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Vrushali Prakash Bhosale <wkvq37@motorola.com>
    Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/char/adsprpc.c b/drivers/char/adsprpc.c
index d26bdc7fae00..8188296d7535 100644
--- a/drivers/char/adsprpc.c
+++ b/drivers/char/adsprpc.c
@@ -834,9 +834,9 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx,
 	void *args;
 	remote_arg_t *pra = ctx->pra;
 	remote_arg_t *rpra = ctx->rpra;
-	ssize_t rlen, used, size;
+	ssize_t rlen, used, size, copylen = 0;
 	uint32_t sc = ctx->sc, start;
-	int i, inh, bufs = 0, err = 0, oix, copylen = 0;
+	int i, inh, bufs = 0, err = 0, oix;
 	int inbufs = REMOTE_SCALARS_INBUFS(sc);
 	int outbufs = REMOTE_SCALARS_OUTBUFS(sc);
 	int cid = ctx->fdata->cid;
@@ -885,13 +885,23 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx,
 	/* calculate len requreed for copying */
 	for (oix = 0; oix < inbufs + outbufs; ++oix) {
 		int i = ctx->overps[oix]->raix;
+		uintptr_t mstart, mend;
+
 		if (!pra[i].buf.len)
 			continue;
 		if (list[i].num)
 			continue;
 		if (ctx->overps[oix]->offset == 0)
 			copylen = ALIGN(copylen, BALIGN);
-		copylen += ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
+		mstart = ctx->overps[oix]->mstart;
+		mend = ctx->overps[oix]->mend;
+		VERIFY(err, (mend - mstart) <= LONG_MAX);
+		if (err)
+			goto bail;
+		copylen += mend - mstart;
+		VERIFY(err, copylen >= 0);
+		if (err)
+			goto bail;
 	}
 
 	/* alocate new buffer */
@@ -917,7 +927,7 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx,
 	/* copy non ion buffers */
 	for (oix = 0; oix < inbufs + outbufs; ++oix) {
 		int i = ctx->overps[oix]->raix;
-		int mlen = ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
+		ssize_t mlen = ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
 		if (!pra[i].buf.len)
 			continue;
 		if (list[i].num)
