MotorolaMobilityLLC__kernel-msm
commit 1bf4441831ce22a1675429c8aefe7fe4fc492731
Author:     Alexander Filonenko <alexf@motorola.com>
AuthorDate: Mon Aug 8 15:14:50 2016 -0500
Commit:     a7301c <a7301c@motorola.com>
CommitDate: Sun Apr 15 23:23:34 2018 -0500

    input: synaptics: fix stack overflow
    
    Implement a fix for stack overflow CVE-2016-3865/A-28799389.
    
    Change-Id: I213a65bcd77dbc319919417a760efcf0005d3dbb
    Signed-off-by: Alexander Filonenko <alexf@motorola.com>
    Reviewed-on: http://gerrit.mot.com/891757
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>
    Signed-off-by: amarenr <amarenr@motorola.com>
    Reviewed-on: https://gerrit.mot.com/927875
    Reviewed-by: Konstantin Makariev <kmakariev@motorola.com>

diff --git a/drivers/input/touchscreen/synaptics_dsx_rmi_dev.c b/drivers/input/touchscreen/synaptics_dsx_rmi_dev.c
index d230f63a4b76..1868d12edf07 100644
--- a/drivers/input/touchscreen/synaptics_dsx_rmi_dev.c
+++ b/drivers/input/touchscreen/synaptics_dsx_rmi_dev.c
@@ -33,6 +33,8 @@
 #define DEVICE_CLASS_NAME "rmidev"
 #define DEV_NUMBER 1
 #define REG_ADDR_LIMIT 0xFFFF
+#define MAX_READ_WRITE_SIZE 8096
+#define MIN_READ_WRITE_BUF_SIZE 256
 
 static ssize_t rmidev_sysfs_data_show(struct file *data_file,
 		struct kobject *kobj, struct bin_attribute *attributes,
@@ -74,7 +76,8 @@ struct rmidev_data {
 	struct class *device_class;
 	struct mutex file_mutex;
 	struct rmidev_handle *rmi_dev;
-	struct temp_buffer data_buf;
+	unsigned char *tmpbuf;
+	size_t tmpbuf_size;
 };
 
 static struct bin_attribute attr_data = {
@@ -315,6 +318,32 @@ clean_up:
 	return newpos;
 }
 
+static int alloc_tmpbuf(struct file *filp, size_t count)
+{
+	struct rmidev_data *dev_data = filp->private_data;
+
+	if (dev_data->tmpbuf_size != 0)	{
+		kfree(dev_data->tmpbuf);
+		dev_data->tmpbuf = NULL;
+		dev_data->tmpbuf_size = 0;
+	}
+
+	if (count > MAX_READ_WRITE_SIZE) {
+		pr_err("%s: Max buffer size exceeded\n", __func__);
+		return 1;
+	}
+
+	if (count < MIN_READ_WRITE_BUF_SIZE)
+		count = MIN_READ_WRITE_BUF_SIZE;
+
+	dev_data->tmpbuf = kzalloc(count, GFP_KERNEL);
+	if (!dev_data->tmpbuf)
+		return 1;
+
+	dev_data->tmpbuf_size = count;
+	return 0;
+}
+
 /*
  * rmidev_read: - use to read data from rmi device
  *
@@ -328,7 +357,6 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 {
 	ssize_t retval;
 	struct rmidev_data *dev_data = filp->private_data;
-	struct temp_buffer *tb;
 
 	if (IS_ERR(dev_data)) {
 		pr_err("%s: Pointer of char device data is invalid", __func__);
@@ -341,22 +369,19 @@ static ssize_t rmidev_read(struct file *filp, char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
-	tb = &dev_data->data_buf;
 	mutex_lock(&(dev_data->file_mutex));
 
-	if (tb->buf_size < count && alloc_buffer(tb, count) != 0) {
-		retval = -ENOMEM;
-		goto clean_up;
-	}
+	if (dev_data->tmpbuf_size < count && alloc_tmpbuf(filp, count) != 0)
+		return -ENOMEM;
 
 	retval = rmidev->fn_ptr->read(rmidev->rmi4_data,
 			*f_pos,
-			tb->buf,
+			dev_data->tmpbuf,
 			count);
 	if (retval < 0)
 		goto clean_up;
 
-	if (copy_to_user(buf, tb->buf, count))
+	if (copy_to_user(buf, dev_data->tmpbuf, count))
 		retval = -EFAULT;
 	else
 		*f_pos += retval;
@@ -379,7 +404,6 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 {
 	ssize_t retval;
 	struct rmidev_data *dev_data = filp->private_data;
-	struct temp_buffer *tb;
 
 	if (IS_ERR(dev_data)) {
 		pr_err("%s: Pointer of char device data is invalid", __func__);
@@ -392,22 +416,21 @@ static ssize_t rmidev_write(struct file *filp, const char __user *buf,
 	if (count > (REG_ADDR_LIMIT - *f_pos))
 		count = REG_ADDR_LIMIT - *f_pos;
 
-	tb = &dev_data->data_buf;
 	mutex_lock(&(dev_data->file_mutex));
 
-	if (tb->buf_size < count && alloc_buffer(tb, count) != 0) {
+	if (dev_data->tmpbuf_size < count && alloc_tmpbuf(filp, count) != 0) {
 		retval = -ENOMEM;
 		goto clean_up;
 	}
 
-	if (copy_from_user(tb->buf, buf, count)) {
+	if (copy_from_user(dev_data->tmpbuf, buf, count)) {
 		retval = -EFAULT;
 		goto clean_up;
 	}
 
 	retval = rmidev->fn_ptr->write(rmidev->rmi4_data,
 			*f_pos,
-			tb->buf,
+			dev_data->tmpbuf,
 			count);
 	if (retval >= 0)
 		*f_pos += retval;
