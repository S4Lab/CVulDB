MotorolaMobilityLLC__kernel-msm
commit 60eb4a167a045f376fb94316460af91e4a4ee73a
Author:     Wei Wang <wvw@google.com>
AuthorDate: Wed Feb 15 15:14:04 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Tue May 2 05:49:40 2017 -0500

    msm: ADSPRPC: Buffer length to be copied is truncated
    
    The buffer length that is being used to allocate gets truncated
    due to it being assigned to wrong type causing a much smaller
    buffer to be allocated than what is required for copying.
    
    Bug: 31695439
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-0457
    CRs-Fixed: 1100695
    Change-Id: I30818acd42bd282837c7c7aa16d56d3b95d4dfe7
    Signed-off-by: Sathish Ambley <sathishambley@codeaurora.org>
    Signed-off-by: Biswajit Paul <biswajitpaul@codeaurora.org>
    Signed-off-by: Wei Wang <wvw@google.com>
    ---
    
    Change-Id: Ia65a1fecb0380a89ea4ef4443375d3d4119e26d6
    Signed-off-by: Neeraj Kumar <neerajk@motorola.com>
    Reviewed-on: https://gerrit.mot.com/951152
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Vrushali Prakash Bhosale <wkvq37@motorola.com>
    Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/char/adsprpc.c b/drivers/char/adsprpc.c
index b2ce58e10834..71b7d65d807e 100644
--- a/drivers/char/adsprpc.c
+++ b/drivers/char/adsprpc.c
@@ -732,6 +732,8 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx)
 	/* calculate len requreed for copying */
 	for (oix = 0; oix < inbufs + outbufs; ++oix) {
 		int i = ctx->overps[oix]->raix;
+		uintptr_t mstart, mend;
+
 		ssize_t len = lpra[i].buf.len;
 		if (!len)
 			continue;
@@ -739,7 +741,15 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx)
 			continue;
 		if (ctx->overps[oix]->offset == 0)
 			copylen = ALIGN(copylen, BALIGN);
-		copylen += ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
+		mstart = ctx->overps[oix]->mstart;
+		mend = ctx->overps[oix]->mend;
+		VERIFY(err, (mend - mstart) <= LONG_MAX);
+		if (err)
+			goto bail;
+		copylen += mend - mstart;
+		VERIFY(err, copylen >= 0);
+		if (err)
+			goto bail;
 	}
 	ctx->used = copylen;
 
@@ -798,7 +808,7 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx)
 	for (oix = 0; oix < inbufs + outbufs; ++oix) {
 		int i = ctx->overps[oix]->raix;
 		struct fastrpc_mmap *map = ctx->maps[i];
-		int mlen = ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
+		ssize_t mlen = ctx->overps[oix]->mend - ctx->overps[oix]->mstart;
 		uint64_t buf;
 		ssize_t len = lpra[i].buf.len;
 		if (!len)
