MotorolaMobilityLLC__kernel-msm
commit e6f6f849074a7741a98922a3fcfa7468a2c97524
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Tue Jul 3 17:10:19 2018 -0700
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Wed Feb 6 07:38:21 2019 -0600

    Fix up non-directory creation in SGID directories
    
    sgid directories have special semantics, making newly created files in
    the directory belong to the group of the directory, and newly created
    subdirectories will also become sgid.  This is historically used for
    group-shared directories.
    
    But group directories writable by non-group members should not imply
    that such non-group members can magically join the group, so make sure
    to clear the sgid bit on non-directories for non-members (but remember
    that sgid without group execute means "mandatory locking", just to
    confuse things even more).
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2018-13405
    BUG: 113452403
    
    Change-Id: I7aa1cc5e8a5c8a43940ce55862a259f9b82f8041
    Reported-by: Jann Horn <jannh@google.com>
    Cc: Perry Lutomirski <luto@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reviewed-on: https://gerrit.mot.com/1287117
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/fs/inode.c b/fs/inode.c
index b3199cc5434c..1ac735fb09cd 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -1853,8 +1853,14 @@ void inode_init_owner(struct inode *inode, const struct inode *dir,
 	inode->i_uid = current_fsuid();
 	if (dir && dir->i_mode & S_ISGID) {
 		inode->i_gid = dir->i_gid;
+
+		/* Directories are special, and always inherit S_ISGID */
 		if (S_ISDIR(mode))
 			mode |= S_ISGID;
+		else if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP) &&
+			 !in_group_p(inode->i_gid) &&
+			 !capable_wrt_inode_uidgid(dir, CAP_FSETID))
+			mode &= ~S_ISGID;
 	} else
 		inode->i_gid = current_fsgid();
 	inode->i_mode = mode;
