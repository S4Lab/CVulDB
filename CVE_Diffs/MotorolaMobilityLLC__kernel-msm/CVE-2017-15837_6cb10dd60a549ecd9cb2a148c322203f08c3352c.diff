MotorolaMobilityLLC__kernel-msm
commit 6cb10dd60a549ecd9cb2a148c322203f08c3352c
Author:     Peng Xu <pxu@qti.qualcomm.com>
AuthorDate: Wed Mar 14 15:54:09 2018 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Thu Apr 12 22:53:38 2018 -0500

    nl80211: Define policy for packet pattern attributes
    
    Define a policy for packet pattern attributes in order to fix a
    potential read over the end of the buffer during nla_get_u32()
    of the NL80211_PKTPAT_OFFSET attribute.
    
    Note that the data there can always be read due to SKB allocation
    (with alignment and struct skb_shared_info at the end), but the
    data might be uninitialized. This could be used to leak some data
    from uninitialized vmalloc() memory, but most drivers don't allow
    an offset (so you'd just get -EINVAL if the data is non-zero) or
    just allow it with a fixed value - 100 or 128 bytes, so anything
    above that would get -EINVAL. With brcmfmac the limit is 1500 so
    (at least) one byte could be obtained.
    
    Signed-off-by: Peng Xu <pxu@qti.qualcomm.com>
    Signed-off-by: Jouni Malinen <jouni@qca.qualcomm.com>
    [rewrite description based on SKB allocation knowledge]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    
    Conflicts:
            net/wireless/nl80211.c
    
    Git-commit: ad670233c9e1d5feb365d870e30083ef1b889177
    Git-repo: git://git.kernel.org/pub/scm/linux/kernel/git/jberg/mac80211-next.git
    CRs-fixed: 2116387
    [Backport: Fix conflicts]
    Signed-off-by: Vidyullatha Kanchanapally <vidyullatha@codeaurora.org>
    Signed-off-by: Peng Xu <pxu@codeaurora.org>
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-15837
    
    Change-Id: I91c7c1e4b25eb74a7ae00c749b306be3b4fbf1b4
    Signed-off-by: Prashanth S <sprash@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1148356
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Vineet Angadi <vineetv@motorola.com>
    Reviewed-by: Prashanth Chakravarthy <a19110@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 85b3192ce5e1..07d779f77196 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -473,6 +473,14 @@ nl80211_match_policy[NL80211_SCHED_SCAN_MATCH_ATTR_MAX + 1] = {
 	[NL80211_SCHED_SCAN_MATCH_ATTR_RSSI] = { .type = NLA_U32 },
 };
 
+/* policy for packet pattern attributes */
+static const struct nla_policy
+nl80211_packet_pattern_policy[MAX_NL80211_PKTPAT + 1] = {
+	[NL80211_PKTPAT_MASK] = { .type = NLA_BINARY, },
+	[NL80211_PKTPAT_PATTERN] = { .type = NLA_BINARY, },
+	[NL80211_PKTPAT_OFFSET] = { .type = NLA_U32 },
+};
+
 static int nl80211_prepare_wdev_dump(struct sk_buff *skb,
 				     struct netlink_callback *cb,
 				     struct cfg80211_registered_device **rdev,
@@ -8768,7 +8776,7 @@ static int nl80211_set_wowlan(struct sk_buff *skb, struct genl_info *info)
 			u8 *mask_pat;
 
 			nla_parse(pat_tb, MAX_NL80211_PKTPAT, nla_data(pat),
-				  nla_len(pat), NULL);
+				  nla_len(pat), nl80211_packet_pattern_policy);
 			err = -EINVAL;
 			if (!pat_tb[NL80211_PKTPAT_MASK] ||
 			    !pat_tb[NL80211_PKTPAT_PATTERN])
@@ -8996,7 +9004,7 @@ static int nl80211_parse_coalesce_rule(struct cfg80211_registered_device *rdev,
 		u8 *mask_pat;
 
 		nla_parse(pat_tb, MAX_NL80211_PKTPAT, nla_data(pat),
-			  nla_len(pat), NULL);
+			  nla_len(pat), nl80211_packet_pattern_policy);
 		if (!pat_tb[NL80211_PKTPAT_MASK] ||
 		    !pat_tb[NL80211_PKTPAT_PATTERN])
 			return -EINVAL;
