MotorolaMobilityLLC__kernel-msm
commit 3d10b2a25023e857fe8128b168f2a8ef1aeb8efc
Author:     Takashi Iwai <tiwai@suse.de>
AuthorDate: Mon Nov 20 11:38:25 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Thu Dec 14 23:30:44 2017 -0600

    ALSA: timer: Fix race between read and ioctl
    
    The read from ALSA timer device, the function snd_timer_user_tread(),
    may access to an uninitialized struct snd_timer_user fields when the
    read is concurrently performed while the ioctl like
    snd_timer_user_tselect() is invoked.  We have already fixed the races
    among ioctls via a mutex, but we seem to have forgotten the race
    between read vs ioctl.
    
    This patch simply applies (more exactly extends the already applied
    range of) tu->ioctl_lock in snd_timer_user_tread() for closing the
    race window.
    
    CVE-fixed: CVE-2017-1000380
    Mot-CRs-fixed: (CR)
    Bug-Id: A-64217740
    
    Reported-by: Alexander Potapenko <glider@google.com>
    Tested-by: Alexander Potapenko <glider@google.com>
    Cc: <stable@vger.kernel.org>
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    ---
    
    Change-Id: I7a1c7cc49a05d21e8147e89ef0817c570a95dcf3
    Reviewed-on: https://gerrit.mot.com/1091938
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Vrushali Prakash Bhosale <wkvq37@motorola.com>
    Reviewed-by: Guobin Zhang <zhanggb@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key
    (cherry picked from commit ad8aa9de506301682b9b2c3cb633a04ad155a0c6)

diff --git a/sound/core/timer.c b/sound/core/timer.c
index 51c98cf6a2e6..10af191fa1d5 100644
--- a/sound/core/timer.c
+++ b/sound/core/timer.c
@@ -1920,6 +1920,7 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 
 	tu = file->private_data;
 	unit = tu->tread ? sizeof(struct snd_timer_tread) : sizeof(struct snd_timer_read);
+	mutex_lock(&tu->ioctl_lock);
 	spin_lock_irq(&tu->qlock);
 	while ((long)count - result >= unit) {
 		while (!tu->qused) {
@@ -1935,7 +1936,9 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 			add_wait_queue(&tu->qchange_sleep, &wait);
 
 			spin_unlock_irq(&tu->qlock);
+			mutex_unlock(&tu->ioctl_lock);
 			schedule();
+			mutex_lock(&tu->ioctl_lock);
 			spin_lock_irq(&tu->qlock);
 
 			remove_wait_queue(&tu->qchange_sleep, &wait);
@@ -1972,6 +1975,7 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 		buffer += unit;
 	}
  _error:
+	mutex_unlock(&tu->ioctl_lock);
 	spin_unlock_irq(&tu->qlock);
 	return result > 0 ? result : err;
 }
