MotorolaMobilityLLC__kernel-msm
commit 48024ae1bb0aa9c320af5dbf58cb715e10ebb07d
Author:     Kumar Behera <mohanb@codeaurora.org>
AuthorDate: Fri Dec 9 09:55:00 2016 -0800
Commit:     Srikanth A R <arsrikan@motorola.com>
CommitDate: Wed Feb 15 01:50:10 2017 -0600

    msm: cpp: Fix for integer overflow in cpp
    
    Due to integer overflow ,the bound check in config frame function
    may pass and this may allow user to access invalid buffer. This
    fix takes care of proper bound and don't allow integer overflow.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-0521
    CRs-Fixed: 1097709
    
    Change-Id: I9f308f99d7476320cf506fccc755a6e84d1c5cce
    Signed-off-by: Kumar Behera <mohanb@codeaurora.org>
    Signed-off-by: Srikanth A R <arsrikan@motorola.com>
    Reviewed-on: https://gerrit.mot.com/950741
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
index efd8cc040aaa..544013435e3e 100644
--- a/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
+++ b/drivers/media/platform/msm/camera_v2/pproc/cpp/msm_cpp.c
@@ -1882,7 +1882,7 @@ static int msm_cpp_cfg_frame(struct cpp_device *cpp_dev,
 	struct msm_buf_mngr_info buff_mgr_info, dup_buff_mgr_info;
 	int32_t in_fd;
 	int32_t i = 0, num_output_bufs = 1;
-	int32_t stripe_base = 0;
+	uint32_t stripe_base = 0;
 	uint32_t rd_pntr, wr_0_pntr, wr_1_pntr, wr_2_pntr, wr_3_pntr;
 	uint32_t wr_0_meta_data_wr_pntr, wr_1_meta_data_wr_pntr,
 		wr_2_meta_data_wr_pntr, wr_3_meta_data_wr_pntr;
@@ -1924,6 +1924,13 @@ static int msm_cpp_cfg_frame(struct cpp_device *cpp_dev,
 		return -EINVAL;
 	}
 
+	if (stripe_base == UINT_MAX || new_frame->num_strips >
+		(UINT_MAX - 1 - stripe_base) / stripe_size) {
+		pr_err("Invalid frame message,num_strips %d is large\n",
+			new_frame->num_strips);
+		return -EINVAL;
+	}
+
 	if ((stripe_base + new_frame->num_strips * stripe_size + 1) !=
 		new_frame->msg_len) {
 		pr_err("Invalid frame message,len=%d,expected=%d\n",
