MotorolaMobilityLLC__kernel-msm
commit 2f600e618b65b70661b13b8348c0c974e8c68b4a
Author:     Daniel Rosenberg <drosen@google.com>
AuthorDate: Mon Jan 22 15:54:37 2018 +0530
Commit:     lulu2 <lulu2@lenovo.com>
CommitDate: Wed May 16 12:59:52 2018 +0800

    sound: rawmidi: Hold lock around realloc
    
    The SNDRV_RAWMIDI_STREAM_{OUTPUT,INPUT} ioctls may reallocate
    runtime->buffer while other kernel threads are accessing it.  If the
    underlying krealloc() call frees the original buffer, then this can turn
    into a use-after-free.
    
    Most of these accesses happen while the thread is holding runtime->lock,
    and can be fixed by just holding the same lock while replacing
    runtime->buffer, however we can't hold this spinlock while
    snd_rawmidi_kernel_{read1,write1} are copying to/from userspace.  We
    need to add and acquire a new mutex to prevent this from happening
    concurrently with reallocation.  We hold this mutex during the entire
    reallocation process, to also prevent multiple concurrent reallocations
    leading to a double-free.
    
    CVE-fixed: CVE-2017-13245
    Mot-CRs-fixed: (CR)
    Bug-Id: A-64315347
    Signed-off-by: Daniel Rosenberg <drosen@google.com>
    bug: 64315347
    Change-Id: I05764d4f1a38f373eb7c0ac1c98607ee5ff0eded
    ---
    
    Change-Id: I484f1cbc8167e3b4c409cac424d13c50c6585066
    Signed-off-by: Neeraj Kumar <neerajk@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1121748
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Vrushali Prakash Bhosale <wkvq37@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/sound/core/rawmidi.c b/sound/core/rawmidi.c
index b0781266572a..fba2c5fbb534 100644
--- a/sound/core/rawmidi.c
+++ b/sound/core/rawmidi.c
@@ -559,7 +559,7 @@ static int snd_rawmidi_info(struct snd_rawmidi_substream *substream,
 			    struct snd_rawmidi_info *info)
 {
 	struct snd_rawmidi *rmidi;
-	
+
 	if (substream == NULL)
 		return -ENODEV;
 	rmidi = substream->rmidi;
@@ -977,6 +977,8 @@ static long snd_rawmidi_kernel_read1(struct snd_rawmidi_substream *substream,
 	struct snd_rawmidi_runtime *runtime = substream->runtime;
 	unsigned long appl_ptr;
 
+	if (userbuf)
+		mutex_lock(&runtime->realloc_mutex);
 	spin_lock_irqsave(&runtime->lock, flags);
 	if (userbuf)
 		mutex_lock(&runtime->realloc_mutex);
@@ -1007,6 +1009,8 @@ static long snd_rawmidi_kernel_read1(struct snd_rawmidi_substream *substream,
 		result += count1;
 		count -= count1;
 	}
+	if (userbuf)
+		mutex_unlock(&runtime->realloc_mutex);
 	spin_unlock_irqrestore(&runtime->lock, flags);
 	if (userbuf)
 		mutex_unlock(&runtime->realloc_mutex);
