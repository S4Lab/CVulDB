MotorolaMobilityLLC__kernel-msm
commit 4a89221926faf47135122d425d3d8753de788ea2
Author:     Takashi Iwai <tiwai@suse.de>
AuthorDate: Thu Nov 23 16:24:05 2017 +0530
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Thu Dec 28 03:00:46 2017 -0600

    ALSA: timer: Fix race between read and ioctl
    
    The read from ALSA timer device, the function snd_timer_user_tread(),
    may access to an uninitialized struct snd_timer_user fields when the
    read is concurrently performed while the ioctl like
    snd_timer_user_tselect() is invoked.  We have already fixed the races
    among ioctls via a mutex, but we seem to have forgotten the race
    between read vs ioctl.
    
    This patch simply applies (more exactly extends the already applied
    range of) tu->ioctl_lock in snd_timer_user_tread() for closing the
    race window.
    
    CVE-fixed: CVE-2017-1000380
    Mot-CRs-fixed: (CR)
    Bug-Id: A-64217740
    
    Reported-by: Alexander Potapenko <glider@google.com>
    Tested-by: Alexander Potapenko <glider@google.com>
    Cc: <stable@vger.kernel.org>
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    ---
    
    Change-Id: I7a1c7cc49a05d21e8147e89ef0817c570a95dcf3
    Signed-off-by: arsrikan <arsrikan@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1089182
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver
    Tested-by: Jira Key
    Reviewed-by: Vrushali Prakash Bhosale <wkvq37@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/sound/core/timer.c b/sound/core/timer.c
index 1a21148c21b2..90af93bcf65c 100644
--- a/sound/core/timer.c
+++ b/sound/core/timer.c
@@ -1868,6 +1868,7 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 
 	tu = file->private_data;
 	unit = tu->tread ? sizeof(struct snd_timer_tread) : sizeof(struct snd_timer_read);
+	mutex_lock(&tu->ioctl_lock);
 	spin_lock_irq(&tu->qlock);
 	while ((long)count - result >= unit) {
 		while (!tu->qused) {
@@ -1883,7 +1884,9 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 			add_wait_queue(&tu->qchange_sleep, &wait);
 
 			spin_unlock_irq(&tu->qlock);
+			mutex_unlock(&tu->ioctl_lock);
 			schedule();
+			mutex_lock(&tu->ioctl_lock);
 			spin_lock_irq(&tu->qlock);
 
 			remove_wait_queue(&tu->qchange_sleep, &wait);
@@ -1894,6 +1897,7 @@ static ssize_t snd_timer_user_read(struct file *file, char __user *buffer,
 			}
 		}
 
+		mutex_unlock(&tu->ioctl_lock);
 		spin_unlock_irq(&tu->qlock);
 		if (err < 0)
 			goto _error;
