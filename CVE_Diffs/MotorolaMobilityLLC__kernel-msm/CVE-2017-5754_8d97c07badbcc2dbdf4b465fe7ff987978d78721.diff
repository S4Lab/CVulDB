MotorolaMobilityLLC__kernel-msm
commit 8d97c07badbcc2dbdf4b465fe7ff987978d78721
Author:     Will Deacon <will.deacon@arm.com>
AuthorDate: Tue Nov 14 16:19:39 2017 +0000
Commit:     chenyt9 <chenyt9@lenovo.com>
CommitDate: Fri Dec 6 15:30:25 2019 +0800

    arm64: Kconfig: Reword UNMAP_KERNEL_AT_EL0 kconfig entry
    
    Although CONFIG_UNMAP_KERNEL_AT_EL0 does make KASLR more robust, it's
    actually more useful as a mitigation against speculation attacks that
    can leak arbitrary kernel data to userspace through speculation.
    
    Reword the Kconfig help message to reflect this, and make the option
    depend on EXPERT so that it is on by Defenderault for the majority of users.
    
    Mot-CRs-fixed: (CR)
    CVE-fixed: CVE-2017-5754
    Bug: 69856074
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>
    Change-Id: I3319ea9431823e2e83ba218187b74c97b2e2d173
    Reviewed-on: https://gerrit.mot.com/1132542
    SLTApproved: Slta Waiver
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 469e3e6fd955..27db4ba18c02 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -800,15 +800,14 @@ config FORCE_MAX_ZONEORDER
 	default "11"
 
 config UNMAP_KERNEL_AT_EL0
-	bool "Unmap kernel when running in userspace (aka \"KAISER\")"
+	bool "Unmap kernel when running in userspace (aka \"KAISER\")" if EXPERT
 	default y
 	help
-	  Some attacks against KASLR make use of the timing difference between
-	  a permission fault which could arise from a page table entry that is
-	  present in the TLB, and a translation fault which always requires a
-	  page table walk. This option defends against these attacks by unmapping
-	  the kernel whilst running in userspace, therefore forcing translation
-	  faults for all of kernel space.
+	  Speculation attacks against some high-performance processors can
+	  be used to bypass MMU permission checks and leak kernel data to
+	  userspace. This can be defended against by unmapping the kernel
+	  when running in userspace, mapping it back in on exception entry
+	  via a trampoline page in the vector table.
 
 	  If unsure, say Y.
 
