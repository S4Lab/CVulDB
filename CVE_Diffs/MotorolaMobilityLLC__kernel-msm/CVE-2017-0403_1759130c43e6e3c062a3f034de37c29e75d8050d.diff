MotorolaMobilityLLC__kernel-msm
commit 1759130c43e6e3c062a3f034de37c29e75d8050d
Author:     John Dias <joaodias@google.com>
AuthorDate: Wed Nov 9 11:03:57 2016 -0800
Commit:     a7301c <a7301c@motorola.com>
CommitDate: Wed Dec 14 19:29:41 2016 -0600

    perf: don't leave group_entry on sibling list (use-after-free)
    
    When perf_group_detach is called on a group leader,
    it should empty its sibling list. Otherwise, when
    a sibling is later deallocated, list_del_event()
    removes the sibling's group_entry from its current
    list, which can be the now-deallocated group leader's
    sibling list (use-after-free bug).
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-0403
    
    Bug: 32402548
    Change-Id: I99f6bc97c8518df1cb0035814368012ba72ab1f1
    Signed-off-by: John Dias <joaodias@google.com>
    Signed-off-by: sriharis <sriharis@motorola.com>
    Reviewed-on: https://gerrit.mot.com/928972
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 5d665905fa5f..f5d77dade8a4 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -1451,10 +1451,17 @@ static void perf_group_detach(struct perf_event *event)
 	 * If this was a group event with sibling events then
 	 * upgrade the siblings to singleton events by adding them
 	 * to whatever list we are on.
+	 * If this isn't on a list, make sure we still remove the sibling's
+	 * group_entry from this sibling_list; otherwise, when that sibling
+	 * is later deallocated, it will try to remove itself from this
+	 * sibling_list, which may well have been deallocated already,
+	 * resulting in a use-after-free.
 	 */
 	list_for_each_entry_safe(sibling, tmp, &event->sibling_list, group_entry) {
 		if (list)
 			list_move_tail(&sibling->group_entry, list);
+		else
+			list_del_init(&sibling->group_entry);
 		sibling->group_leader = sibling;
 
 		/* Inherit group flags from the previous leader */
