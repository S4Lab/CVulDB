MotorolaMobilityLLC__kernel-msm
commit e1c11e7b0f760567ceb3bc42e258d01646106212
Author:     Zhen Kong <zkong@codeaurora.org>
AuthorDate: Thu Jan 19 14:59:44 2017 -0800
Commit:     Varun Shrivastava <varunshrivastava@motorola.com>
CommitDate: Wed Mar 15 23:28:46 2017 -0500

    crypto: msm: check integer overflow on total data len in qcedev.c
    
    qcedev_vbuf_ablk_cipher will calculate total data length. It starts
    with the value of "areq->cipher_op_req.byteoffset", which is controlled
    by the user. Make change to check if this total data length has integer
    overflow issue in qcedev_check_cipher_params.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed: CVE-2017-0576
    
    Change-Id: Ice42dca6d47eb8febfe8a34e566c69e4799fab57
    Signed-off-by: Zhen Kong <zkong@codeaurora.org>
    Signed-off-by: Varun Shrivastava <varunshrivastava@motorola.com>
    Reviewed-on: https://gerrit.mot.com/960939
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>

diff --git a/drivers/crypto/msm/qcedev.c b/drivers/crypto/msm/qcedev.c
index f3d5b8acbabf..ae27f1cd3451 100644
--- a/drivers/crypto/msm/qcedev.c
+++ b/drivers/crypto/msm/qcedev.c
@@ -1456,6 +1456,15 @@ static int qcedev_check_cipher_params(struct qcedev_cipher_op_req *req,
 			pr_err("%s: Invalid byte offset\n", __func__);
 			goto error;
 		}
+		total = req->byteoffset;
+		for (i = 0; i < req->entries; i++) {
+			if (total > U32_MAX - req->vbuf.src[i].len) {
+				pr_err("%s:Integer overflow on total src len\n",
+					__func__);
+				goto error;
+			}
+			total += req->vbuf.src[i].len;
+		}
 	}
 
 	if (req->data_len < req->byteoffset) {
@@ -1491,7 +1500,7 @@ static int qcedev_check_cipher_params(struct qcedev_cipher_op_req *req,
 		}
 	}
 	/* Check for sum of all dst length is equal to data_len  */
-	for (i = 0; i < req->entries; i++) {
+	for (i = 0, total = 0; i < req->entries; i++) {
 		if (req->vbuf.dst[i].len >= U32_MAX - total) {
 			pr_err("%s: Integer overflow on total req dst vbuf length\n",
 				__func__);
