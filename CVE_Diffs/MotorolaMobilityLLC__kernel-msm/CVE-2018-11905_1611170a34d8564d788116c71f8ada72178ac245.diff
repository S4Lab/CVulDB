MotorolaMobilityLLC__kernel-msm
commit 1611170a34d8564d788116c71f8ada72178ac245
Author:     Tharun Kumar Merugu <mtharu@codeaurora.org>
AuthorDate: Sat Dec 8 09:37:38 2018 +0530
Commit:     Marcos Fukai Inoue <marcosi@motorola.com>
CommitDate: Tue Dec 11 09:56:58 2018 -0600

    msm: ADSPRPC: Use msm_ion_do_cache_op to flush userspace buffers
    
    Remove the use of dmac_flush_range for userspace buffers and add
    msm_ion_do_cache_op for flushing user space buffers.
    
    Mot-CRs-fixed: (CR)
    CVE-Fixed:  CVE-2018-11905
    CRs-Fixed: 2090797
    
    Change-Id: Ice73eafac840bd1cabee0a2bfc8a641832a7d0c8
    Acked-by: Bharath Kumar <bkumar@qti.qualcomm.com>
    Signed-off-by: Tharun Kumar Merugu <mtharu@codeaurora.org>
    Signed-off-by: Jignesh Patel <jignesh@motorola.com>
    Reviewed-on: https://gerrit.mot.com/1280535
    SME-Granted: SME Approvals Granted
    Submit-Approved: Jira Key
    Tested-by: Jira Key
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    SLTApproved: Marcos Fukai Inoue <marcosi@motorola.com>

diff --git a/drivers/char/adsprpc.c b/drivers/char/adsprpc.c
index fe1d4b4e7078..e0a3213d3c07 100644
--- a/drivers/char/adsprpc.c
+++ b/drivers/char/adsprpc.c
@@ -894,9 +894,20 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx)
 	}
 
 	for (i = 0; i < inbufs; ++i) {
-		if (rpra[i].buf.len)
-			dmac_flush_range(uint64_to_ptr(rpra[i].buf.pv),
-			      uint64_to_ptr(rpra[i].buf.pv + rpra[i].buf.len));
+		struct fastrpc_mmap *map = ctx->maps[i];
+
+		if (rpra[i].buf.len) {
+			if (map && map->handle)
+				msm_ion_do_cache_op(map->client,
+					map->handle,
+					uint64_to_ptr(rpra[i].buf.pv),
+					rpra[i].buf.len,
+					ION_IOC_CLEAN_INV_CACHES);
+			else
+				dmac_flush_range(uint64_to_ptr(rpra[i].buf.pv),
+					uint64_to_ptr(rpra[i].buf.pv
+						 + rpra[i].buf.len));
+		}
 	}
 	inh = inbufs + outbufs;
 	for (i = 0; i < REMOTE_SCALARS_INHANDLES(sc); i++) {
@@ -904,7 +915,7 @@ static int get_args(uint32_t kernel, struct smq_invoke_ctx *ctx)
 		rpra[inh + i].buf.len = ctx->lpra[inh + i].buf.len;
 		rpra[inh + i].h = ctx->lpra[inh + i].h;
 	}
-	dmac_flush_range((char *)rpra, (char *)rpra + ctx->used);
+
  bail:
 	return err;
 }
@@ -944,27 +955,49 @@ static int put_args(uint32_t kernel, struct smq_invoke_ctx *ctx,
 	return err;
 }
 
-static void inv_args_pre(uint32_t sc, remote_arg64_t *rpra)
+static void inv_args_pre(struct smq_invoke_ctx *ctx)
 {
 	int i, inbufs, outbufs;
+	uint32_t sc = ctx->sc;
+	remote_arg64_t *rpra = ctx->rpra;
 	uintptr_t end;
 
 	inbufs = REMOTE_SCALARS_INBUFS(sc);
 	outbufs = REMOTE_SCALARS_OUTBUFS(sc);
 	for (i = inbufs; i < inbufs + outbufs; ++i) {
+		struct fastrpc_mmap *map = ctx->maps[i];
+
 		if (!rpra[i].buf.len)
 			continue;
 		if (buf_page_start(ptr_to_uint64((void *)rpra)) ==
 				buf_page_start(rpra[i].buf.pv))
 			continue;
-		if (!IS_CACHE_ALIGNED((uintptr_t)uint64_to_ptr(rpra[i].buf.pv)))
-			dmac_flush_range(uint64_to_ptr(rpra[i].buf.pv),
-				(char *)(uint64_to_ptr(rpra[i].buf.pv + 1)));
+		if (!IS_CACHE_ALIGNED((uintptr_t)
+				uint64_to_ptr(rpra[i].buf.pv))) {
+			if (map && map->handle)
+				msm_ion_do_cache_op(map->client,
+					map->handle,
+					uint64_to_ptr(rpra[i].buf.pv),
+					sizeof(uintptr_t),
+					ION_IOC_CLEAN_INV_CACHES);
+			else
+				dmac_flush_range(
+					uint64_to_ptr(rpra[i].buf.pv), (char *)
+					uint64_to_ptr(rpra[i].buf.pv + 1));
+		}
 		end = (uintptr_t)uint64_to_ptr(rpra[i].buf.pv +
 							rpra[i].buf.len);
-		if (!IS_CACHE_ALIGNED(end))
-			dmac_flush_range((char *)end,
-				(char *)end + 1);
+		if (!IS_CACHE_ALIGNED(end)) {
+			if (map && map->handle)
+				msm_ion_do_cache_op(map->client,
+						map->handle,
+						uint64_to_ptr(end),
+						sizeof(uintptr_t),
+						ION_IOC_CLEAN_INV_CACHES);
+			else
+				dmac_flush_range((char *)end,
+					(char *)end + 1);
+		}
 	}
 }
 
@@ -973,7 +1006,6 @@ static void inv_args(struct smq_invoke_ctx* ctx)
 	int i, inbufs, outbufs;
 	uint32_t sc = ctx->sc;
 	remote_arg64_t *rpra = ctx->rpra;
-	int used = ctx->used;
 	int inv = 0;
 
 	inbufs = REMOTE_SCALARS_INBUFS(sc);
@@ -998,8 +1030,6 @@ static void inv_args(struct smq_invoke_ctx* ctx)
 						 + rpra[i].buf.len));
 	}
 
-	if (inv || REMOTE_SCALARS_OUTHANDLES(sc))
-		dmac_inv_range(rpra, (char *)rpra + used);
 }
 
 static int fastrpc_invoke_send(struct smq_invoke_ctx *ctx,
@@ -1141,7 +1171,7 @@ static int fastrpc_internal_invoke(struct fastrpc_file *fl, uint32_t mode,
 			goto bail;
 	}
 
-	inv_args_pre(ctx->sc, ctx->rpra);
+	inv_args_pre(ctx);
 	if (FASTRPC_MODE_SERIAL == mode)
 		inv_args(ctx);
 	VERIFY(err, 0 == fastrpc_invoke_send(ctx, kernel, invoke->handle));
