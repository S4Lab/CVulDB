greenplum-db__gpdb
commit 695c142afe657ed2b506462a6b7f286335175514
Author:     Bhuvnesh Chaudhary <bchaudhary@pivotal.io>
AuthorDate: Tue Apr 10 12:21:49 2018 -0700
Commit:     Bhuvnesh Chaudhary <bchaudhary@pivotal.io>
CommitDate: Tue Apr 10 15:31:22 2018 -0700

    Fix Analyze privilege issue when executed by superuser
    
    The patch 62aba76 from upstream fixed
    the CVE-2009-4136 (security vulnerability) with the intent to properly
    manage session-local state during execution of an index function by a
    database superuser, which in some cases allowed remote authenticated
    users to gain privileges via a table with crafted index functions.
    
    Looking into the details of the CVE-2009-4136 and related CVE-2007-6600,
    the patch should ideally have limited the scope while we calculate the
    stats on the index expressions, where we run functions to evaluate the
    expression and could potentially present a security threat.
    
    However, the patch changed the user to table owner before collecting the
    sample, due to which even if analyze was run by superuser the sample
    couldn't be collected as the table owner did not had sufficient
    privileges to access the table. With this commit, we switch back to the
    original user while collecting the sample as it does not deal with
    indexes, or function call which was the original intention of the patch.
    
    Upstream did not face the privilege issue, as it does block sampling
    instead of issuing a query.

diff --git a/src/backend/commands/analyze.c b/src/backend/commands/analyze.c
index 7444633301..f3d18ac65d 100644
--- a/src/backend/commands/analyze.c
+++ b/src/backend/commands/analyze.c
@@ -447,12 +447,27 @@ analyze_rel_internal(Oid relid, VacuumStmt *vacstmt,
 	 */
 	colLargeRowIndexes = (RowIndexes **) palloc(sizeof(RowIndexes *) * attr_cnt);
 
+	/*
+	 * switch back to the original user to collect sample rows, the security threat does
+	 * not exist here as we donot execute any functions which could potentially lead to the
+	 * CVE-2009-4136
+	 * The patch to prevent the security threat was introduced from upstream commit:
+	 *   https://github.com/postgres/postgres/commit/62aba76568e58698ad5eaa6153bc45186aacbde2
+	 * setting to the original user is required due to GPDB specific way of collecting samples
+	 * using query, but not required postgres since we do block sampling.
+	 */
+	SetUserIdAndSecContext(save_userid, save_sec_context);
+
 	/*
 	 * Acquire the sample rows
 	 */
 	numrows = acquire_sample_rows_by_query(onerel, attr_cnt, vacattrstats, &rows, targrows,
 										   &totalrows, &totaldeadrows, &totalpages, vacstmt->rootonly, colLargeRowIndexes);
 
+	/* change the privilige back to the table owner */
+	SetUserIdAndSecContext(onerel->rd_rel->relowner,
+						   save_sec_context | SECURITY_RESTRICTED_OPERATION);
+
 	/*
 	 * Compute the statistics.	Temporary results during the calculations for
 	 * each column are stored in a child context.  The calc routines are
diff --git a/src/test/regress/expected/vacuum_gp.out b/src/test/regress/expected/vacuum_gp.out
index a8e2c3207a..79fc1f7cbe 100644
--- a/src/test/regress/expected/vacuum_gp.out
+++ b/src/test/regress/expected/vacuum_gp.out
@@ -276,3 +276,18 @@ vacuum full ao_t1;
 drop table ao_t1;
 vacuum full gp_persistent_relation_node;
 WARNING:  skipping "gp_persistent_relation_node" --- cannot vacuum indexes, views, external tables, or special system tables
+-- superuser must be able to vacuum analyze the table
+DROP ROLE IF EXISTS r_priv_test;
+NOTICE:  role "r_priv_test" does not exist, skipping
+CREATE ROLE r_priv_test;
+NOTICE:  resource queue required -- using default resource queue "pg_default"
+CREATE SCHEMA s_priv_test;
+CREATE TABLE s_priv_test.t_priv_table(a INT);
+NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
+HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
+INSERT INTO s_priv_test.t_priv_table SELECT i FROM generate_series(1, 10)i;
+ALTER TABLE s_priv_test.t_priv_table OWNER TO r_priv_test;
+VACUUM ANALYZE s_priv_test.t_priv_table;
+DROP SCHEMA s_priv_test CASCADE;
+NOTICE:  drop cascades to table s_priv_test.t_priv_table
+DROP ROLE r_priv_test;
diff --git a/src/test/regress/sql/vacuum_gp.sql b/src/test/regress/sql/vacuum_gp.sql
index b28f44e0d0..0f36a63bf8 100644
--- a/src/test/regress/sql/vacuum_gp.sql
+++ b/src/test/regress/sql/vacuum_gp.sql
@@ -180,3 +180,14 @@ vacuum full ao_t1;
 drop table ao_t1;
 
 vacuum full gp_persistent_relation_node;
+
+-- superuser must be able to vacuum analyze the table
+DROP ROLE IF EXISTS r_priv_test;
+CREATE ROLE r_priv_test;
+CREATE SCHEMA s_priv_test;
+CREATE TABLE s_priv_test.t_priv_table(a INT);
+INSERT INTO s_priv_test.t_priv_table SELECT i FROM generate_series(1, 10)i;
+ALTER TABLE s_priv_test.t_priv_table OWNER TO r_priv_test;
+VACUUM ANALYZE s_priv_test.t_priv_table;
+DROP SCHEMA s_priv_test CASCADE;
+DROP ROLE r_priv_test;
