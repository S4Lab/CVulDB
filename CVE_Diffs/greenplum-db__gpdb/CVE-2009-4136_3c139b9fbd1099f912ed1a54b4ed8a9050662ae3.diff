greenplum-db__gpdb
commit 3c139b9fbd1099f912ed1a54b4ed8a9050662ae3
Author:     Bhuvnesh Chaudhary <bchaudhary@pivotal.io>
AuthorDate: Fri Apr 6 15:54:49 2018 -0700
Commit:     Bhuvnesh <bchaudhary@pivotal.io>
CommitDate: Tue Apr 10 11:51:27 2018 -0700

    Fix Analyze privilege issue when executed by superuser
    
    The patch 62aba76568e58698ad5eaa6153bc45186aacbde2 from upstream fixed
    the CVE-2009-4136 (security vulnerability) with the intent to properly
    manage session-local state during execution of an index function by a
    database superuser, which in some cases allowed remote authenticated
    users to gain privileges via a table with crafted index functions.
    
    Looking into the details of the CVE-2009-4136 and related CVE-2007-6600,
    the patch should ideally have limited the scope while we calculate the
    stats on the index expressions, where we run functions to evaluate the
    expression and could potentially present a security threat.
    
    However, the patch changed the user to table owner before collecting the
    sample, due to which even if analyze was run by superuser the sample
    couldn't be collected as the table owner did not had sufficient
    privileges to access the table. With this commit, we switch back to the
    original user while collecting the sample as it does not deal with
    indexes, or function call which was the original intention of the patch.
    
    Upstream did not face the privilege issue, as it does block sampling
    instead of issuing a query.
    
    Signed-off-by: Sambitesh Dash <sdash@pivotal.io>

diff --git a/src/backend/commands/analyze.c b/src/backend/commands/analyze.c
index 1f738bc4f0..a363da79a7 100644
--- a/src/backend/commands/analyze.c
+++ b/src/backend/commands/analyze.c
@@ -538,6 +538,17 @@ do_analyze_rel(Relation onerel, VacuumStmt *vacstmt,
 	 */
 	colLargeRowIndexes = (RowIndexes **) palloc(sizeof(RowIndexes *) * attr_cnt);
 
+	/*
+	 * switch back to the original user to collect sample rows, the security threat does
+	 * not exist here as we donot execute any functions which could potentially lead to the
+	 * CVE-2009-4136
+	 * The patch to prevent the security threat was introduced from upstream commit:
+	 *   https://github.com/postgres/postgres/commit/62aba76568e58698ad5eaa6153bc45186aacbde2
+	 * setting to the original user is required due to GPDB specific way of collecting samples
+	 * using query, but not required postgres since we do block sampling.
+	 */
+	SetUserIdAndSecContext(save_userid, save_sec_context);
+
 	/*
 	 * Acquire the sample rows
 	 */
@@ -553,6 +564,9 @@ do_analyze_rel(Relation onerel, VacuumStmt *vacstmt,
 											   (vacstmt->options & VACOPT_ROOTONLY) != 0,
 											   colLargeRowIndexes);
 
+	/* change the privilige back to the table owner */
+	SetUserIdAndSecContext(onerel->rd_rel->relowner,
+						   save_sec_context | SECURITY_RESTRICTED_OPERATION);
 	/*
 	 * Compute the statistics.	Temporary results during the calculations for
 	 * each column are stored in a child context.  The calc routines are
diff --git a/src/backend/commands/vacuum.c b/src/backend/commands/vacuum.c
index 8f74eda04a..d0196a28cf 100644
--- a/src/backend/commands/vacuum.c
+++ b/src/backend/commands/vacuum.c
@@ -1973,8 +1973,7 @@ vacuum_rel(Relation onerel, Oid relid, VacuumStmt *vacstmt, LOCKMODE lmode,
 	/*
 	 * Switch to the table owner's userid, so that any index functions are run
 	 * as that user.  Also lock down security-restricted operations and
-	 * arrange to make GUC variable changes local to this command. (This is
-	 * unnecessary, but harmless, for lazy VACUUM.)
+	 * arrange to make GUC variable changes local to this command.
 	 */
 	GetUserIdAndSecContext(&save_userid, &save_sec_context);
 	SetUserIdAndSecContext(onerel->rd_rel->relowner,
@@ -2043,6 +2042,19 @@ vacuum_rel(Relation onerel, Oid relid, VacuumStmt *vacstmt, LOCKMODE lmode,
 			VacuumStatsContext stats_context;
 
 			stats_context.updated_stats = NIL;
+			/*
+			 * Revert back to original userid before dispatching vacuum to QEs.
+			 * Dispatcher includes CurrentUserId in the serialized dispatch
+			 * command (see buildGpQueryString()).  QEs assume this userid
+			 * before starting to execute the dispatched command.  If the
+			 * original userid has superuser privileges and owner of the table
+			 * being vacuumed does not, and if the command is dispatched with
+			 * owner's userid, it may lead to spurious permission denied error
+			 * on QE even when a super user is running the vacuum.
+			 */
+			SetUserIdAndSecContext(
+								   save_userid,
+								   save_sec_context | SECURITY_RESTRICTED_OPERATION);
 			dispatchVacuum(vacstmt, &stats_context);
 		}
 	}
@@ -2055,8 +2067,10 @@ vacuum_rel(Relation onerel, Oid relid, VacuumStmt *vacstmt, LOCKMODE lmode,
 			VacuumStatsContext stats_context;
 
 			stats_context.updated_stats = NIL;
+			SetUserIdAndSecContext(
+								   save_userid,
+								   save_sec_context | SECURITY_RESTRICTED_OPERATION);
 			dispatchVacuum(vacstmt, &stats_context);
-
 			vac_update_relstats_from_list(stats_context.updated_stats);
 		}
 	}
diff --git a/src/test/regress/expected/vacuum_gp.out b/src/test/regress/expected/vacuum_gp.out
index 76e99e55d5..e017a14b58 100644
--- a/src/test/regress/expected/vacuum_gp.out
+++ b/src/test/regress/expected/vacuum_gp.out
@@ -274,3 +274,16 @@ insert into ao_t1 select i, i from generate_series(1, 10000) i;
 update ao_t1 set b = b + 1;
 vacuum full ao_t1;
 drop table ao_t1;
+-- superuser must be able to vacuum analyze the table
+CREATE ROLE r_priv_test;
+NOTICE:  resource queue required -- using default resource queue "pg_default"
+CREATE SCHEMA s_priv_test;
+CREATE TABLE s_priv_test.t_priv_table(a INT);
+NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
+HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
+INSERT INTO s_priv_test.t_priv_table SELECT i FROM generate_series(1, 10)i;
+ALTER TABLE s_priv_test.t_priv_table OWNER TO r_priv_test;
+VACUUM ANALYZE s_priv_test.t_priv_table;
+DROP SCHEMA s_priv_test CASCADE;
+NOTICE:  drop cascades to table s_priv_test.t_priv_table
+DROP ROLE r_priv_test;
diff --git a/src/test/regress/sql/vacuum_gp.sql b/src/test/regress/sql/vacuum_gp.sql
index 3768b6376b..fdd1b11211 100644
--- a/src/test/regress/sql/vacuum_gp.sql
+++ b/src/test/regress/sql/vacuum_gp.sql
@@ -178,3 +178,13 @@ insert into ao_t1 select i, i from generate_series(1, 10000) i;
 update ao_t1 set b = b + 1;
 vacuum full ao_t1;
 drop table ao_t1;
+
+-- superuser must be able to vacuum analyze the table
+CREATE ROLE r_priv_test;
+CREATE SCHEMA s_priv_test;
+CREATE TABLE s_priv_test.t_priv_table(a INT);
+INSERT INTO s_priv_test.t_priv_table SELECT i FROM generate_series(1, 10)i;
+ALTER TABLE s_priv_test.t_priv_table OWNER TO r_priv_test;
+VACUUM ANALYZE s_priv_test.t_priv_table;
+DROP SCHEMA s_priv_test CASCADE;
+DROP ROLE r_priv_test;
