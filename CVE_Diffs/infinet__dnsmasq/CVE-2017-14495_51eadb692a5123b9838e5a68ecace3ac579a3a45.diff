infinet__dnsmasq
commit 51eadb692a5123b9838e5a68ecace3ac579a3a45
Author:     Simon Kelley <simon@thekelleys.org.uk>
AuthorDate: Mon Sep 25 20:16:50 2017 +0100
Commit:     Simon Kelley <simon@thekelleys.org.uk>
CommitDate: Mon Sep 25 20:16:50 2017 +0100

    Security fix, CVE-2017-14495, OOM in DNS response creation.
    
    Fix out-of-memory Dos vulnerability. An attacker which can
    send malicious DNS queries to dnsmasq can trigger memory
    allocations in the add_pseudoheader function
    The allocated memory is never freed which leads to a DoS
    through memory exhaustion. dnsmasq is vulnerable only
    if one of the following option is specified:
    --add-mac, --add-cpe-id or --add-subnet.

diff --git a/CHANGELOG b/CHANGELOG
index 8fe00edf..95233297 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -70,6 +70,18 @@ version 2.78
 	Credit to Felix Wilhelm, Fermin J. Serna, Gabriel Campana
 	and Kevin Hamacher of the Google Security Team for
 	finding this.
+
+	Fix out-of-memory Dos vulnerability. An attacker which can
+	send malicious DNS queries to dnsmasq can trigger memory
+	allocations in the add_pseudoheader function
+	The allocated memory is never freed which leads to a DoS
+	through memory exhaustion. dnsmasq is vulnerable only
+	if one of the following option is specified:
+	--add-mac, --add-cpe-id or --add-subnet.
+	CVE-2017-14495 applies.
+	Credit to Felix Wilhelm, Fermin J. Serna, Gabriel Campana
+	and Kevin Hamacher of the Google Security Team for
+	finding this.
 	
 	
 version 2.77
diff --git a/src/edns0.c b/src/edns0.c
index 95b74ee0..89b26921 100644
--- a/src/edns0.c
+++ b/src/edns0.c
@@ -192,9 +192,15 @@ size_t add_pseudoheader(struct dns_header *header, size_t plen, unsigned char *l
 	  !(p = skip_section(p, 
 			     ntohs(header->ancount) + ntohs(header->nscount) + ntohs(header->arcount), 
 			     header, plen)))
+      {
+	free(buff);
 	return plen;
+      }
       if (p + 11 > limit)
-       return plen; /* Too big */
+      {
+        free(buff);
+        return plen; /* Too big */
+      }
       *p++ = 0; /* empty name */
       PUTSHORT(T_OPT, p);
       PUTSHORT(udp_sz, p); /* max packet length, 512 if not given in EDNS0 header */
