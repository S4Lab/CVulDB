lede-project__source
commit f3865bd4efa8c0fbf82899d0c3072a192f3beaea
Author:     Hauke Mehrtens <hauke@hauke-m.de>
AuthorDate: Wed Aug 15 18:53:23 2018 +0200
Commit:     Hauke Mehrtens <hauke@hauke-m.de>
CommitDate: Wed Aug 15 19:18:47 2018 +0200

    kernel: bump kernel 4.4 to version 4.4.148
    
    The following patch was integrated upstream:
     * target/linux/generic/patches-4.4/005-ext4-fix-check-to-prevent-initializing-reserved-inod.patch
    
    This fixes tries to work around the following security problems:
     * CVE-2018-3620 L1 Terminal Fault OS, SMM related aspects
     * CVE-2018-3646 L1 Terminal Fault Virtualization related aspects
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>

diff --git a/include/kernel-version.mk b/include/kernel-version.mk
index b1e39c951e..ee95997d86 100644
--- a/include/kernel-version.mk
+++ b/include/kernel-version.mk
@@ -3,10 +3,10 @@
 LINUX_RELEASE?=1
 
 LINUX_VERSION-3.18 = .43
-LINUX_VERSION-4.4 = .147
+LINUX_VERSION-4.4 = .148
 
 LINUX_KERNEL_HASH-3.18.43 = 1236e8123a6ce537d5029232560966feed054ae31776fe8481dd7d18cdd5492c
-LINUX_KERNEL_HASH-4.4.147 = c734e599bfd54e6f8cca95775300757c2d1645f17095c5bcd528e2d23a8dac1a
+LINUX_KERNEL_HASH-4.4.148 = 19b10f009bb497a7e36995cc58811494f1cb46ae6ed02cc6d08babc97fc4d983
 
 ifdef KERNEL_PATCHVER
   LINUX_VERSION:=$(KERNEL_PATCHVER)$(strip $(LINUX_VERSION-$(KERNEL_PATCHVER)))
diff --git a/target/linux/brcm47xx/patches-4.4/830-huawei_e970_support.patch b/target/linux/brcm47xx/patches-4.4/830-huawei_e970_support.patch
index 5b360133f2..f67c5dde1c 100644
--- a/target/linux/brcm47xx/patches-4.4/830-huawei_e970_support.patch
+++ b/target/linux/brcm47xx/patches-4.4/830-huawei_e970_support.patch
@@ -8,7 +8,7 @@
  #include <asm/bootinfo.h>
  #include <asm/idle.h>
  #include <asm/prom.h>
-@@ -268,6 +269,33 @@ static struct fixed_phy_status bcm47xx_f
+@@ -262,6 +263,33 @@ static struct fixed_phy_status bcm47xx_f
  	.duplex	= DUPLEX_FULL,
  };
  
@@ -42,7 +42,7 @@
  static int __init bcm47xx_register_bus_complete(void)
  {
  	switch (bcm47xx_bus_type) {
-@@ -287,6 +315,7 @@ static int __init bcm47xx_register_bus_c
+@@ -281,6 +309,7 @@ static int __init bcm47xx_register_bus_c
  	bcm47xx_workarounds();
  
  	fixed_phy_add(PHY_POLL, 0, &bcm47xx_fixed_phy_status, -1);
diff --git a/target/linux/generic/patches-4.4/005-ext4-fix-check-to-prevent-initializing-reserved-inod.patch b/target/linux/generic/patches-4.4/005-ext4-fix-check-to-prevent-initializing-reserved-inod.patch
deleted file mode 100644
index 4d11892ce9..0000000000
--- a/target/linux/generic/patches-4.4/005-ext4-fix-check-to-prevent-initializing-reserved-inod.patch
+++ /dev/null
@@ -1,68 +0,0 @@
-From 7cb53d379df849d843cfd658f351b79b41b09051 Mon Sep 17 00:00:00 2001
-Message-Id: <7cb53d379df849d843cfd658f351b79b41b09051.1533837011.git.mschiffer@universe-factory.net>
-From: Theodore Ts'o <tytso@mit.edu>
-Date: Sat, 28 Jul 2018 08:12:04 -0400
-Subject: [PATCH] ext4: fix check to prevent initializing reserved inodes
-
-Commit 5012284700775a4e6e3fbe7eac4c543c4874b559 upstream.
-
-Commit 8844618d8aa7: "ext4: only look at the bg_flags field if it is
-valid" will complain if block group zero does not have the
-EXT4_BG_INODE_ZEROED flag set.  Unfortunately, this is not correct,
-since a freshly created file system has this flag cleared.  It gets
-almost immediately after the file system is mounted read-write --- but
-the following somewhat unlikely sequence will end up triggering a
-false positive report of a corrupted file system:
-
-   mkfs.ext4 /dev/vdc
-   mount -o ro /dev/vdc /vdc
-   mount -o remount,rw /dev/vdc
-
-Instead, when initializing the inode table for block group zero, test
-to make sure that itable_unused count is not too large, since that is
-the case that will result in some or all of the reserved inodes
-getting cleared.
-
-This fixes the failures reported by Eric Whiteney when running
-generic/230 and generic/231 in the the nojournal test case.
-
-Fixes: 8844618d8aa7 ("ext4: only look at the bg_flags field if it is valid")
-Reported-by: Eric Whitney <enwlinux@gmail.com>
-Signed-off-by: Theodore Ts'o <tytso@mit.edu>
----
- fs/ext4/ialloc.c | 5 ++++-
- fs/ext4/super.c  | 8 +-------
- 2 files changed, 5 insertions(+), 8 deletions(-)
-
---- a/fs/ext4/ialloc.c
-+++ b/fs/ext4/ialloc.c
-@@ -1308,7 +1308,10 @@ int ext4_init_inode_table(struct super_b
- 			    ext4_itable_unused_count(sb, gdp)),
- 			    sbi->s_inodes_per_block);
- 
--	if ((used_blks < 0) || (used_blks > sbi->s_itb_per_group)) {
-+	if ((used_blks < 0) || (used_blks > sbi->s_itb_per_group) ||
-+	    ((group == 0) && ((EXT4_INODES_PER_GROUP(sb) -
-+			       ext4_itable_unused_count(sb, gdp)) <
-+			      EXT4_FIRST_INO(sb)))) {
- 		ext4_error(sb, "Something is wrong with group %u: "
- 			   "used itable blocks: %d; "
- 			   "itable unused count: %u",
---- a/fs/ext4/super.c
-+++ b/fs/ext4/super.c
-@@ -2875,14 +2875,8 @@ static ext4_group_t ext4_has_uninit_itab
- 		if (!gdp)
- 			continue;
- 
--		if (gdp->bg_flags & cpu_to_le16(EXT4_BG_INODE_ZEROED))
--			continue;
--		if (group != 0)
-+		if (!(gdp->bg_flags & cpu_to_le16(EXT4_BG_INODE_ZEROED)))
- 			break;
--		ext4_error(sb, "Inode table for bg 0 marked as "
--			   "needing zeroing");
--		if (sb->s_flags & MS_RDONLY)
--			return ngroups;
- 	}
- 
- 	return group;
diff --git a/target/linux/generic/patches-4.4/901-debloat_sock_diag.patch b/target/linux/generic/patches-4.4/901-debloat_sock_diag.patch
index b304e141b9..1dc89d52e2 100644
--- a/target/linux/generic/patches-4.4/901-debloat_sock_diag.patch
+++ b/target/linux/generic/patches-4.4/901-debloat_sock_diag.patch
@@ -39,7 +39,7 @@
  
 --- a/net/ipv4/Kconfig
 +++ b/net/ipv4/Kconfig
-@@ -415,6 +415,7 @@ config INET_LRO
+@@ -416,6 +416,7 @@ config INET_LRO
  
  config INET_DIAG
  	tristate "INET: socket monitoring interface"
