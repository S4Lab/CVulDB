xelerance__Openswan
commit 63df1d3f676411f5a77071213285140327003f3e
Author:     Michael Richardson <mcr@sandelman.ca>
AuthorDate: Fri Aug 14 10:52:12 2015 -0400
Commit:     Patrick Naubert <patrickn@xelerance.com>
CommitDate: Fri Sep 4 10:34:42 2015 -0400

    possible fix for CVE-2015-3240: if KE payload is 0, then exponentiation fails, tripping a passert for nss

diff --git a/programs/pluto/crypt_dh.c b/programs/pluto/crypt_dh.c
index 8e6ba0d6b..cfbb599cf 100644
--- a/programs/pluto/crypt_dh.c
+++ b/programs/pluto/crypt_dh.c
@@ -109,7 +109,7 @@ return mechanism;
  * (see quoted passage at start of ACCEPT_KE).
  */
 #ifdef HAVE_LIBNSS
-static void
+static bool
 calc_dh_shared(chunk_t *shared, const chunk_t g
               , chunk_t secret
               , const struct oakley_group_desc *group
@@ -161,7 +161,10 @@ calc_dh_shared(chunk_t *shared, const chunk_t g
                          , CKM_DH_PKCS_DERIVE, CKM_CONCATENATE_DATA_AND_BASE
                          , CKA_DERIVE, group->bytes
                          , osw_return_nss_password_file_info());
-    PR_ASSERT(dhshared!=NULL);
+    if(dhshared == NULL) {
+        openswan_log("PK11_PubDerive failed, maybe all zero g^x");
+        return FALSE;
+    }
 
     dhshared_len = PK11_GetKeyLength(dhshared);
     if( group->bytes > dhshared_len ) {
@@ -178,7 +181,7 @@ calc_dh_shared(chunk_t *shared, const chunk_t g
 	string_params.ulLen = zeros.len;
 
 	newdhshared = PK11_Derive(dhshared, CKM_CONCATENATE_DATA_AND_BASE, &params, CKM_CONCATENATE_DATA_AND_BASE, CKA_DERIVE, 0);
-	PR_ASSERT(newdhshared!=NULL);
+	PR_ASSERT(newdhshared!=NULL);  /* XXX here? */
 	PK11_FreeSymKey(dhshared);
 	dhshared = newdhshared;
 	freeanychunk(zeros);
@@ -219,9 +222,11 @@ calc_dh_shared(chunk_t *shared, const chunk_t g
 #endif
 
     DBG_cond_dump_chunk(DBG_CRYPT, "DH shared-secret pointer:\n", *shared);
+    return TRUE;
+
 }
 #else
-static void
+static bool
 calc_dh_shared(chunk_t *shared, const chunk_t g
 	       , const MP_INT *sec
 	       , const struct oakley_group_desc *group)
@@ -1087,10 +1092,16 @@ void calc_dh_iv(struct pluto_crypto_req *r)
 #ifndef HAVE_LIBNSS
     DBG(DBG_CRYPT,
     DBG_dump_chunk("long term secret: ", ltsecret));
-    calc_dh_shared(&shared, g, &sec, group);
+    if(!calc_dh_shared(&shared, g, &sec, group)) {
+        r->pcr_success = FALSE;
+        return;
+    }
     mpz_clear (&sec);
 #else
-    calc_dh_shared(&shared, g, ltsecret, group, pubk);
+    if(!calc_dh_shared(&shared, g, ltsecret, group, pubk)) {
+        r->pcr_success = FALSE;
+        return;
+    }
 #endif
 
     memset(&skeyid, 0, sizeof(skeyid));
@@ -1128,6 +1139,8 @@ void calc_dh_iv(struct pluto_crypto_req *r)
     freeanychunk(new_iv);
     freeanychunk(enc_key);
 
+    r->pcr_success = TRUE;
+
     return;
 }
 
@@ -1178,9 +1191,9 @@ void calc_dh(struct pluto_crypto_req *r)
     DBG(DBG_CRYPT, DBG_dump_chunk("peer's g: ", g));
 
 #ifdef HAVE_LIBNSS
-    calc_dh_shared(&shared, g, ltsecret, group, pubk);
+    r->success = calc_dh_shared(&shared, g, ltsecret, group, pubk);
 #else
-    calc_dh_shared(&shared, g, &sec, group);
+    r->success = calc_dh_shared(&shared, g, &sec, group);
     mpz_clear (&sec);
 #endif
 
@@ -1607,10 +1620,11 @@ void calc_dh_v2(struct pluto_crypto_req *r)
     DBG(DBG_CRYPT, DBG_dump_chunk("peer's g: ", g));
 
 #ifndef HAVE_LIBNSS
-    calc_dh_shared(&shared, g, &sec, group);
+    r->success = calc_dh_shared(&shared, g, &sec, group);
 #else
-    calc_dh_shared(&shared, g, ltsecret, group, pubk);
+    r->success = calc_dh_shared(&shared, g, ltsecret, group, pubk);
 #endif
+    if(!r->success) return;
 
     memset(&skeyseed,  0, sizeof(skeyseed));
     memset(&SK_d,      0, sizeof(SK_d));
@@ -1656,6 +1670,7 @@ void calc_dh_v2(struct pluto_crypto_req *r)
     freeanychunk(SK_pi);
     freeanychunk(SK_pr);
 
+    r->success = TRUE;
     return;
 }
 
diff --git a/programs/pluto/ikev1_aggr.c b/programs/pluto/ikev1_aggr.c
index 474ee88a0..872df50a1 100644
--- a/programs/pluto/ikev1_aggr.c
+++ b/programs/pluto/ikev1_aggr.c
@@ -404,6 +404,9 @@ aggr_inI1_outR1_tail(struct pluto_crypto_req_cont *pcrc
      */
 
     finish_dh_secretiv(st, r);
+    if(!r->pcr_success) {
+        return STF_FAIL + INVALID_KEY_INFORMATION;
+    }
 
     init_pbs(&reply_stream, reply_buffer, sizeof(reply_buffer), "reply packet");
 
@@ -675,6 +678,9 @@ aggr_inR1_outI2_crypto_continue(struct pluto_crypto_req_cont *pcrc
   st->st_calculating = FALSE;
 
   finish_dh_secretiv(st, r);
+  if(!r->pcr_success) {
+      return STF_FAIL + INVALID_KEY_INFORMATION;
+  }
 
   e = aggr_inR1_outI2_tail(md, NULL);
 
diff --git a/programs/pluto/ikev1_main.c b/programs/pluto/ikev1_main.c
index 831fe1572..c4d11af7e 100644
--- a/programs/pluto/ikev1_main.c
+++ b/programs/pluto/ikev1_main.c
@@ -1321,6 +1321,9 @@ main_inI2_outR2_calcdone(struct pluto_crypto_req_cont *pcrc
     }
 
     finish_dh_secretiv(st, r);
+    if(!r->pcr_success) {
+        return STF_FAIL + INVALID_KEY_INFORMATION;
+    }
 
     st->hidden_variables.st_skeyid_calculated = TRUE;
     update_iv(st);
@@ -1576,6 +1579,9 @@ main_inR2_outI3_continue(struct msg_digest *md
     cert_t mycert = st->st_connection->spd.this.cert;
 
     finish_dh_secretiv(st, r);
+    if(!r->pcr_success) {
+        return STF_FAIL + INVALID_KEY_INFORMATION;
+    }
 
     /* decode certificate requests */
     decode_cr(md, &requested_ca);
diff --git a/programs/pluto/ikev1_quick.c b/programs/pluto/ikev1_quick.c
index 5451a093d..0711a42f0 100644
--- a/programs/pluto/ikev1_quick.c
+++ b/programs/pluto/ikev1_quick.c
@@ -2254,7 +2254,9 @@ quick_inI1_outR1_cryptotail(struct dh_continuation *dh
 	    return STF_INTERNAL_ERROR;
 
 	finish_dh_secret(st, r);
-
+        if(!r->pcr_success) {
+            return STF_FAIL + INVALID_KEY_INFORMATION;
+        }
     }
 
     /* [ IDci, IDcr ] out */
@@ -2422,6 +2424,9 @@ quick_inR1_outI2_cryptotail(struct dh_continuation *dh
 
     if (st->st_pfs_group != NULL && r!=NULL) {
 	finish_dh_secret(st, r);
+        if(!r->pcr_success) {
+            return STF_FAIL + INVALID_KEY_INFORMATION;
+        }
     }
 
 #ifdef NAT_TRAVERSAL
diff --git a/programs/pluto/pluto_crypt.h b/programs/pluto/pluto_crypt.h
index bac90ee3c..53900130b 100644
--- a/programs/pluto/pluto_crypt.h
+++ b/programs/pluto/pluto_crypt.h
@@ -134,6 +134,7 @@ struct pluto_crypto_req {
   pcr_req_id                 pcr_id;
   enum crypto_importance     pcr_pcim;
   int                        pcr_slot;
+  int                        pcr_success;
   union {
       struct pcr_kenonce      kn;
       struct pcr_skeyid_q     dhq;
