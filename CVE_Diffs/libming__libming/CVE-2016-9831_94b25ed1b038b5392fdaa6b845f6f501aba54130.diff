libming__libming
commit 94b25ed1b038b5392fdaa6b845f6f501aba54130
Author:     Balint Reczey <balint@balintreczey.hu>
AuthorDate: Mon Jan 2 21:28:17 2017 +0100
Commit:     Sandro Santilli <strk@kbt.io>
CommitDate: Mon Jan 30 09:54:52 2017 +0100

    Exit immediately when unexpected EOF is by fgetc() in utility programs
    
    Fixes CVE-2016-9831
    
    Fixes: #58

diff --git a/util/listfdb.c b/util/listfdb.c
index 4384b8ad..d1cdddec 100644
--- a/util/listfdb.c
+++ b/util/listfdb.c
@@ -71,12 +71,24 @@ int readBits(FILE *f, int number)
     {
       ret <<= 8;
       ret += fgetc(f);
+      if (feof(f))
+      {
+        fprintf(stderr, "truncated file\n");
+        exit(-1);
+      }
+
       ++fileOffset;
       number -= 8;
     }
 
     ++fileOffset;
     buffer = fgetc(f);
+    if (feof(f))
+    {
+      fprintf(stderr, "truncated file\n");
+      exit(-1);
+    }
+
 
     if(number>0)
     {
@@ -108,9 +120,19 @@ int readSBits(FILE *f, int number)
 
 int readUInt8(FILE *f)
 {
+  int tmp_char = fgetc(f);
+  // the rest of the code does not handle errors and use EOF as a valid unsigned char value
+  if (tmp_char == EOF)
+  {
+    // exit here instead of crashing elswhere
+    fprintf(stderr, "truncated file\n");
+    exit(-1);
+  }
+
   bufbits = 0;
   ++fileOffset;
-  return fgetc(f);
+
+  return tmp_char;
 }
 
 int readSInt8(FILE *f)
diff --git a/util/listjpeg.c b/util/listjpeg.c
index 5ead7045..f70304ad 100644
--- a/util/listjpeg.c
+++ b/util/listjpeg.c
@@ -52,11 +52,14 @@ void printJpegStream(FILE *f)
 
     if(c != JPEG_SOI && c != JPEG_EOI)
     {
-      l = (fgetc(f)<<8) + fgetc(f);
-      printf("%i bytes\n", l);
-
-      for(l-=2; l>0; --l)
-	fgetc(f);
+      int tmp_char = fgetc(f);
+      if (!feof(f)) {
+        l = (tmp_char << 8) + fgetc(f);
+        printf("%i bytes\n", l);
+
+        for(l-=2; l>0; --l)
+          fgetc(f);
+      }
     }
   }
 }
diff --git a/util/old/listswf.c b/util/old/listswf.c
index f8bbe12c..203fcb7a 100755
--- a/util/old/listswf.c
+++ b/util/old/listswf.c
@@ -1649,6 +1649,11 @@ void printMP3Headers(FILE *f, int length)
     flags += fgetc(f) << 16;
     flags += fgetc(f) << 8;
     flags += fgetc(f);
+    if (feof(f))
+    {
+      fprintf(stderr, "truncated file\n");
+      exit(-1);
+    }
 
     fileOffset += 4;
 
diff --git a/util/old/read.c b/util/old/read.c
index 71d1d0ee..bafe6565 100644
--- a/util/old/read.c
+++ b/util/old/read.c
@@ -64,6 +64,7 @@ void byteAlign()
 int readBits(FILE *f, int number)
 {
   int ret = buffer;
+  int tmp_char;
 
   if(number == bufbits)
   {
@@ -79,13 +80,29 @@ int readBits(FILE *f, int number)
     while(number>8)
     {
       ret <<= 8;
-      ret += fgetc(f);
+      tmp_char = fgetc(f);
+      if (tmp_char == EOF)
+      {
+        // exit here instead of crashing elswhere
+        fprintf(stderr, "truncated file\n");
+        exit(-1);
+      }
+
+      ret += tmp_char;
       ++fileOffset;
       number -= 8;
     }
 
     ++fileOffset;
-    buffer = fgetc(f);
+    tmp_char = fgetc(f);
+    if (tmp_char == EOF)
+    {
+      // exit here instead of crashing elswhere
+      fprintf(stderr, "truncated file\n");
+      exit(-1);
+    }
+
+    buffer = tmp_char;
 
     if(number>0)
     {
@@ -117,9 +134,18 @@ int readSBits(FILE *f, int number)
 
 int readUInt8(FILE *f)
 {
+  int tmp_char = fgetc(f);
+  // the rest of the code does not handle errors and use EOF as a valid unsigned char value
+  if (tmp_char == EOF)
+  {
+    // exit here instead of crashing elswhere
+    fprintf(stderr, "truncated file\n");
+    exit(-1);
+  }
+
   bufbits = 0;
   ++fileOffset;
-  return fgetc(f);
+  return tmp_char;
 }
 
 int readSInt8(FILE *f)
diff --git a/util/read.c b/util/read.c
index a73e8078..4c18307a 100644
--- a/util/read.c
+++ b/util/read.c
@@ -44,6 +44,7 @@ void byteAlign()
 int readBits(FILE *f, int number)
 {
   int ret = buffer;
+  int tmp_char;
 
   if(number == bufbits)
   {
@@ -58,14 +59,30 @@ int readBits(FILE *f, int number)
 
     while(number>8)
     {
+      tmp_char = fgetc(f);
+      if (tmp_char == EOF)
+      {
+        // exit here instead of crashing elswhere
+        fprintf(stderr, "truncated file\n");
+        exit(-1);
+      }
+
       ret <<= 8;
-      ret += fgetc(f);
+      ret += tmp_char;
       ++fileOffset;
       number -= 8;
     }
 
     ++fileOffset;
-    buffer = fgetc(f);
+    tmp_char = fgetc(f);
+    if (tmp_char == EOF)
+    {
+      // exit here instead of crashing elswhere
+      fprintf(stderr, "truncated file\n");
+      exit(-1);
+    }
+
+    buffer = tmp_char;
 
     if(number>0)
     {
@@ -109,9 +126,18 @@ void readRect(FILE *f, struct Rect *s)
 
 int readUInt8(FILE *f)
 {
+  int tmp_char = fgetc(f);
+  // the rest of the code does not handle errors and use EOF as a valid unsigned char value
+  if (tmp_char == EOF)
+  {
+    // exit here instead of crashing elswhere
+    fprintf(stderr, "truncated file\n");
+    exit(-1);
+  }
+
   bufbits = 0;
   ++fileOffset;
-  return fgetc(f);
+  return tmp_char;
 }
 
 int readSInt8(FILE *f)
