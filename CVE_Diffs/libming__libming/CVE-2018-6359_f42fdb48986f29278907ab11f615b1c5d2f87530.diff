libming__libming
commit f42fdb48986f29278907ab11f615b1c5d2f87530
Author:     Hugo Lefeuvre <hle@debian.org>
AuthorDate: Mon Feb 19 17:40:23 2018 +0100
Commit:     Hugo Lefeuvre <hle@debian.org>
CommitDate: Mon Feb 19 17:46:49 2018 +0100

    Fix heap-use-after-free in decompileIF
    
    The decompileIF function in util/decompile.c accesses actions
    array without checking the validity of n, the user entered index.
    This leads to heap-use-after-free issues when n is zero.
    
    This commit addresses this issue by using the OpCode function
    which does check input arguments.
    
    This commit fixes #105 (CVE-2018-6359).

diff --git a/NEWS b/NEWS
index 8d86692e..9381040d 100644
--- a/NEWS
+++ b/NEWS
@@ -29,6 +29,7 @@
   * Fix left shift of a negative value in util/read.c (left shift of a
     negative value in readSBits) (CVE-2018-5294, issue #97)
   * Fix buffer overflow in outputSWF_TEXT_RECORD (CVE-2018-6315, issue #101)
+  * Fix heap-use-after-free in decompileIF (CVE-2018-6359, issue #105)
 
 0.4.8 - 2017-04-07
 
diff --git a/util/decompile.c b/util/decompile.c
index a303d6ba..1126ef0f 100644
--- a/util/decompile.c
+++ b/util/decompile.c
@@ -2387,7 +2387,7 @@ decompileIF(int n, SWF_ACTION *actions, int maxn)
 #define SOME_IF_DEBUG 0	/* coders only */
 		int has_else_or_break= ((sact->Actions[sact->numActions-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_JUMP) &&
 			(sact->Actions[sact->numActions-1].SWF_ACTIONJUMP.BranchOffset > 0 )) ? 1:0;
-		int has_lognot=(actions[n-1].SWF_ACTIONRECORD.ActionCode == SWFACTION_LOGICALNOT) ? 1:0;
+		int has_lognot=(OpCode(actions, n-1, maxn) == SWFACTION_LOGICALNOT) ? 1:0;
 		int else_action_cnt=0,is_logor=0,is_logand=0,sbi,sbe;
 
 		/* before emitting any "if"/"else" characters let's check 
