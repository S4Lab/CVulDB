the-tcpdump-group__tcpdump
commit 0db4dcafe5ae38201d3869c96a96cb714d82ff35
Author:     Denis Ovsienko <denis@ovsienko.info>
AuthorDate: Tue Jan 10 14:12:14 2017 +0000
Commit:     Francois-Xavier Le Bail <fx.lebail@yahoo.com>
CommitDate: Wed Jan 18 09:16:41 2017 +0100

    CVE-2017-5342/pass correct caplen value to ether_print()
    
    In that function the "length" parameter means off-the-wire length, that
    is, the length declared inside the outer header. The "caplen" parameter
    means the amount of bytes actually available in the captured packet.
    
    gre_print_0() and the functions modelled after it passed the value of
    "length" instead of the value of "caplen", this could make ether_print()
    access beyond the memory allocated for the captured packet. Brian
    Carpenter had demonstrated this for the OTV case.
    
    Fix the involved functions that call ether_print() to pass the correct
    value and leave a comment to dismiss "caplen" later as its value can be
    reliably derived from the other ether_print() parameters.

diff --git a/print-ether.c b/print-ether.c
index 5072c442..241c5070 100644
--- a/print-ether.c
+++ b/print-ether.c
@@ -126,6 +126,8 @@ ether_hdr_print(netdissect_options *ndo,
  * This might be encapsulated within another frame; we might be passed
  * a pointer to a function that can print header information for that
  * frame's protocol, and an argument to pass to that function.
+ *
+ * FIXME: caplen can and should be derived from ndo->ndo_snapend and p.
  */
 u_int
 ether_print(netdissect_options *ndo,
diff --git a/print-geneve.c b/print-geneve.c
index f0319636..d1ed242f 100644
--- a/print-geneve.c
+++ b/print-geneve.c
@@ -225,7 +225,7 @@ geneve_print(netdissect_options *ndo, const u_char *bp, u_int len)
 
     if (ethertype_print(ndo, prot, bp, len, len, NULL, NULL) == 0) {
         if (prot == ETHERTYPE_TEB)
-            ether_print(ndo, bp, len, len, NULL, NULL);
+            ether_print(ndo, bp, len, ndo->ndo_snapend - bp, NULL, NULL);
         else
             ND_PRINT((ndo, "geneve-proto-0x%x", prot));
     }
diff --git a/print-gre.c b/print-gre.c
index 4b83ca25..e0f60c94 100644
--- a/print-gre.c
+++ b/print-gre.c
@@ -229,7 +229,7 @@ gre_print_0(netdissect_options *ndo, const u_char *bp, u_int length)
 		isoclns_print(ndo, bp, len, len);
 		break;
 	case ETHERTYPE_TEB:
-		ether_print(ndo, bp, len, len, NULL, NULL);
+		ether_print(ndo, bp, len, ndo->ndo_snapend - bp, NULL, NULL);
 		break;
 	default:
 		ND_PRINT((ndo, "gre-proto-0x%x", prot));
diff --git a/print-nsh.c b/print-nsh.c
index 82976a03..abd722d4 100644
--- a/print-nsh.c
+++ b/print-nsh.c
@@ -170,7 +170,7 @@ nsh_print(netdissect_options *ndo, const u_char *bp, u_int len)
         ip6_print(ndo, bp, next_len);
         break;
     case 0x3:
-        ether_print(ndo, bp, next_len, next_len, NULL, NULL);
+        ether_print(ndo, bp, next_len, ndo->ndo_snapend - bp, NULL, NULL);
         break;
     default:
         ND_PRINT((ndo, "ERROR: unknown-next-protocol"));
diff --git a/print-otv.c b/print-otv.c
index f276441f..5a82752c 100644
--- a/print-otv.c
+++ b/print-otv.c
@@ -64,7 +64,7 @@ otv_print(netdissect_options *ndo, const u_char *bp, u_int len)
     ND_TCHECK(*bp);
     bp += 1;
 
-    ether_print(ndo, bp, len - 8, len - 8, NULL, NULL);
+    ether_print(ndo, bp, len - 8, ndo->ndo_snapend - bp, NULL, NULL);
     return;
 
 trunc:
diff --git a/print-vxlan-gpe.c b/print-vxlan-gpe.c
index a3c214d3..6d170de1 100644
--- a/print-vxlan-gpe.c
+++ b/print-vxlan-gpe.c
@@ -92,7 +92,7 @@ vxlan_gpe_print(netdissect_options *ndo, const u_char *bp, u_int len)
         ip6_print(ndo, bp, len - 8);
         break;
     case 0x3:
-        ether_print(ndo, bp, len - 8, len - 8, NULL, NULL);
+        ether_print(ndo, bp, len - 8, ndo->ndo_snapend - bp, NULL, NULL);
         break;
     case 0x4:
         nsh_print(ndo, bp, len - 8);
diff --git a/print-vxlan.c b/print-vxlan.c
index 052cbe3d..0c2a82e2 100644
--- a/print-vxlan.c
+++ b/print-vxlan.c
@@ -65,7 +65,7 @@ vxlan_print(netdissect_options *ndo, const u_char *bp, u_int len)
     ND_PRINT((ndo, "flags [%s] (0x%02x), ", flags & 0x08 ? "I" : ".", flags));
     ND_PRINT((ndo, "vni %u\n", vni));
 
-    ether_print(ndo, bp, len - VXLAN_HDR_LEN, len - VXLAN_HDR_LEN, NULL, NULL);
+    ether_print(ndo, bp, len - VXLAN_HDR_LEN, ndo->ndo_snapend - bp, NULL, NULL);
 
     return;
 
diff --git a/tests/TESTLIST b/tests/TESTLIST
index 379dae5d..5046046c 100644
--- a/tests/TESTLIST
+++ b/tests/TESTLIST
@@ -423,6 +423,7 @@ relts-0x80000000	relts-0x80000000.pcap	relts-0x80000000.out	-t -v -n
 ipv6hdr-heapoverflow	ipv6hdr-heapoverflow.pcap	ipv6hdr-heapoverflow.out	-t
 ipv6hdr-heapoverflow-v	ipv6hdr-heapoverflow.pcap	ipv6hdr-heapoverflow-v.out	-t -v
 otv-heapoverflow-1	otv-heapoverflow-1.pcap		otv-heapoverflow-1.out		-t -c10
+otv-heapoverflow-2	otv-heapoverflow-2.pcap		otv-heapoverflow-2.out		-t -c10
 
 # RTP tests
 # fuzzed pcap
diff --git a/tests/otv-heapoverflow-2.out b/tests/otv-heapoverflow-2.out
new file mode 100644
index 00000000..7ea809f6
--- /dev/null
+++ b/tests/otv-heapoverflow-2.out
@@ -0,0 +1,11 @@
+IP 192.168.0.134.47808 > 192.168.0.24.47808: UDP, length 6
+IP 192.168.0.134.47808 > 192.168.0.24.47808: UDP, length 12
+IP 192.168.0.24.47808 > 192.168.0.134.47808: UDP, length 6
+IP 192.168.0.24.47808 > 192.168.0.255.47808: UDP, length 18
+IP 192.168.0.105.47808 > 192.168.0.255.47808: UDP, length 25
+IP 192.168.0.24.47808 > 192.168.0.134.47808: UDP, length 31
+IP 192.168.0.18.47808 > 192.168.0.255.47808: UDP, length 24
+IP 192.168.0.24.40896 > 192.168.0.134.47808: UDP, length 30
+IP 192.168.0.24.47808 > 192.168.0.255.47808: UDP, length 20
+IP 192.168.0.9.37123 > 97.34.1.224.8472: OTV, flags [I] (0x9d), overlay 12124160, instance 4587520
+[|ether]
diff --git a/tests/otv-heapoverflow-2.pcap b/tests/otv-heapoverflow-2.pcap
new file mode 100644
index 00000000..69d6e785
Binary files /dev/null and b/tests/otv-heapoverflow-2.pcap differ
