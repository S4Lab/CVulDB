ValveSoftware__steamos_kernel
commit b87d1a00d3eb7fb1eba6e7db2e26342724c0410e
Author:     Eric Sandeen <sandeen@redhat.com>
AuthorDate: Mon Jan 8 06:59:28 2007 +0100
Commit:     Adrian Bunk <bunk@stusta.de>
CommitDate: Tue Jan 9 03:23:34 2007 +0100

    ext2: skip pages past number of blocks in ext2_find_entry (CVE-2006-6054)
    
    This one was pointed out on the MOKB site:
    http://kernelfun.blogspot.com/2006/11/mokb-09-11-2006-linux-26x-ext2checkpage.html
    
    If a directory's i_size is corrupted, ext2_find_entry() will keep processing
    pages until the i_size is reached, even if there are no more blocks associated
    with the directory inode.  This patch puts in some minimal sanity-checking
    so that we don't keep checking pages (and issuing errors) if we know there
    can be no more data to read, based on the block count of the directory inode.
    
    This is somewhat similar in approach to the ext3 patch I sent earlier this
    year.
    
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Adrian Bunk <bunk@stusta.de>

diff --git a/fs/ext2/dir.c b/fs/ext2/dir.c
index b3dbd716cd3a..8a27dcc096b5 100644
--- a/fs/ext2/dir.c
+++ b/fs/ext2/dir.c
@@ -369,6 +369,14 @@ struct ext2_dir_entry_2 * ext2_find_entry (struct inode * dir,
 		}
 		if (++n >= npages)
 			n = 0;
+		/* next page is past the blocks we've got */
+		if (unlikely(n > (dir->i_blocks >> (PAGE_CACHE_SHIFT - 9)))) {
+			ext2_error(dir->i_sb, __FUNCTION__,
+				"dir %lu size %lld exceeds block count %llu",
+				dir->i_ino, dir->i_size,
+				(unsigned long long)dir->i_blocks);
+				goto out;
+		}
 	} while (n != start);
 out:
 	return NULL;
