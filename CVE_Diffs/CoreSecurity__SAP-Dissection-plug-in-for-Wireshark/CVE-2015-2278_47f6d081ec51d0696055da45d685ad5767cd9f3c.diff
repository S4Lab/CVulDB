CoreSecurity__SAP-Dissection-plug-in-for-Wireshark
commit 47f6d081ec51d0696055da45d685ad5767cd9f3c
Author:     Martin Gallo <mgallo@coresecurity.com>
AuthorDate: Wed May 13 14:14:05 2015 -0300
Commit:     Martin Gallo <mgallo@coresecurity.com>
CommitDate: Wed May 13 14:14:05 2015 -0300

    Fix vulnerabilities in LZC and LZH libraries
    
    Fixes for vulnerabilities in LZC and LZH decompression routines [1]:
    
    LZC decompression (CVE-2015-2282): Out-of-bounds write to a stack buffer when decompressing using the LZC algorithm. Remote code execution is likely possible.
    LZH decompression (CVE-2015-2278): Out-of-bounds read when decompressing using the LZH algorithm. Denial of service is possible.
    
    SAP released security notes [2] [3] [4] [5] to fix these issues on the affected products and services.
    
    References:
    [1] http://www.coresecurity.com/advisories/sap-lzc-lzh-compression-multiple-vulnerabilities
    [2] https://service.sap.com/sap/support/notes/2121661
    [3] https://service.sap.com/sap/support/notes/2127995
    [4] https://service.sap.com/sap/support/notes/2125316
    [5] https://service.sap.com/sap/support/notes/2124806

diff --git a/src/vpa106cslzc.cpp b/src/vpa106cslzc.cpp
index e599813..dcc2206 100644
--- a/src/vpa106cslzc.cpp
+++ b/src/vpa106cslzc.cpp
@@ -756,6 +756,12 @@ int CsObjectInt::CsDecomprLZC (SAP_BYTE * inbuf,
     /* Generate output characters in reverse order ...................*/
     while (code >= 256)
     {
+
+      /* Check for end of stack */
+      if (stackp >= (DE_STACK + DE_STACK_OFFSET)){
+        return (CS_E_STACK_OVERFLOW);
+      }
+
       *stackp++ = TAB_SUFFIXOF(code);
       OVERFLOW_CHECK
       code = TAB_PREFIXOF(code);
diff --git a/src/vpa108csulzh.cpp b/src/vpa108csulzh.cpp
index fc55baf..d2fe3b4 100644
--- a/src/vpa108csulzh.cpp
+++ b/src/vpa108csulzh.cpp
@@ -337,6 +337,11 @@ int CsObjectInt::BuildHufTree (
       }
       else
       {
+        /* Added check for out-of-bounds read of e & d arrays */
+        if ((*p - s) >= (LENGTH_CODES + 2)){
+          return (CS_E_BAD_HUF_TREE);
+        }
+
         r.e = (unsigned char) e[*p - s]; /*non-simple,look up in lists*/
         r.v.n = (unsigned short) d[*p - s];
         p++;
diff --git a/tests/__init__.py b/tests/__init__.py
index ba90a39..ae43891 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -23,11 +23,13 @@ import unittest
 from os import remove, path
 # Custom imports
 import sapni_test
+import sapdiag_test
 
 
 def suite():
     suite = unittest.TestSuite()
     suite.addTests(sapni_test.suite())
+    suite.addTests(sapdiag_test.suite())
     return suite
 
 
diff --git a/tests/basetestcase.py b/tests/basetestcase.py
index 3d115b1..4054e8e 100644
--- a/tests/basetestcase.py
+++ b/tests/basetestcase.py
@@ -21,6 +21,8 @@
 # Standard imports
 import unittest
 from os import remove, path
+from binascii import unhexlify
+from os.path import join as join, dirname
 # External imports
 import pyshark
 from scapy.all import *
@@ -29,6 +31,18 @@ from scapy.all import *
 pyshark.config.CONFIG_PATH = path.join(path.dirname(__file__), "pyshark.ini")
 
 
+def read_data_file(filename, unhex=True):
+    filename = join(dirname(__file__), 'data', filename)
+    with open(filename, 'r') as f:
+        data = f.read()
+
+    data = data.replace('\n', ' ').replace(' ', '')
+    if unhex:
+        data = unhexlify(data)
+
+    return data
+
+
 class WiresharkTestCase(unittest.TestCase):
     
     tests_filename = "tests.pcap"
@@ -43,3 +57,4 @@ class WiresharkTestCase(unittest.TestCase):
     def tearDown(self):
         if path.exists(self.tests_filename):
             remove(self.tests_filename)
+
diff --git a/tests/data/invalid_read_testcase.data b/tests/data/invalid_read_testcase.data
new file mode 100644
index 0000000..535fdbc
Binary files /dev/null and b/tests/data/invalid_read_testcase.data differ
diff --git a/tests/data/invalid_write_testcase.data b/tests/data/invalid_write_testcase.data
new file mode 100644
index 0000000..e9e61a9
Binary files /dev/null and b/tests/data/invalid_write_testcase.data differ
diff --git a/tests/sapdiag_test.py b/tests/sapdiag_test.py
new file mode 100644
index 0000000..d41efbc
--- /dev/null
+++ b/tests/sapdiag_test.py
@@ -0,0 +1,79 @@
+#!/usr/bin/env python
+# ===========
+# SAP Dissector Plugin for Wireshark
+#
+# Copyright (C) 2015 by Martin Gallo, Core Security
+#
+# The plugin was designed and developed by Martin Gallo from the Security
+# Consulting Services team of Core Security.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# ==============
+
+# Standard imports
+import unittest
+# External imports
+from pysap.SAPNI import SAPNI
+from pysap.SAPDiag import SAPDiag
+from scapy.all import Ether, IP, TCP, Raw
+# Custom imports
+from basetestcase import WiresharkTestCase, read_data_file
+
+
+class WiresharkSAPDiagTestCase(WiresharkTestCase):
+
+    def test_sapdiag_dissection(self):
+        """Test dissection of a basic SAP Diag packet. """
+        pkt = Ether()/IP()/TCP(dport=3200)/SAPNI()/SAPDiag()
+        
+        packet = self.get_capture(pkt)[0]
+        
+        self.assertIn('sapni', packet)
+        self.assertEqual(int(packet['sapni'].length), 8)
+
+        self.assertIn('sapdiag', packet)
+
+    def test_invalid_write(self):
+        """Test invalid write vulnerability in LZC code (CVE-2015-2282)"""
+
+        test_case = read_data_file('invalid_write_testcase.data', False)
+
+        pkt = Ether()/IP()/TCP(dport=3200)/SAPNI()/Raw(str(SAPDiag(compress=1))[:-8])/test_case
+        
+        packet = self.get_capture(pkt)[0]
+
+        self.assertIn('sapdiag', packet)
+        self.assertEqual(-60, int(packet['sapdiag'].header_compression_returncode))
+
+    def test_invalid_read(self):
+        "Test invalid read vulnerability in LZH code (CVE-2015-2278)"
+
+        test_case = read_data_file('invalid_read_testcase.data', False)
+
+        pkt = Ether()/IP()/TCP(dport=3200)/SAPNI()/Raw(str(SAPDiag(compress=1))[:-8])/test_case
+        
+        packet = self.get_capture(pkt)[0]
+
+        self.assertIn('sapdiag', packet)
+        self.assertEqual(1, int(packet['sapdiag'].header_compression_returncode))
+        self.assertEqual("The uncompressed payload length (0) differs with the reported length (661)",
+                         packet['sapdiag'].header_compression_uncomplength_invalid)
+
+
+def suite():
+    loader = unittest.TestLoader()
+    suite = unittest.TestSuite()
+    suite.addTest(loader.loadTestsFromTestCase(WiresharkSAPDiagTestCase))
+    return suite
+
+
+if __name__ == "__main__":
+    unittest.TextTestRunner(verbosity=2).run(suite())
