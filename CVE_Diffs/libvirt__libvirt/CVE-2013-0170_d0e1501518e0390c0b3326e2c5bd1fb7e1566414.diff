libvirt__libvirt
commit d0e1501518e0390c0b3326e2c5bd1fb7e1566414
Author:     Peter Krempa <pkrempa@redhat.com>
AuthorDate: Fri Jan 4 16:15:04 2013 +0100
Commit:     Peter Krempa <pkrempa@redhat.com>
CommitDate: Mon Jan 28 20:04:59 2013 +0100

    rpc: Fix crash on error paths of message dispatching
    
    This patch resolves CVE-2013-0170:
    https://bugzilla.redhat.com/show_bug.cgi?id=893450
    
    When reading and dispatching of a message failed the message was freed
    but wasn't removed from the message queue.
    
    After that when the connection was about to be closed the pointer for
    the message was still present in the queue and it was passed to
    virNetMessageFree which tried to call the callback function from an
    uninitialized pointer.
    
    This patch removes the message from the queue before it's freed.
    
    * rpc/virnetserverclient.c: virNetServerClientDispatchRead:
        - avoid use after free of RPC messages
    (cherry picked from commit 46532e3e8ed5f5a736a02f67d6c805492f9ca720)

diff --git a/src/rpc/virnetserverclient.c b/src/rpc/virnetserverclient.c
index c4595b1969..55a353622d 100644
--- a/src/rpc/virnetserverclient.c
+++ b/src/rpc/virnetserverclient.c
@@ -823,6 +823,7 @@ readmore:
 
         /* Decode the header so we can use it for routing decisions */
         if (virNetMessageDecodeHeader(msg) < 0) {
+            virNetMessageQueueServe(&client->rx);
             virNetMessageFree(msg);
             client->wantClose = true;
             return;
@@ -832,6 +833,7 @@ readmore:
          * file descriptors */
         if (msg->header.type == VIR_NET_CALL_WITH_FDS &&
             virNetMessageDecodeNumFDs(msg) < 0) {
+            virNetMessageQueueServe(&client->rx);
             virNetMessageFree(msg);
             client->wantClose = true;
             return; /* Error */
@@ -841,6 +843,7 @@ readmore:
         for (i = msg->donefds ; i < msg->nfds ; i++) {
             int rv;
             if ((rv = virNetSocketRecvFD(client->sock, &(msg->fds[i]))) < 0) {
+                virNetMessageQueueServe(&client->rx);
                 virNetMessageFree(msg);
                 client->wantClose = true;
                 return;
