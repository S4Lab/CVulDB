Canonical-kernel__Ubuntu-kernel
commit 9be82c8a8483e94d4d2ea803ffcbd73583644498
Author:     Alex Williamson <alex.williamson@redhat.com>
AuthorDate: Mon Mar 12 14:06:35 2012 +0000
Commit:     Luis Henriques <luis.henriques@canonical.com>
CommitDate: Tue Mar 27 19:51:18 2012 +0100

    KVM: Remove ability to assign a device without iommu support
    
    This option has no users and it exposes a security hole that we
    can allow devices to be assigned without iommu protection.  Make
    KVM_DEV_ASSIGN_ENABLE_IOMMU a mandatory option.
    
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    
    (backported from commit 423873736b78f549fbfa2f715f2e4de7e6c5e1e9)
    CVE-2011-4347
    BugLink: http://bugs.launchpad.net/bugs/897812
    Acked-by: Herton Ronaldo Krzesinski <herton.krzesinski@canonical.com>
    Acked-by: Stefan Bader <stefan.bader@canonical.com>
    Signed-off-by: Andy Whitcroft <apw@canonical.com>

diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 58c444e97e91..16c869a14440 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -645,6 +645,9 @@ static int kvm_vm_ioctl_assign_device(struct kvm *kvm,
 	struct pci_dev *dev;
 	u8 header_type;
 
+	if (!(assigned_dev->flags & KVM_DEV_ASSIGN_ENABLE_IOMMU))
+		return -EINVAL;
+
 	down_read(&kvm->slots_lock);
 	mutex_lock(&kvm->lock);
 
@@ -710,16 +713,14 @@ static int kvm_vm_ioctl_assign_device(struct kvm *kvm,
 
 	list_add(&match->list, &kvm->arch.assigned_dev_head);
 
-	if (assigned_dev->flags & KVM_DEV_ASSIGN_ENABLE_IOMMU) {
-		if (!kvm->arch.iommu_domain) {
-			r = kvm_iommu_map_guest(kvm);
-			if (r)
-				goto out_list_del;
-		}
-		r = kvm_assign_device(kvm, match);
+	if (!kvm->arch.iommu_domain) {
+		r = kvm_iommu_map_guest(kvm);
 		if (r)
 			goto out_list_del;
 	}
+	r = kvm_assign_device(kvm, match);
+	if (r)
+		goto out_list_del;
 
 out:
 	mutex_unlock(&kvm->lock);
@@ -758,8 +759,7 @@ static int kvm_vm_ioctl_deassign_device(struct kvm *kvm,
 		goto out;
 	}
 
-	if (match->flags & KVM_DEV_ASSIGN_ENABLE_IOMMU)
-		kvm_deassign_device(kvm, match);
+	kvm_deassign_device(kvm, match);
 
 	kvm_free_assigned_device(kvm, match);
 
