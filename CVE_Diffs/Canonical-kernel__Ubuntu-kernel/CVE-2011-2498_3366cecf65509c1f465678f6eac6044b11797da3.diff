Canonical-kernel__Ubuntu-kernel
commit 3366cecf65509c1f465678f6eac6044b11797da3
Author:     Frantisek Hrbata <fhrbata@redhat.com>
AuthorDate: Mon Dec 19 17:11:59 2011 -0800
Commit:     Herton Ronaldo Krzesinski <herton.krzesinski@canonical.com>
CommitDate: Mon Feb 13 17:48:07 2012 -0200

    oom: fix integer overflow of points in oom_badness
    
    An integer overflow will happen on 64bit archs if task's sum of rss,
    swapents and nr_ptes exceeds (2^31)/1000 value.  This was introduced by
    commit
    
    f755a04 oom: use pte pages in OOM score
    
    where the oom score computation was divided into several steps and it's no
    longer computed as one expression in unsigned long(rss, swapents, nr_pte
    are unsigned long), where the result value assigned to points(int) is in
    range(1..1000).  So there could be an int overflow while computing
    
    176          points *= 1000;
    
    and points may have negative value. Meaning the oom score for a mem hog task
    will be one.
    
    196          if (points <= 0)
    197                  return 1;
    
    For example:
    [ 3366]     0  3366 35390480 24303939   5       0             0 oom01
    Out of memory: Kill process 3366 (oom01) score 1 or sacrifice child
    
    Here the oom1 process consumes more than 24303939(rss)*4096~=92GB physical
    memory, but it's oom score is one.
    
    In this situation the mem hog task is skipped and oom killer kills another and
    most probably innocent task with oom score greater than one.
    
    The points variable should be of type long instead of int to prevent the
    int overflow.
    
    Signed-off-by: Frantisek Hrbata <fhrbata@redhat.com>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: <stable@vger.kernel.org>            [2.6.36+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    (cherry picked from commit ff05b6f7ae762b6eb464183eec994b28ea09f6dd)
    CVE-2011-2498
    BugLink: http://bugs.launchpad.net/bugs/922374
    
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/mm/oom_kill.c b/mm/oom_kill.c
index 49ea0cc9ae12..662369182456 100644
--- a/mm/oom_kill.c
+++ b/mm/oom_kill.c
@@ -135,7 +135,7 @@ static bool oom_unkillable_task(struct task_struct *p,
 unsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,
 		      const nodemask_t *nodemask, unsigned long totalpages)
 {
-	int points;
+	long points;
 
 	if (oom_unkillable_task(p, mem, nodemask))
 		return 0;
