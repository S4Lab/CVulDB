Canonical-kernel__Ubuntu-kernel
commit c4589b48b183930fbc12baee56b836c6d06a61c3
Author:     Oleg Nesterov <oleg@redhat.com>
AuthorDate: Mon Mar 2 22:58:45 2009 +0100
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Wed Mar 18 14:19:56 2009 +0100

    copy_process: fix CLONE_PARENT && parent_exec_id interaction
    
    CVE-2009-0028
    
    commit 2d5516cbb9daf7d0e342a2e3b0fc6f8c39a81205 upstream
    
    CLONE_PARENT can fool the ->self_exec_id/parent_exec_id logic. If we
    re-use the old parent, we must also re-use ->parent_exec_id to make
    sure exit_notify() sees the right ->xxx_exec_id's when the CLONE_PARENT'ed
    task exits.
    
    Also, move down the "p->parent_exec_id = p->self_exec_id" thing, to place
    two different cases together.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Roland McGrath <roland@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Serge E. Hallyn <serge@hallyn.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/kernel/fork.c b/kernel/fork.c
index 8529f0e9ed99..06e2149c7710 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1199,10 +1199,6 @@ static struct task_struct *copy_process(unsigned long clone_flags,
 #endif
 	clear_all_latency_tracing(p);
 
-	/* Our parent execution domain becomes current domain
-	   These must match for thread signalling to apply */
-	p->parent_exec_id = p->self_exec_id;
-
 	/* ok, now we should be set up.. */
 	p->exit_signal = (clone_flags & CLONE_THREAD) ? -1 : (clone_flags & CSIGNAL);
 	p->pdeath_signal = 0;
@@ -1244,10 +1240,13 @@ static struct task_struct *copy_process(unsigned long clone_flags,
 		set_task_cpu(p, smp_processor_id());
 
 	/* CLONE_PARENT re-uses the old parent */
-	if (clone_flags & (CLONE_PARENT|CLONE_THREAD))
+	if (clone_flags & (CLONE_PARENT|CLONE_THREAD)) {
 		p->real_parent = current->real_parent;
-	else
+		p->parent_exec_id = current->parent_exec_id;
+	} else {
 		p->real_parent = current;
+		p->parent_exec_id = current->self_exec_id;
+	}
 	p->parent = p->real_parent;
 
 	spin_lock(&current->sighand->siglock);
