Canonical-kernel__Ubuntu-kernel
commit d8f46c1daabf73043bf4d37f0a2ab0e089c1a010
Author:     Eduardo Habkost <ehabkost@redhat.com>
AuthorDate: Sat Oct 24 02:49:59 2009 -0200
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue May 25 14:09:05 2010 +0200

    KVM: SVM: Reset cr0 properly on vcpu reset
    
    CVE-2010-0306
    CVE-2010-0298
    
    svm_vcpu_reset() was not properly resetting the contents of the guest-visible
    cr0 register, causing the following issue:
    https://bugzilla.redhat.com/show_bug.cgi?id=525699
    
    Without resetting cr0 properly, the vcpu was running the SIPI bootstrap routine
    with paging enabled, making the vcpu get a pagefault exception while trying to
    run it.
    
    Instead of setting vmcb->save.cr0 directly, the new code just resets
    kvm->arch.cr0 and calls kvm_set_cr0(). The bits that were set/cleared on
    vmcb->save.cr0 (PG, WP, !CD, !NW) will be set properly by svm_set_cr0().
    
    kvm_set_cr0() is used instead of calling svm_set_cr0() directly to make sure
    kvm_mmu_reset_context() is called to reset the mmu to nonpaging mode.
    
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>
    (backported from commit 18fa000ae453767b59ab97477925895a3f0c46ea upstream)
    Signed-off-by: Surbhi Palande <surbhi.palande@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index 1e8ff3d7076e..a24f2e346ed7 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -583,11 +583,12 @@ static void init_vmcb(struct vcpu_svm *svm)
 	save->rflags = 2;
 	save->rip = 0x0000fff0;
 
-	/*
-	 * cr0 val on cpu init should be 0x60000010, we enable cpu
-	 * cache by default. the orderly way is to enable cache in bios.
+	/* This is the guest-visible cr0 value.
+	 * svm_set_cr0() sets PG and WP and clears NW and CD on save->cr0.
 	 */
-	save->cr0 = 0x00000010 | X86_CR0_PG | X86_CR0_WP;
+	svm->vcpu.arch.cr0 = X86_CR0_NW | X86_CR0_CD | X86_CR0_ET;
+	kvm_set_cr0(&svm->vcpu, svm->vcpu.arch.cr0);
+
 	save->cr4 = X86_CR4_PAE;
 	/* rdx = ?? */
 
