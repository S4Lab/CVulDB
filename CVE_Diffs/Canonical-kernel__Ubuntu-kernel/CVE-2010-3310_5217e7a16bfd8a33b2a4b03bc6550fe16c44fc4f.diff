Canonical-kernel__Ubuntu-kernel
commit 5217e7a16bfd8a33b2a4b03bc6550fe16c44fc4f
Author:     David S. Miller <davem@davemloft.net>
AuthorDate: Mon Sep 20 15:40:35 2010 -0700
Commit:     Steve Conklin <sconklin@canonical.com>
CommitDate: Wed Oct 6 18:16:02 2010 +0100

    rose: Fix signedness issues wrt. digi count.
    
    CVE-2010-3310
    
    Just use explicit casts, since we really can't change the
    types of structures exported to userspace which have been
    around for 15 years or so.
    
    Reported-by: Dan Rosenberg <dan.j.rosenberg@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Brad Figg <brad.figg@canonical.com>

diff --git a/net/rose/af_rose.c b/net/rose/af_rose.c
index e5f478ca3d61..9bfa1c7ce36f 100644
--- a/net/rose/af_rose.c
+++ b/net/rose/af_rose.c
@@ -677,7 +677,7 @@ static int rose_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 	if (addr_len == sizeof(struct sockaddr_rose) && addr->srose_ndigis > 1)
 		return -EINVAL;
 
-	if (addr->srose_ndigis > ROSE_MAX_DIGIS)
+	if ((unsigned int) addr->srose_ndigis > ROSE_MAX_DIGIS)
 		return -EINVAL;
 
 	if ((dev = rose_dev_get(&addr->srose_addr)) == NULL) {
@@ -737,7 +737,7 @@ static int rose_connect(struct socket *sock, struct sockaddr *uaddr, int addr_le
 	if (addr_len == sizeof(struct sockaddr_rose) && addr->srose_ndigis > 1)
 		return -EINVAL;
 
-	if (addr->srose_ndigis > ROSE_MAX_DIGIS)
+	if ((unsigned int) addr->srose_ndigis > ROSE_MAX_DIGIS)
 		return -EINVAL;
 
 	/* Source + Destination digis should not exceed ROSE_MAX_DIGIS */
