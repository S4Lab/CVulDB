Canonical-kernel__Ubuntu-kernel
commit 48d98e7bfbafcaeea763e252be2554d8280c3596
Author:     Mathias Krause <minipli@googlemail.com>
AuthorDate: Sun Apr 7 01:51:59 2013 +0000
Commit:     Steve Conklin <sconklin@canonical.com>
CommitDate: Thu May 30 17:27:13 2013 -0500

    rose: fix info leak via msg_name in rose_recvmsg()
    
    CVE-2013-3234
    
    BugLink: http://bugs.launchpad.net/bugs/1172394
    
    The code in rose_recvmsg() does not initialize all of the members of
    struct sockaddr_rose/full_sockaddr_rose when filling the sockaddr info.
    Nor does it initialize the padding bytes of the structure inserted by
    the compiler for alignment. This will lead to leaking uninitialized
    kernel stack bytes in net/socket.c.
    
    Fix the issue by initializing the memory used for sockaddr info with
    memset(0).
    
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    (cherry picked from commit 4a184233f21645cf0b719366210ed445d1024d72)
    Acked-by: Stefan Bader <stefan.bader@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/net/rose/af_rose.c b/net/rose/af_rose.c
index f9ea925ad9cb..1f96fb9743b5 100644
--- a/net/rose/af_rose.c
+++ b/net/rose/af_rose.c
@@ -1258,6 +1258,7 @@ static int rose_recvmsg(struct kiocb *iocb, struct socket *sock,
 	skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
 
 	if (srose != NULL) {
+		memset(srose, 0, msg->msg_namelen);
 		srose->srose_family = AF_ROSE;
 		srose->srose_addr   = rose->dest_addr;
 		srose->srose_call   = rose->dest_call;
