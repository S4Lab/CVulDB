Canonical-kernel__Ubuntu-kernel
commit 2414b19ed334a507993aa1d43e4caddba5f0677c
Author:     Stefan Bader <stefan.bader@canonical.com>
AuthorDate: Tue Oct 5 11:17:15 2010 +0100
Commit:     Steve Conklin <sconklin@canonical.com>
CommitDate: Thu Oct 7 15:45:39 2010 +0100

    Fix out-of-bounds reading in sctp_asoc_get_hmac()
    
    CVE-2010-3705
    
    The sctp_asoc_get_hmac() function iterates through a peer's hmac_ids
    array and attempts to ensure that only a supported hmac entry is
    returned.  The current code fails to do this properly - if the last id
    in the array is out of range (greater than SCTP_AUTH_HMAC_ID_MAX), the
    id integer remains set after exiting the loop, and the address of an
    out-of-bounds entry will be returned and subsequently used in the parent
    function, causing potentially ugly memory corruption.  This patch resets
    the id integer to 0 on encountering an invalid id so that NULL will be
    returned after finishing the loop if no valid ids are found.
    
    Signed-off-by: Dan Rosenberg <drosenberg@vsecurity.com>
    (cherry-picked from http://marc.info/?l=linux-kernel&m=128596992418814&w=2)
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/net/sctp/auth.c b/net/sctp/auth.c
index 19bc7c708a44..5908004e38fa 100644
--- a/net/sctp/auth.c
+++ b/net/sctp/auth.c
@@ -542,16 +542,20 @@ struct sctp_hmac *sctp_auth_asoc_get_hmac(const struct sctp_association *asoc)
 		id = ntohs(hmacs->hmac_ids[i]);
 
 		/* Check the id is in the supported range */
-		if (id > SCTP_AUTH_HMAC_ID_MAX)
+		if (id > SCTP_AUTH_HMAC_ID_MAX) {
+			id = 0;
 			continue;
+		}
 
 		/* See is we support the id.  Supported IDs have name and
 		 * length fields set, so that we can allocated and use
 		 * them.  We can safely just check for name, for without the
 		 * name, we can't allocate the TFM.
 		 */
-		if (!sctp_hmac_list[id].hmac_name)
+		if (!sctp_hmac_list[id].hmac_name) {
+			id = 0;
 			continue;
+		}
 
 		break;
 	}
