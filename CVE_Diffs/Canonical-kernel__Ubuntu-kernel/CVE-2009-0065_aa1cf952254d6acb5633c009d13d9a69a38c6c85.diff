Canonical-kernel__Ubuntu-kernel
commit aa1cf952254d6acb5633c009d13d9a69a38c6c85
Author:     Wei Yongjun <yjwei@cn.fujitsu.com>
AuthorDate: Thu Dec 25 16:58:11 2008 -0800
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue Mar 17 17:26:37 2009 +0100

    sctp: Avoid memory overflow while FWD-TSN chunk is received with bad stream ID
    
    CVE-2009-0065
    
    commit 9fcb95a105758b81ef0131cd18e2db5149f13e95 upstream
    
    If FWD-TSN chunk is received with bad stream ID, the sctp will not do the
    validity check, this may cause memory overflow when overwrite the TSN of
    the stream ID.
    
    The FORWARD-TSN chunk is like this:
    
    FORWARD-TSN chunk
      Type                       = 192
      Flags                      = 0
      Length                     = 172
      NewTSN                     = 99
      Stream                     = 10000
      StreamSequence             = 0xFFFF
    
    This patch fix this problem by discard the chunk if stream ID is not
    less than MIS.
    
    Signed-off-by: Wei Yongjun <yjwei@cn.fujitsu.com>
    Signed-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/net/sctp/sm_statefuns.c b/net/sctp/sm_statefuns.c
index a010dfef906e..f09e0322d3f4 100644
--- a/net/sctp/sm_statefuns.c
+++ b/net/sctp/sm_statefuns.c
@@ -3569,6 +3569,7 @@ sctp_disposition_t sctp_sf_eat_fwd_tsn(const struct sctp_endpoint *ep,
 {
 	struct sctp_chunk *chunk = arg;
 	struct sctp_fwdtsn_hdr *fwdtsn_hdr;
+	struct sctp_fwdtsn_skip *skip;
 	__u16 len;
 	__u32 tsn;
 
@@ -3598,6 +3599,12 @@ sctp_disposition_t sctp_sf_eat_fwd_tsn(const struct sctp_endpoint *ep,
 	if (sctp_tsnmap_check(&asoc->peer.tsn_map, tsn) < 0)
 		goto discard_noforce;
 
+	/* Silently discard the chunk if stream-id is not valid */
+	sctp_walk_fwdtsn(skip, chunk) {
+		if (ntohs(skip->stream) >= asoc->c.sinit_max_instreams)
+			goto discard_noforce;
+	}
+
 	sctp_add_cmd_sf(commands, SCTP_CMD_REPORT_FWDTSN, SCTP_U32(tsn));
 	if (len > sizeof(struct sctp_fwdtsn_hdr))
 		sctp_add_cmd_sf(commands, SCTP_CMD_PROCESS_FWDTSN,
@@ -3629,6 +3636,7 @@ sctp_disposition_t sctp_sf_eat_fwd_tsn_fast(
 {
 	struct sctp_chunk *chunk = arg;
 	struct sctp_fwdtsn_hdr *fwdtsn_hdr;
+	struct sctp_fwdtsn_skip *skip;
 	__u16 len;
 	__u32 tsn;
 
@@ -3658,6 +3666,12 @@ sctp_disposition_t sctp_sf_eat_fwd_tsn_fast(
 	if (sctp_tsnmap_check(&asoc->peer.tsn_map, tsn) < 0)
 		goto gen_shutdown;
 
+	/* Silently discard the chunk if stream-id is not valid */
+	sctp_walk_fwdtsn(skip, chunk) {
+		if (ntohs(skip->stream) >= asoc->c.sinit_max_instreams)
+			goto gen_shutdown;
+	}
+
 	sctp_add_cmd_sf(commands, SCTP_CMD_REPORT_FWDTSN, SCTP_U32(tsn));
 	if (len > sizeof(struct sctp_fwdtsn_hdr))
 		sctp_add_cmd_sf(commands, SCTP_CMD_PROCESS_FWDTSN,
