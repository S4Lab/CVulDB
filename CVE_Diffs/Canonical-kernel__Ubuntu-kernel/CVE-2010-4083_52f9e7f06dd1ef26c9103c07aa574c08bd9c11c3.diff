Canonical-kernel__Ubuntu-kernel
commit 52f9e7f06dd1ef26c9103c07aa574c08bd9c11c3
Author:     Dan Rosenberg <drosenberg@vsecurity.com>
AuthorDate: Fri Feb 4 09:26:51 2011 -0800
Commit:     Brad Figg <brad.figg@canonical.com>
CommitDate: Wed Feb 9 14:30:38 2011 -0800

    sys_semctl: fix kernel stack leakage, CVE-2010-4083
    
    CVE-2010-4083
    
    BugLink: http://bugs.launchpad.net/bugs/712749
    
    The semctl syscall has several code paths that lead to the leakage of
    uninitialized kernel stack memory (namely the IPC_INFO, SEM_INFO,
    IPC_STAT, and SEM_STAT commands) during the use of the older, obsolete
    version of the semid_ds struct.
    
    The copy_semid_to_user() function declares a semid_ds struct on the stack
    and copies it back to the user without initializing or zeroing the
    "sem_base", "sem_pending", "sem_pending_last", and "undo" pointers,
    allowing the leakage of 16 bytes of kernel stack memory.
    
    The code is still reachable on 32-bit systems - when calling semctl()
    newer glibc's automatically OR the IPC command with the IPC_64 flag, but
    invoking the syscall directly allows users to use the older versions of
    the struct.
    
    Signed-off-by: Dan Rosenberg <dan.j.rosenberg@gmail.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    (cherry-picked from commit 982f7c2b2e6a28f8f266e075d92e19c0dd4c6e56)
    Signed-off-by: Brad Figg <brad.figg@canonical.com>
    Acked-by: Tim Gardner <tim.gardner@canonical.com>
    Acked-by: Stefan Bader <stefan.bader@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/ipc/sem.c b/ipc/sem.c
index 35952c0bae46..034d10b50eae 100644
--- a/ipc/sem.c
+++ b/ipc/sem.c
@@ -590,6 +590,8 @@ static unsigned long copy_semid_to_user(void __user *buf, struct semid64_ds *in,
 	    {
 		struct semid_ds out;
 
+		memset(&out, 0, sizeof(out));
+
 		ipc64_perm_to_ipc_perm(&in->sem_perm, &out.sem_perm);
 
 		out.sem_otime	= in->sem_otime;
