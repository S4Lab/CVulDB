Canonical-kernel__Ubuntu-kernel
commit b174ecc08d12fa6718c71dea62f32e429f45fbb7
Author:     David S. Miller <davem@davemloft.net>
AuthorDate: Wed Nov 10 21:35:37 2010 -0800
Commit:     Brad Figg <brad.figg@canonical.com>
CommitDate: Thu Jan 6 10:06:55 2011 -0800

    tcp: Increase TCP_MAXSEG socket option minimum.
    
    CVE-2010-4165
    
    As noted by Steve Chen, since commit
    f5fff5dc8a7a3f395b0525c02ba92c95d42b7390 ("tcp: advertise MSS
    requested by user") we can end up with a situation where
    tcp_select_initial_window() does a divide by a zero (or
    even negative) mss value.
    
    The problem is that sometimes we effectively subtract
    TCPOLEN_TSTAMP_ALIGNED and/or TCPOLEN_MD5SIG_ALIGNED from the mss.
    
    Fix this by increasing the minimum from 8 to 64.
    
    Reported-by: Steve Chen <schen@mvista.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Brad Figg <brad.figg@canonical.com>

diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 91145244ea63..d5f03c51d748 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -2071,7 +2071,7 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		/* Values greater than interface MTU won't take effect. However
 		 * at the point when this call is done we typically don't yet
 		 * know which interface is going to be used */
-		if (val < 8 || val > MAX_TCP_WINDOW) {
+		if (val < 64 || val > MAX_TCP_WINDOW) {
 			err = -EINVAL;
 			break;
 		}
