Canonical-kernel__Ubuntu-kernel
commit 2f458250b1c32d4c8255eded077f3dead2e1a1d0
Author:     Jiri Slaby <jslaby@suse.cz>
AuthorDate: Fri Jan 24 14:17:23 2014 +0000
Commit:     rtg <tim.gardner@canonical.com>
CommitDate: Mon Jan 27 12:47:23 2014 +0000

    TTY: do not update atime/mtime on read/write
    
    CVE-2013-0160
    
    BugLink: http://bugs.launchpad.net/bugs/1097680
    
    On http://vladz.devzero.fr/013_ptmx-timing.php, we can see how to find
    out length of a password using timestamps of /dev/ptmx. It is
    documented in "Timing Analysis of Keystrokes and Timing Attacks on
    SSH". To avoid that problem, do not update time when reading
    from/writing to a TTY.
    
    I am afraid of regressions as this is a behavior we have since 0.97
    and apps may expect the time to be current, e.g. for monitoring
    whether there was a change on the TTY. Now, there is no change. So
    this would better have a lot of testing before it goes upstream.
    
    References: CVE-2013-0160
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: stable <stable@vger.kernel.org> # after 3.9 is out
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    (back ported from commit b0de59b5733d18b0d1974a060860a8b5c1b36a2e)
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Acked-by: Andy Whitcroft <andy.whitcroft@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/drivers/char/tty_io.c b/drivers/char/tty_io.c
index 123cedf62cce..94236ca93ffe 100644
--- a/drivers/char/tty_io.c
+++ b/drivers/char/tty_io.c
@@ -894,8 +894,7 @@ static ssize_t tty_read(struct file *file, char __user *buf, size_t count,
 	else
 		i = -EIO;
 	tty_ldisc_deref(ld);
-	if (i > 0)
-		inode->i_atime = current_fs_time(inode->i_sb);
+
 	return i;
 }
 
@@ -994,11 +993,8 @@ static inline ssize_t do_tty_write(
 			break;
 		cond_resched();
 	}
-	if (written) {
-		struct inode *inode = file->f_path.dentry->d_inode;
-		inode->i_mtime = current_fs_time(inode->i_sb);
+	if (written)
 		ret = written;
-	}
 out:
 	tty_write_unlock(tty);
 	return ret;
