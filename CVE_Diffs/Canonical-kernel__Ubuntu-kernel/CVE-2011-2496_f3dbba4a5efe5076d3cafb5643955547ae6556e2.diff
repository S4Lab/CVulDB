Canonical-kernel__Ubuntu-kernel
commit f3dbba4a5efe5076d3cafb5643955547ae6556e2
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Wed Oct 12 13:02:53 2011 +0200
Commit:     Herton Ronaldo Krzesinski <herton.krzesinski@canonical.com>
CommitDate: Mon Nov 7 21:52:25 2011 -0200

    vm: fix vm_pgoff wrap in stack expansion - CVE-2011-2496
    
    Commit 982134ba6261 ("mm: avoid wrapping vm_pgoff in mremap()") fixed
    the case of a expanding mapping causing vm_pgoff wrapping when you used
    mremap.  But there was another case where we expand mappings hiding in
    plain sight: the automatic stack expansion.
    
    This fixes that case too.
    
    This one also found by Robert ÅwiÄcki, using his nasty system call
    fuzzer tool.  Good job.
    
    Reported-and-tested-by: Robert ÅwiÄcki <robert@swiecki.net>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
    CVE-2011-2496
    
    BugLink: http://bugs.launchpad.net/bugs/869243
    
    commit upstream a626ca6a656450e9f4df91d0dda238fff23285f4
    
    Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/mm/mmap.c b/mm/mmap.c
index 058c7056d763..745191a6a7f1 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1892,10 +1892,13 @@ static int expand_downwards(struct vm_area_struct *vma,
 		size = vma->vm_end - address;
 		grow = (vma->vm_start - address) >> PAGE_SHIFT;
 
-		error = acct_stack_growth(vma, size, grow);
-		if (!error) {
-			vma->vm_start = address;
-			vma->vm_pgoff -= grow;
+		error = -ENOMEM;
+		if (grow <= vma->vm_pgoff) {
+			error = acct_stack_growth(vma, size, grow);
+			if (!error) {
+				vma->vm_start = address;
+				vma->vm_pgoff -= grow;
+			}
 		}
 	}
 	anon_vma_unlock(vma);
