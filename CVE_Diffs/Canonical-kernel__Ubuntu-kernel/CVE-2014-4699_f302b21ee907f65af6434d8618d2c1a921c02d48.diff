Canonical-kernel__Ubuntu-kernel
commit f302b21ee907f65af6434d8618d2c1a921c02d48
Author:     Andy Lutomirski <luto@amacapital.net>
AuthorDate: Wed Jul 2 14:52:55 2014 -0700
Commit:     Luis Henriques <luis.henriques@canonical.com>
CommitDate: Fri Jul 4 11:24:03 2014 +0100

    x86_64,ptrace: Enforce RIP <= TASK_SIZE_MAX (CVE-2014-4699)
    
    Don't allow ptrace to set RIP to a value that couldn't happen by
    ordinary control flow. There are CPU bugs^Wfeatures that can have
    interesting effects if RIP is non-canonical.
    
    I didn't make the corresponding x86_32 change, since x86_32 has no
    concept of canonical addresses.
    
    putreg32 doesn't need this fix: value is only 32 bits, so it can't
    be non-canonical.
    
    Fixes CVE-2014-4699.  There are arguably still bugs here, but this
    fixes the major issue.
    
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    CVE-2014-4699
    BugLink: http://bugs.launchpad.net/bugs/1337339
    Acked-by: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

diff --git a/arch/x86/kernel/ptrace.c b/arch/x86/kernel/ptrace.c
index 8659c9e819ca..011d41e8c973 100644
--- a/arch/x86/kernel/ptrace.c
+++ b/arch/x86/kernel/ptrace.c
@@ -449,6 +449,20 @@ static int putreg(struct task_struct *child,
 		if (child->thread.gs != value)
 			return do_arch_prctl(child, ARCH_SET_GS, value);
 		return 0;
+
+	case offsetof(struct user_regs_struct,ip):
+		/*
+		 * Protect against any attempt to set ip to an
+		 * impossible address.  There are dragons lurking if the
+		 * address is noncanonical.  (This explicitly allows
+		 * setting ip to TASK_SIZE_MAX, because user code can do
+		 * that all by itself by running off the end of its
+		 * address space.
+		 */
+		if (value > TASK_SIZE_MAX)
+			return -EIO;
+		break;
+
 #endif
 	}
 
