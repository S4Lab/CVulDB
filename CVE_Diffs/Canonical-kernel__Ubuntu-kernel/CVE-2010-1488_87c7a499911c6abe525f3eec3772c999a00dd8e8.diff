Canonical-kernel__Ubuntu-kernel
commit 87c7a499911c6abe525f3eec3772c999a00dd8e8
Author:     Oleg Nesterov <oleg@redhat.com>
AuthorDate: Thu Apr 1 15:13:57 2010 +0200
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue May 25 19:29:51 2010 +0000

    oom: fix the unsafe usage of badness() in proc_oom_score()
    
    CVE-2010-1488
    
    proc_oom_score(task) has a reference to task_struct, but that is all.
    If this task was already released before we take tasklist_lock
    
            - we can't use task->group_leader, it points to nowhere
    
            - it is not safe to call badness() even if this task is
              ->group_leader, has_intersects_mems_allowed() assumes
              it is safe to iterate over ->thread_group list.
    
            - even worse, badness() can hit ->signal == NULL
    
    Add the pid_alive() check to ensure __unhash_process() was not called.
    
    Also, use "task" instead of task->group_leader. badness() should return
    the same result for any sub-thread. Currently this is not true, but
    this should be changed anyway.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    (cherry picked from commit b95c35e76b29ba812e5dabdd91592e25ec640e93 upstream)
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/fs/proc/base.c b/fs/proc/base.c
index 58324c299165..3cd449d23352 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -442,12 +442,13 @@ static const struct file_operations proc_lstats_operations = {
 unsigned long badness(struct task_struct *p, unsigned long uptime);
 static int proc_oom_score(struct task_struct *task, char *buffer)
 {
-	unsigned long points;
+	unsigned long points = 0;
 	struct timespec uptime;
 
 	do_posix_clock_monotonic_gettime(&uptime);
 	read_lock(&tasklist_lock);
-	points = badness(task->group_leader, uptime.tv_sec);
+	if (pid_alive(task))
+		points = badness(task, uptime.tv_sec);
 	read_unlock(&tasklist_lock);
 	return sprintf(buffer, "%lu\n", points);
 }
