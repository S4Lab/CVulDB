Canonical-kernel__Ubuntu-kernel
commit 9759e51c7df5eaab9e7e95301ed0e834e50d632b
Author:     Leann Ogasawara <leann.ogasawara@canonical.com>
AuthorDate: Tue Jan 19 17:45:07 2010 -0800
Commit:     Andy Whitcroft <apw@canonical.com>
CommitDate: Mon Jan 25 19:53:41 2010 +0000

    UBUNTU: [Upstream] e1000e: enhance frame fragment detection
    
    CVE-2009-4538
    
    OriginalAuthor: Neil Horman <nhorman@redhat.com>
    
    Very similar to the fix we did for CVE-2009-4536.  In this case we
    apply it to the e1000e driver.  The original description of the
    discussion can be found at
    http://marc.info/?l=linux-netdev&m=126203101730472&w=2
    
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>
    Signed-off-by: Andy Whitcroft <apw@canonical.com>

diff --git a/drivers/net/e1000e/e1000.h b/drivers/net/e1000e/e1000.h
index 3e187b0e4203..69b9d73ed719 100644
--- a/drivers/net/e1000e/e1000.h
+++ b/drivers/net/e1000e/e1000.h
@@ -428,7 +428,8 @@ struct e1000_info {
 enum e1000_state_t {
 	__E1000_TESTING,
 	__E1000_RESETTING,
-	__E1000_DOWN
+	__E1000_DOWN,
+	__E1000_DISCARDING
 };
 
 enum latency_range {
diff --git a/drivers/net/e1000e/netdev.c b/drivers/net/e1000e/netdev.c
index 0eb45a38d589..27e057dbaf25 100644
--- a/drivers/net/e1000e/netdev.c
+++ b/drivers/net/e1000e/netdev.c
@@ -483,13 +483,22 @@ static bool e1000_clean_rx_irq(struct e1000_adapter *adapter,
 		length = le16_to_cpu(rx_desc->length);
 
 		/* !EOP means multiple descriptors were used to store a single
-		 * packet, also make sure the frame isn't just CRC only */
-		if (!(status & E1000_RXD_STAT_EOP) || (length <= 4)) {
+		 * packet, if thats the case we need to toss it.  In fact, we
+		 * to toss every packet with the EOP bit clear and the next
+		 * frame that _does_ have the EOP bit set, as it is by
+		 * definition only a frame fragment
+		 */
+		if (unlikely(!(status & E1000_RXD_STAT_EOP)))
+			set_bit(__E1000_DISCARDING, &adapter->flags);
+
+		if (test_bit(__E1000_DISCARDING, &adapter->flags)) {
 			/* All receives must fit into a single buffer */
 			e_dbg("%s: Receive packet consumed multiple buffers\n",
 			      netdev->name);
 			/* recycle */
 			buffer_info->skb = skb;
+			if (status & E1000_RXD_STAT_EOP)
+				clear_bit(__E1000_DISCARDING, &adapter->flags);
 			goto next_desc;
 		}
 
