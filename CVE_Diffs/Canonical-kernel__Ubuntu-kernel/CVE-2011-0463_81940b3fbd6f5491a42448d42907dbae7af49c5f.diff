Canonical-kernel__Ubuntu-kernel
commit 81940b3fbd6f5491a42448d42907dbae7af49c5f
Author:     Goldwyn Rodrigues <rgoldwyn@gmail.com>
AuthorDate: Thu Feb 17 09:44:40 2011 -0600
Commit:     Paolo Pisati <paolo.pisati@canonical.com>
CommitDate: Thu Jun 9 16:43:48 2011 +0200

    Treat writes as new when holes span across page boundaries - CVE-2011-0463
    
    BugLink: http://bugs.launchpad.net/bugs/770483
    
    commit 272b62c1f0f6f742046e45b50b6fec98860208a0 upstream.
    
    When a hole spans across page boundaries, the next write forces
    a read of the block. This could end up reading existing garbage
    data from the disk in ocfs2_map_page_blocks. This leads to
    non-zero holes. In order to avoid this, mark the writes as new
    when the holes span across page boundaries.
    
    CVE-2011-0463
    Signed-off-by: Goldwyn Rodrigues <rgoldwyn@suse.de>
    Signed-off-by: jlbec <jlbec@evilplan.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
    Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>

diff --git a/fs/ocfs2/aops.c b/fs/ocfs2/aops.c
index 8a1e61545f41..a8bbf8c5dc39 100644
--- a/fs/ocfs2/aops.c
+++ b/fs/ocfs2/aops.c
@@ -1083,6 +1083,12 @@ static int ocfs2_prepare_page_for_write(struct inode *inode, u64 *p_blkno,
 	ocfs2_figure_cluster_boundaries(OCFS2_SB(inode->i_sb), cpos,
 					&cluster_start, &cluster_end);
 
+	/* treat the write as new if the a hole/lseek spanned across
+	 * the page boundary.
+	 */
+	new = new | ((i_size_read(inode) <= page_offset(page)) &&
+			(page_offset(page) <= user_pos));
+
 	if (page == wc->w_target_page) {
 		map_from = user_pos & (PAGE_CACHE_SIZE - 1);
 		map_to = map_from + user_len;
