Canonical-kernel__Ubuntu-kernel
commit 808d6f9477c881f24df411cc40ec860a5f6f14bc
Author:     Michael S. Tsirkin <mst@redhat.com>
AuthorDate: Fri Jun 13 12:12:28 2014 +0100
Commit:     Kamal Mostafa <kamal@canonical.com>
CommitDate: Wed Jun 25 09:46:55 2014 -0700

    skbuff: skb_segment: orphan frags before copying
    
    BugLink: http://bugs.launchpad.net/bugs/1333900
    
    commit 1fd819ecb90cc9b822cd84d3056ddba315d3340f upstream.
    
    skb_segment copies frags around, so we need
    to copy them carefully to avoid accessing
    user memory after reporting completion to userspace
    through a callback.
    
    skb_segment doesn't normally happen on datapath:
    TSO needs to be disabled - so disabling zero copy
    in this case does not look like a big deal.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    (back ported from commit 1fd819ecb90cc9b822cd84d3056ddba315d3340f)
    CVE-2014-0131
    BugLink: http://bugs.launchpad.net/bugs/1298119
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Signed-off-by: Kamal Mostafa <kamal@canonical.com>
    Signed-off-by: Joseph Salisbury <joseph.salisbury@canonical.com>

diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index f97fe58501bc..1cee7e380b7f 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -2826,6 +2826,9 @@ struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features)
 						 skb_put(nskb, hsize), hsize);
 
 		while (pos < offset + len && i < nfrags) {
+			if (unlikely(skb_orphan_frags(skb, GFP_ATOMIC)))
+				goto err;
+
 			*frag = skb_shinfo(skb)->frags[i];
 			__skb_frag_ref(frag);
 			size = skb_frag_size(frag);
