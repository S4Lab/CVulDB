Canonical-kernel__Ubuntu-kernel
commit fbd476b6406323ee988fa13db946fa0f3d27d24b
Author:     Stefan Bader <stefan.bader@canonical.com>
AuthorDate: Fri Mar 5 19:30:41 2010 +0100
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Wed Mar 10 17:09:39 2010 +0100

    UBUNTU: openvz: Remove TIF_ABI_PENDING bit
    
    CVE-2010-0307
    
    As TIF_ABI_PENDING has been removed from the kernel the openvz patch had
    to be adapted.
    
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/debian/binary-custom.d/openvz/patchset/0001-2.6.24-ovz002.patch b/debian/binary-custom.d/openvz/patchset/0001-2.6.24-ovz002.patch
index efd6c90cfcdf..7a146eee0443 100644
--- a/debian/binary-custom.d/openvz/patchset/0001-2.6.24-ovz002.patch
+++ b/debian/binary-custom.d/openvz/patchset/0001-2.6.24-ovz002.patch
@@ -8960,7 +8960,7 @@ Index: kernel/fs/exec.c
  
  		tsk->group_leader = tsk;
  		leader->group_leader = tsk;
-@@ -989,12 +1020,10 @@
+@@ -987,11 +1018,10 @@
  	/*
  	 * Release all of the old mmap stuff
  	 */
@@ -8970,10 +8970,9 @@ Index: kernel/fs/exec.c
  		goto mmap_failed;
  
 -	bprm->mm = NULL;		/* We're using it now */
--
- 	/* This is the point of no return */
- 	put_files_struct(files);
- 
+	put_files_struct(files);
+
+	current->flags &= ~PF_RANDOMIZE;
 @@ -1298,6 +1327,10 @@
  	unsigned long env_p;
  	int retval;
@@ -21550,7 +21549,7 @@ Index: kernel/include/asm-sparc64/thread_info.h
  
  #define free_thread_info(ti) \
 @@ -236,6 +236,7 @@
- #define TIF_ABI_PENDING		12
+  */
  #define TIF_MEMDIE		13
  #define TIF_POLLING_NRFLAG	14
 +#define TIF_FREEZE		15	/* Freeze request (atomic PF_FREEZE) */
@@ -48848,7 +48847,7 @@ Index: kernel/kernel/cpt/cpt_process.c
 +	v->cpt_64bit = 0;
 +#ifdef CONFIG_X86_64
 +	/* Clear x86_64 specific flags */
-+	v->cpt_thrflags &= ~(_TIF_FORK|_TIF_ABI_PENDING|_TIF_IA32);
++	v->cpt_thrflags &= ~(_TIF_FORK|_TIF_IA32);
 +	if (!(task_thread_info(tsk)->flags & _TIF_IA32)) {
 +		ctx->tasks64++;
 +		v->cpt_64bit = 1;
@@ -48856,7 +48855,7 @@ Index: kernel/kernel/cpt/cpt_process.c
 +#endif
 +#ifdef CONFIG_IA64
 +	/* Clear ia64 specific flags */
-+	//// v->cpt_thrflags &= ~(_TIF_FORK|_TIF_ABI_PENDING|_TIF_IA32);
++	//// v->cpt_thrflags &= ~(_TIF_FORK||_TIF_IA32);
 +	if (!IS_IA32_PROCESS(task_pt_regs(tsk))) {
 +		ctx->tasks64++;
 +		v->cpt_64bit = 1;
