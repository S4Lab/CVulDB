Canonical-kernel__Ubuntu-kernel
commit 2caa725f071cc61d40aea5bb87a951b02e789a85
Author:     Akinobu Mita <akinobu.mita@gmail.com>
AuthorDate: Wed Sep 22 13:35:07 2010 -0500
Commit:     Steve Conklin <sconklin@canonical.com>
CommitDate: Wed Oct 6 16:08:54 2010 +0100

    ext4: consolidate in_range() definitions
    
    CVE-2010-3015
    
    Adapted by hand from upstream commit 731eb1a03a8445cde2cb23ecfb3580c6fa7bb690
    
    Only fs/ext4/extents.c was affected in this release
    
    Original commit test follows:
    
    There are duplicate macro definitions of in_range() in mballoc.h and
    balloc.c.  This consolidates these two definitions into ext4.h, and
    changes extents.c to use in_range() as well.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: Andreas Dilger <adilger@sun.com>
    Signed-off-by: Steve Conklin <sconklin@canonical.com>

diff --git a/fs/ext4/extents.c b/fs/ext4/extents.c
index 85287742f2ae..b31307118747 100644
--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -1614,7 +1614,7 @@ ext4_ext_in_cache(struct inode *inode, unsigned long block,
 
 	BUG_ON(cex->ec_type != EXT4_EXT_CACHE_GAP &&
 			cex->ec_type != EXT4_EXT_CACHE_EXTENT);
-	if (block >= cex->ec_block && block < cex->ec_block + cex->ec_len) {
+	if (in_range(block, cex->ec_block, cex->ec_len)) {
 		ex->ee_block = cpu_to_le32(cex->ec_block);
 		ext4_ext_store_pblock(ex, cex->ec_start);
 		ex->ee_len = cpu_to_le16(cex->ec_len);
@@ -2298,7 +2298,7 @@ int ext4_ext_get_blocks(handle_t *handle, struct inode *inode,
 		 */
 		ee_len = ext4_ext_get_actual_len(ex);
 		/* if found extent covers block, simply return it */
-		if (iblock >= ee_block && iblock < ee_block + ee_len) {
+		if (in_range(iblock, ee_block, ee_len)) {
 			newblock = iblock - ee_block + ee_start;
 			/* number of remaining blocks in the extent */
 			allocated = ee_len - (iblock - ee_block);
