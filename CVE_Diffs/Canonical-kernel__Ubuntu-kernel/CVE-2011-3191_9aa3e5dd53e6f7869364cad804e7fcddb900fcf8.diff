Canonical-kernel__Ubuntu-kernel
commit 9aa3e5dd53e6f7869364cad804e7fcddb900fcf8
Author:     Jeff Layton <jlayton@redhat.com>
AuthorDate: Tue Sep 13 14:24:01 2011 +0100
Commit:     Tim Gardner <tim.gardner@canonical.com>
CommitDate: Tue Sep 13 07:35:37 2011 -0600

    cifs: fix possible memory corruption in CIFSFindNext, CVE-2011-3191
    
    The name_len variable in CIFSFindNext is a signed int that gets set to
    the resume_name_len in the cifs_search_info. The resume_name_len however
    is unsigned and for some infolevels is populated directly from a 32 bit
    value sent by the server.
    
    If the server sends a very large value for this, then that value could
    look negative when converted to a signed int. That would make that
    value pass the PATH_MAX check later in CIFSFindNext. The name_len would
    then be used as a length value for a memcpy. It would then be treated
    as unsigned again, and the memcpy scribbles over a ton of memory.
    
    Fix this by making the name_len an unsigned value in CIFSFindNext.
    
    Cc: <stable@kernel.org>
    Reported-by: Darren Lavender <dcl@hppine99.gbr.hp.com>
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>
    Signed-off-by: Suresh Jayaraman <sjayaraman@suse.de>
    
    (backported from commit c32dfffaf59f73bbcf4472141b851a4dc5db2bf0 cifs-2.6.git)
    CVE-2011-3191
    BugLink: http://bugs.launchpad.net/bugs/834135
    Signed-off-by: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/fs/cifs/cifssmb.c b/fs/cifs/cifssmb.c
index 4d1bc38c297f..b1439424628d 100644
--- a/fs/cifs/cifssmb.c
+++ b/fs/cifs/cifssmb.c
@@ -3658,7 +3658,8 @@ int CIFSFindNext(const int xid, struct cifsTconInfo *tcon,
 	T2_FNEXT_RSP_PARMS *parms;
 	char *response_data;
 	int rc = 0;
-	int bytes_returned, name_len;
+	int bytes_returned;
+	unsigned int name_len;
 	__u16 params, byte_count;
 
 	cFYI(1, ("In FindNext"));
