Canonical-kernel__Ubuntu-kernel
commit 7e2cdcbba62e89edbb6d6ac5d7ea5cf7aa4d1134
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Sat Aug 1 10:34:56 2009 -0700
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Wed Oct 14 17:22:19 2009 +0200

    do_sigaltstack: avoid copying 'stack_t' as a structure to user space
    
    CVE-2009-2847
    
    commit 0083fc2c50e6c5127c2802ad323adf8143ab7856 upstream
    
    Ulrich Drepper correctly points out that there is generally padding in
    the structure on 64-bit hosts, and that copying the structure from
    kernel to user space can leak information from the kernel stack in those
    padding bytes.
    
    Avoid the whole issue by just copying the three members one by one
    instead, which also means that the function also can avoid the need for
    a stack frame.  This also happens to match how we copy the new structure
    from user space, so it all even makes sense.
    
    [ The obvious solution of adding a memset() generates horrid code, gcc
      does really stupid things. ]
    
    Reported-by: Ulrich Drepper <drepper@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>

diff --git a/kernel/signal.c b/kernel/signal.c
index 1067310e9b94..3dbeb603a5e3 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -2359,11 +2359,9 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 	stack_t oss;
 	int error;
 
-	if (uoss) {
-		oss.ss_sp = (void __user *) current->sas_ss_sp;
-		oss.ss_size = current->sas_ss_size;
-		oss.ss_flags = sas_ss_flags(sp);
-	}
+	oss.ss_sp = (void __user *) current->sas_ss_sp;
+	oss.ss_size = current->sas_ss_size;
+	oss.ss_flags = sas_ss_flags(sp);
 
 	if (uss) {
 		void __user *ss_sp;
@@ -2406,13 +2404,16 @@ do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s
 		current->sas_ss_size = ss_size;
 	}
 
+	error = 0;
 	if (uoss) {
 		error = -EFAULT;
-		if (copy_to_user(uoss, &oss, sizeof(oss)))
+		if (!access_ok(VERIFY_WRITE, uoss, sizeof(*uoss)))
 			goto out;
+		error = __put_user(oss.ss_sp, &uoss->ss_sp) |
+			__put_user(oss.ss_size, &uoss->ss_size) |
+			__put_user(oss.ss_flags, &uoss->ss_flags);
 	}
 
-	error = 0;
 out:
 	return error;
 }
