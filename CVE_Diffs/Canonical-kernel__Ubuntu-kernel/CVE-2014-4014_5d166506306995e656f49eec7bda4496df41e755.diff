Canonical-kernel__Ubuntu-kernel
commit 5d166506306995e656f49eec7bda4496df41e755
Author:     Eric W. Biederman <ebiederm@xmission.com>
AuthorDate: Sun Sep 2 19:12:51 2012 -0700
Commit:     Brad Figg <brad.figg@canonical.com>
CommitDate: Wed Jun 25 08:52:41 2014 -0700

    userns: Allow chown and setgid preservation
    
    - Allow chown if CAP_CHOWN is present in the current user namespace
      and the uid of the inode maps into the current user namespace, and
      the destination uid or gid maps into the current user namespace.
    
    - Allow perserving setgid when changing an inode if CAP_FSETID is
      present in the current user namespace and the owner of the file has
      a mapping into the current user namespace.
    
    Acked-by: Serge E. Hallyn <serge.hallyn@ubuntu.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    (cherry picked from commit 7fa294c8991ce0ed4e713f08209eb2ce3e1044ac)
    CVE-2014-4014
    BugLink: http://bugs.launchpad.net/bugs/1329103
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/fs/attr.c b/fs/attr.c
index 0da90951d277..0c0d649dc261 100644
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -48,14 +48,15 @@ int inode_change_ok(const struct inode *inode, struct iattr *attr)
 	/* Make sure a caller can chown. */
 	if ((ia_valid & ATTR_UID) &&
 	    (!uid_eq(current_fsuid(), inode->i_uid) ||
-	     !uid_eq(attr->ia_uid, inode->i_uid)) && !capable(CAP_CHOWN))
+	     !uid_eq(attr->ia_uid, inode->i_uid)) &&
+	    !inode_capable(inode, CAP_CHOWN))
 		return -EPERM;
 
 	/* Make sure caller can chgrp. */
 	if ((ia_valid & ATTR_GID) &&
 	    (!uid_eq(current_fsuid(), inode->i_uid) ||
 	    (!in_group_p(attr->ia_gid) && !gid_eq(attr->ia_gid, inode->i_gid))) &&
-	    !capable(CAP_CHOWN))
+	    !inode_capable(inode, CAP_CHOWN))
 		return -EPERM;
 
 	/* Make sure a caller can chmod. */
@@ -64,7 +65,8 @@ int inode_change_ok(const struct inode *inode, struct iattr *attr)
 			return -EPERM;
 		/* Also check the setgid bit! */
 		if (!in_group_p((ia_valid & ATTR_GID) ? attr->ia_gid :
-				inode->i_gid) && !capable(CAP_FSETID))
+				inode->i_gid) &&
+		    !inode_capable(inode, CAP_FSETID))
 			attr->ia_mode &= ~S_ISGID;
 	}
 
@@ -156,7 +158,8 @@ void setattr_copy(struct inode *inode, const struct iattr *attr)
 	if (ia_valid & ATTR_MODE) {
 		umode_t mode = attr->ia_mode;
 
-		if (!in_group_p(inode->i_gid) && !capable(CAP_FSETID))
+		if (!in_group_p(inode->i_gid) &&
+		    !inode_capable(inode, CAP_FSETID))
 			mode &= ~S_ISGID;
 		inode->i_mode = mode;
 	}
