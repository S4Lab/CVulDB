Canonical-kernel__Ubuntu-kernel
commit 0eae3e639753d7743559b2888539dfa9e1d635b2
Author:     Paolo Pisati <paolo.pisati@canonical.com>
AuthorDate: Tue Oct 11 12:28:45 2011 +0200
Commit:     Tim Gardner <tim.gardner@canonical.com>
CommitDate: Mon Oct 24 08:45:24 2011 -0600

    nl80211: fix overflow in ssid_len - CVE-2011-2517
    
    When one of the SSID's length passed in a scan or sched_scan request
    is larger than 255, there will be an overflow in the u8 that is used
    to store the length before checking.  This causes the check to fail
    and we overrun the buffer when copying the SSID.
    
    Fix this by checking the nl80211 attribute length before copying it to
    the struct.
    
    This is a follow up for the previous commit
    208c72f4fe44fe09577e7975ba0e7fa0278f3d03, which didn't fix the problem
    entirely.
    
    BugLink: http://bugs.launchpad.net/bugs/869245
    CVE-2011-2517
    
    Backported from 57a27e1d6a3bb9ad4efeebd3a8c71156d6207536
    
    Reported-by: Ido Yariv <ido@wizery.com>
    Signed-off-by: Luciano Coelho <coelho@ti.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    
    Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
    Acked-by: Stefan Bader <stefan.bader@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index da657d823114..8c6a43047d05 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -3179,12 +3179,12 @@ static int nl80211_trigger_scan(struct sk_buff *skb, struct genl_info *info)
 	i = 0;
 	if (info->attrs[NL80211_ATTR_SCAN_SSIDS]) {
 		nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS], tmp) {
-			if (request->ssids[i].ssid_len > IEEE80211_MAX_SSID_LEN) {
+			if (nla_len(attr) > IEEE80211_MAX_SSID_LEN) {
 				err = -EINVAL;
 				goto out_free;
 			}
-			memcpy(request->ssids[i].ssid, nla_data(attr), nla_len(attr));
 			request->ssids[i].ssid_len = nla_len(attr);
+			memcpy(request->ssids[i].ssid, nla_data(attr), nla_len(attr));
 			i++;
 		}
 	}
