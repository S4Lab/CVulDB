Canonical-kernel__Ubuntu-kernel
commit b782c1160048625f9bf0fc3fe6e50ea8dda2e2b6
Author:     Eric Dumazet <eric.dumazet@gmail.com>
AuthorDate: Tue Jun 9 04:01:02 2009 -0700
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Fri Jul 24 14:29:03 2009 +0200

    r8169: fix crash when large packets are received
    
    CVE-2009-1389
    
    commit fdd7b4c3302c93f6833e338903ea77245eb510b4 upstream
    
    Michael Tokarev reported receiving a large packet could crash
    a machine with RTL8169 NIC.
    ( original thread at http://lkml.org/lkml/2009/6/8/192 )
    
    Problem is this driver tells that NIC frames up to 16383 bytes
    can be received but provides skb to rx ring allocated with
    smaller sizes (1536 bytes in case standard 1500 bytes MTU is used)
    
    When a frame larger than what was allocated by driver is received,
    dma transfert can occurs past the end of buffer and corrupt
    kernel memory.
    
    Fix is to tell to NIC what is the maximum size a frame can be.
    
    This bug is very old, (before git introduction, linux-2.6.10), and
    should be backported to stable versions.
    
    Reported-by: Michael Tokarev <mjt@tls.msk.ru>
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Tested-by: Michael Tokarev <mjt@tls.msk.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/drivers/net/r8169.c b/drivers/net/r8169.c
index 9e5e497c5e54..e76b7be2277c 100644
--- a/drivers/net/r8169.c
+++ b/drivers/net/r8169.c
@@ -82,7 +82,6 @@ static const int multicast_filter_limit = 32;
 #define RX_DMA_BURST	6	/* Maximum PCI burst, '6' is 1024 */
 #define TX_DMA_BURST	6	/* Maximum PCI burst, '6' is 1024 */
 #define EarlyTxThld	0x3F	/* 0x3F means NO early transmit */
-#define RxPacketMaxSize	0x3FE8	/* 16K - 1 - ETH_HLEN - VLAN - CRC... */
 #define SafeMtu		0x1c20	/* ... actually life sucks beyond ~7k */
 #define InterFrameGap	0x03	/* 3 means InterFrameGap = the shortest one */
 
@@ -2169,10 +2168,10 @@ static u16 rtl_rw_cpluscmd(void __iomem *ioaddr)
 	return cmd;
 }
 
-static void rtl_set_rx_max_size(void __iomem *ioaddr)
+static void rtl_set_rx_max_size(void __iomem *ioaddr, unsigned int rx_buf_sz)
 {
 	/* Low hurts. Let's disable the filtering. */
-	RTL_W16(RxMaxSize, 16383);
+	RTL_W16(RxMaxSize, rx_buf_sz);
 }
 
 static void rtl8169_set_magic_reg(void __iomem *ioaddr, unsigned mac_version)
@@ -2219,7 +2218,7 @@ static void rtl_hw_start_8169(struct net_device *dev)
 
 	RTL_W8(EarlyTxThres, EarlyTxThld);
 
-	rtl_set_rx_max_size(ioaddr);
+	rtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);
 
 	if ((tp->mac_version == RTL_GIGA_MAC_VER_01) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_02) ||
@@ -2322,7 +2321,7 @@ static void rtl_hw_start_8168(struct net_device *dev)
 
 	RTL_W8(EarlyTxThres, EarlyTxThld);
 
-	rtl_set_rx_max_size(ioaddr);
+	rtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);
 
 	rtl_set_rx_tx_config_registers(tp);
 
@@ -2453,7 +2452,7 @@ static void rtl_hw_start_8101(struct net_device *dev)
 
 	RTL_W8(EarlyTxThres, EarlyTxThld);
 
-	rtl_set_rx_max_size(ioaddr);
+	rtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);
 
 	tp->cp_cmd |= rtl_rw_cpluscmd(ioaddr) | PCIMulRW;
 
