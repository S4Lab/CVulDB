Canonical-kernel__Ubuntu-kernel
commit 799236c5307e687004daf91bc8f42cfd5c588e2c
Author:     Mikhail Ershov <Mike.Ershov@gmail.com>
AuthorDate: Wed Aug 19 14:08:07 2009 +0400
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue May 25 14:00:36 2010 +0200

    KVM: Use kvm_{read,write}_guest_virt() to read and write segment descriptors
    
    CVE-2010-0306
    CVE-2010-0298
    
    Segment descriptors tables can be placed on two non-contiguous pages.
    This patch makes reading segment descriptors by linear address.
    
    Signed-off-by: Mikhail Ershov <Mike.Ershov@gmail.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>
    (cherry-picked from commit d9048d3278ed4d395e63899257c3fa377693968b upstream)
    Signed-off-by: Surbhi Palande <surbhi.palande@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 26e454ccd0a8..03bda2efcadd 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -3730,7 +3730,6 @@ static void get_segment_descriptor_dtable(struct kvm_vcpu *vcpu,
 static int load_guest_segment_descriptor(struct kvm_vcpu *vcpu, u16 selector,
 					 struct desc_struct *seg_desc)
 {
-	gpa_t gpa;
 	struct descriptor_table dtable;
 	u16 index = selector >> 3;
 
@@ -3740,16 +3739,13 @@ static int load_guest_segment_descriptor(struct kvm_vcpu *vcpu, u16 selector,
 		kvm_queue_exception_e(vcpu, GP_VECTOR, selector & 0xfffc);
 		return 1;
 	}
-	gpa = vcpu->arch.mmu.gva_to_gpa(vcpu, dtable.base);
-	gpa += index * 8;
-	return kvm_read_guest(vcpu->kvm, gpa, seg_desc, 8);
+	return kvm_read_guest_virt(dtable.base + index*8, seg_desc, sizeof(*seg_desc), vcpu);
 }
 
 /* allowed just for 8 bytes segments */
 static int save_guest_segment_descriptor(struct kvm_vcpu *vcpu, u16 selector,
 					 struct desc_struct *seg_desc)
 {
-	gpa_t gpa;
 	struct descriptor_table dtable;
 	u16 index = selector >> 3;
 
@@ -3757,9 +3753,7 @@ static int save_guest_segment_descriptor(struct kvm_vcpu *vcpu, u16 selector,
 
 	if (dtable.limit < index * 8 + 7)
 		return 1;
-	gpa = vcpu->arch.mmu.gva_to_gpa(vcpu, dtable.base);
-	gpa += index * 8;
-	return kvm_write_guest(vcpu->kvm, gpa, seg_desc, 8);
+	return kvm_write_guest_virt(dtable.base + index*8, seg_desc, sizeof(*seg_desc), vcpu);
 }
 
 static gpa_t get_tss_base_addr(struct kvm_vcpu *vcpu,
