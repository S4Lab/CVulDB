Canonical-kernel__Ubuntu-kernel
commit 4f6000f246b56534b61cff7bd9ee5bb6ee738837
Author:     Miklos Szeredi <mszeredi@suse.cz>
AuthorDate: Thu May 1 04:34:45 2008 -0700
Commit:     Kees Cook <kees@outflux.net>
CommitDate: Tue Jun 24 15:12:18 2008 -0700

    (CVE-2008-2148) vfs: fix permission checking in sys_utimensat
    
    [linux-2.6: 02c6be615f1fcd37ac5ed93a3ad6692ad8991cd9]
    
    If utimensat() is called with both times set to UTIME_NOW or one of them to
    UTIME_NOW and the other to UTIME_OMIT, then it will update the file time
    without any permission checking.
    
    I don't think this can be used for anything other than a local DoS, but could
    be quite bewildering at that (e.g.  "Why was that large source tree rebuilt
    when I didn't modify anything???")
    
    This affects all kernels from 2.6.22, when the utimensat() syscall was
    introduced.
    
    Fix by doing the same permission checking as for the "times == NULL" case.
    
    Thanks to Michael Kerrisk, whose utimensat-non-conformances-and-fixes.patch in
    -mm also fixes this (and breaks other stuff), only he didn't realize the
    security implications of this bug.
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Cc: Ulrich Drepper <drepper@redhat.com>
    Cc: Michael Kerrisk <mtk-manpages@gmx.net>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Kees Cook <kees.cook@canonical.com>

diff --git a/fs/utimes.c b/fs/utimes.c
index b3931d22f532..8e72716b0264 100644
--- a/fs/utimes.c
+++ b/fs/utimes.c
@@ -38,9 +38,14 @@ asmlinkage long sys_utime(char __user *filename, struct utimbuf __user *times)
 
 #endif
 
+static bool nsec_special(long nsec)
+{
+	return nsec == UTIME_OMIT || nsec == UTIME_NOW;
+}
+
 static bool nsec_valid(long nsec)
 {
-	if (nsec == UTIME_OMIT || nsec == UTIME_NOW)
+	if (nsec_special(nsec))
 		return true;
 
 	return nsec >= 0 && nsec <= 999999999;
@@ -115,7 +120,15 @@ long do_utimes(int dfd, char __user *filename, struct timespec *times, int flags
 			newattrs.ia_mtime.tv_nsec = times[1].tv_nsec;
 			newattrs.ia_valid |= ATTR_MTIME_SET;
 		}
-	} else {
+	}
+
+	/*
+	 * If times is NULL or both times are either UTIME_OMIT or
+	 * UTIME_NOW, then need to check permissions, because
+	 * inode_change_ok() won't do it.
+	 */
+	if (!times || (nsec_special(times[0].tv_nsec) &&
+		       nsec_special(times[1].tv_nsec))) {
 		error = -EACCES;
                 if (IS_IMMUTABLE(inode))
                         goto dput_and_out;
