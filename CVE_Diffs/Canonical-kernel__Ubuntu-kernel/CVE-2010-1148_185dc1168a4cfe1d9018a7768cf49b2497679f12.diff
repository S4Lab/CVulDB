Canonical-kernel__Ubuntu-kernel
commit 185dc1168a4cfe1d9018a7768cf49b2497679f12
Author:     Shirish Pargaonkar <shirishpargaonkar@gmail.com>
AuthorDate: Wed Apr 7 16:19:10 2010 +0000
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue May 25 14:00:29 2010 +0200

    Attempt #2 to handle null nameidata
    
    CVE-2010-1148
    
    While creating a file on a server which supports unix extensions
    such as Samba, if a file is being created which does not supply
    nameidata (i.e. nd is null), cifs client can oops when calling
    cifs_posix_open.
    
    http://old.nabble.com/-linux-cifs-client--patch--Attempt--2-to-handle-null-nameidata-td28167381.html
    
    This is not yet merged upstream.
    
    Signed-off-by: Shirish Pargaonkar <shirishpargaonkar@gmail.com>
    Reported-by: Eugene Teo <eugeneteo@kernel.sg>
    Signed-off-by: Leann Ogasawara <leann.ogasawara@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/fs/cifs/dir.c b/fs/cifs/dir.c
index 965269041c31..52be8cdf2fe9 100644
--- a/fs/cifs/dir.c
+++ b/fs/cifs/dir.c
@@ -251,7 +251,8 @@ int cifs_posix_open(char *full_path, struct inode **pinode,
 		cifs_fattr_to_inode(*pinode, &fattr);
 	}
 
-	cifs_fill_fileinfo(*pinode, *pnetfid, cifs_sb->tcon, write_only);
+	if (cifs_sb->tcon)
+		cifs_fill_fileinfo(*pinode, *pnetfid, cifs_sb->tcon, write_only);
 
 posix_open_ret:
 	kfree(presp_data);
@@ -316,7 +317,7 @@ cifs_create(struct inode *inode, struct dentry *direntry, int mode,
 	if (nd && (nd->flags & LOOKUP_OPEN))
 		oflags = nd->intent.open.flags;
 	else
-		oflags = FMODE_READ;
+		oflags = FMODE_READ | SMB_O_CREAT;
 
 	if (tcon->unix_ext && (tcon->ses->capabilities & CAP_UNIX) &&
 	    (CIFS_UNIX_POSIX_PATH_OPS_CAP &
diff --git a/fs/cifs/file.c b/fs/cifs/file.c
index c34b7f8a217b..ca531e1a7fe9 100644
--- a/fs/cifs/file.c
+++ b/fs/cifs/file.c
@@ -325,6 +325,7 @@ int cifs_open(struct inode *inode, struct file *file)
 	    (CIFS_UNIX_POSIX_PATH_OPS_CAP &
 			le64_to_cpu(tcon->fsUnixInfo.Capability))) {
 		int oflags = (int) cifs_posix_convert_flags(file->f_flags);
+		oflags |= SMB_O_CREAT;
 		/* can not refresh inode info since size could be stale */
 		rc = cifs_posix_open(full_path, &inode, inode->i_sb,
 				     cifs_sb->mnt_file_mode /* ignored */,
