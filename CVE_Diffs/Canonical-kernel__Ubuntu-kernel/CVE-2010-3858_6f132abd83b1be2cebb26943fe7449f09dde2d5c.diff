Canonical-kernel__Ubuntu-kernel
commit 6f132abd83b1be2cebb26943fe7449f09dde2d5c
Author:     Roland McGrath <roland@redhat.com>
AuthorDate: Tue Sep 7 19:35:49 2010 -0700
Commit:     Tim Gardner <tim.gardner@canonical.com>
CommitDate: Wed Jun 8 08:07:42 2011 -0600

    setup_arg_pages: diagnose excessive argument size - CVE-2010-3858
    
    BugLink: http://bugs.launchpad.net/bugs/672664
    
    commit 1b528181b2ffa14721fb28ad1bd539fe1732c583 upstream.
    
    The CONFIG_STACK_GROWSDOWN variant of setup_arg_pages() does not
    check the size of the argument/environment area on the stack.
    When it is unworkably large, shift_arg_pages() hits its BUG_ON.
    This is exploitable with a very large RLIMIT_STACK limit, to
    create a crash pretty easily.
    
    Check that the initial stack is not too large to make it possible
    to map in any executable.  We're not checking that the actual
    executable (or intepreter, for binfmt_elf) will fit.  So those
    mappings might clobber part of the initial stack mapping.  But
    that is just userland lossage that userland made happen, not a
    kernel problem.
    
    CVE-2010-3858
    
    Signed-off-by: Roland McGrath <roland@redhat.com>
    Reviewed-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Chuck Ebbert <cebbert@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Brad Figg <brad.figg@canonical.com>
    Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/fs/exec.c b/fs/exec.c
index f98e38f773f1..fbd574bd4dae 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -622,6 +622,11 @@ int setup_arg_pages(struct linux_binprm *bprm,
 #else
 	stack_top = arch_align_stack(stack_top);
 	stack_top = PAGE_ALIGN(stack_top);
+
+	if (unlikely(stack_top < mmap_min_addr) ||
+	    unlikely(vma->vm_end - vma->vm_start >= stack_top - mmap_min_addr))
+		return -ENOMEM;
+
 	stack_shift = vma->vm_end - stack_top;
 
 	bprm->p -= stack_shift;
