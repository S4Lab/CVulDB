Canonical-kernel__Ubuntu-kernel
commit e116bf2cf7966a37de0e502471b09f36a4a1902d
Author:     Mikulas Patocka <mpatocka@redhat.com>
AuthorDate: Wed Mar 18 23:53:16 2009 -0700
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue Jun 16 15:12:22 2009 +0200

    sparc64: Fix crash with /proc/iomem
    
    CVE-2009-1914
    
    commit 192d7a4667c6d11d1a174ec4cad9a3c5d5f9043c upstream
    
    When you compile kernel on Sparc64 with heap memory checking and type
    "cat /proc/iomem", you get a crash, because pointers in struct
    resource are uninitialized.
    
    Most code fills struct resource with zeros, so I assume that it is
    responsibility of the caller of request_resource to initialized it,
    not the responsibility of request_resource functuion.
    
    After 2.6.29 is out, there could be a check for uninitialized fields
    added to request_resource to avoid crashes like this.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/arch/sparc64/kernel/pci_common.c b/arch/sparc64/kernel/pci_common.c
index 923e0bcc3bfd..1083c2f9da1c 100644
--- a/arch/sparc64/kernel/pci_common.c
+++ b/arch/sparc64/kernel/pci_common.c
@@ -374,7 +374,7 @@ static void pci_register_iommu_region(struct pci_pbm_info *pbm)
 	const u32 *vdma = of_get_property(pbm->prom_node, "virtual-dma", NULL);
 
 	if (vdma) {
-		struct resource *rp = kmalloc(sizeof(*rp), GFP_KERNEL);
+		struct resource *rp = kzalloc(sizeof(*rp), GFP_KERNEL);
 
 		if (!rp) {
 			prom_printf("Cannot allocate IOMMU resource.\n");
