Canonical-kernel__Ubuntu-kernel
commit c5d33537b0e188d6e5dc1ecfe5f6d05140756775
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Wed Jul 30 22:20:18 2008 +0000
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Fri Oct 10 10:44:20 2008 -0400

    Fix off-by-one error in iov_iter_advance()
    
    Bug: #231746
    CVE-2008-3535
    
    Picket from linux-2.6.26.y a6b79bb88e6682d2739aa5b4db7184038bbb32ce
    commit 94ad374a0751f40d25e22e036c37f7263569d24c upstream
    
    The iov_iter_advance() function would look at the iov->iov_len entry
    even though it might have iterated over the whole array, and iov was
    pointing past the end.  This would cause DEBUG_PAGEALLOC to trigger a
    kernel page fault if the allocation was at the end of a page, and the
    next page was unallocated.
    
    The quick fix is to just change the order of the tests: check that there
    is any iovec data left before we check the iov entry itself.
    
    Thanks to Alexey Dobriyan for finding this case, and testing the fix.
    
    Reported-and-tested-by: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/mm/filemap.c b/mm/filemap.c
index 61aeb24244d5..427208960430 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -1740,7 +1740,7 @@ void iov_iter_advance(struct iov_iter *i, size_t bytes)
 		 * The !iov->iov_len check ensures we skip over unlikely
 		 * zero-length segments (without overruning the iovec).
 		 */
-		while (bytes || unlikely(!iov->iov_len && i->count)) {
+		while (bytes || unlikely(i->count && !iov->iov_len)) {
 			int copy;
 
 			copy = min(bytes, iov->iov_len - base);
