Canonical-kernel__Ubuntu-kernel
commit 6a1284835c04269ee0378318dd28c56537aea3a2
Author:     Thomas Gleixner <tglx@linutronix.de>
AuthorDate: Tue Feb 2 11:40:27 2010 +0100
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Tue Mar 9 17:54:52 2010 +0100

    futex: Handle user space corruption gracefully
    
    CVE-2010-0622
    
    If the owner of a PI futex dies we fix up the pi_state and set
    pi_state->owner to NULL. When a malicious or just sloppy programmed
    user space application sets the futex value to 0 e.g. by calling
    pthread_mutex_init(), then the futex can be acquired again. A new
    waiter manages to enqueue itself on the pi_state w/o damage, but on
    unlock the kernel dereferences pi_state->owner and oopses.
    
    Prevent this by checking pi_state->owner in the unlock path. If
    pi_state->owner is not current we know that user space manipulated the
    futex value. Ignore the mess and return -EINVAL.
    
    This catches the above case and also the case where a task hijacks the
    futex by setting the tid value and then tries to unlock it.
    
    Reported-by: Jermome Marchand <jmarchan@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Darren Hart <dvhltc@us.ibm.com>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: <stable@kernel.org>
    (cherry-picked from 51246bfd189064079c54421507236fd2723b18f3 upstream)
    Signed-off-by: Surbhi Palande <surbhi.palande@canonical.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/kernel/futex.c b/kernel/futex.c
index d16608044664..6c896c7be5fb 100644
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@ -636,6 +636,13 @@ static int wake_futex_pi(u32 __user *uaddr, u32 uval, struct futex_q *this)
 	if (!pi_state)
 		return -EINVAL;
 
+	/*
+	 * If current does not own the pi_state then the futex is
+	 * inconsistent and user space fiddled with the futex value.
+	 */
+	if (pi_state->owner != current)
+		return -EINVAL;
+
 	spin_lock(&pi_state->pi_mutex.wait_lock);
 	new_owner = rt_mutex_next_owner(&pi_state->pi_mutex);
 
