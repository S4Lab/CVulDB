Canonical-kernel__Ubuntu-kernel
commit 89cbc5c6334feb44816fef5d64ae2b3be5dd3b07
Author:     Tyler Hicks <tyhicks@linux.vnet.ibm.com>
AuthorDate: Mon Jul 20 13:31:06 2009 -0500
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Fri Jul 24 14:29:05 2009 +0200

    eCryptfs: Check Tag 11 literal data buffer size
    
    CVE-2009-2406
    
    Tag 11 packets are stored in the metadata section of an eCryptfs file to
    store the key signature(s) used to encrypt the file encryption key.
    After extracting the packet length field to determine the key signature
    length, a check is not performed to see if the length would exceed the
    key signature buffer size that was passed into parse_tag_11_packet().
    
    Thanks to Ramon de Carvalho Valle for finding this bug using fsfuzzer.
    
    Signed-off-by: Tyler Hicks <tyhicks@linux.vnet.ibm.com>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/fs/ecryptfs/keystore.c b/fs/ecryptfs/keystore.c
index f458c1f35565..1f45a54d967a 100644
--- a/fs/ecryptfs/keystore.c
+++ b/fs/ecryptfs/keystore.c
@@ -870,6 +870,12 @@ parse_tag_11_packet(unsigned char *data, unsigned char *contents,
 		rc = -EINVAL;
 		goto out;
 	}
+	if (unlikely((*tag_11_contents_size) > max_contents_bytes)) {
+		printk(KERN_ERR "Literal data section in tag 11 packet exceeds "
+		       "expected size\n");
+		rc = -EINVAL;
+		goto out;
+	}
 	if (data[(*packet_size)++] != 0x62) {
 		printk(KERN_WARNING "Unrecognizable packet\n");
 		rc = -EINVAL;
