Canonical-kernel__Ubuntu-kernel
commit a136cd9a4bba90aea94380153810be74fdb37170
Author:     Linus Torvalds <torvalds@linux-foundation.org>
AuthorDate: Thu Apr 7 07:35:50 2011 -0700
Commit:     Tim Gardner <tim.gardner@canonical.com>
CommitDate: Mon Oct 24 10:06:53 2011 -0600

    mm: avoid wrapping vm_pgoff in mremap(), CVE-2011-2496
    
    commit 982134ba62618c2d69fbbbd166d0a11ee3b7e3d8 upstream.
    
    The normal mmap paths all avoid creating a mapping where the pgoff
    inside the mapping could wrap around due to overflow.  However, an
    expanding mremap() can take such a non-wrapping mapping and make it
    bigger and cause a wrapping condition.
    
    Noticed by Robert Swiecki when running a system call fuzzer, where it
    caused a BUG_ON() due to terminally confusing the vma_prio_tree code.  A
    vma dumping patch by Hugh then pinpointed the crazy wrapped case.
    
    Reported-and-tested-by: Robert Swiecki <robert@swiecki.net>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>
    
    CVE-2011-2496
    BugLink: http://bugs.launchpad.net/bugs/869243
    Signed-off-by: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/mm/mremap.c b/mm/mremap.c
index 4c65678e7a6d..003604e3154b 100644
--- a/mm/mremap.c
+++ b/mm/mremap.c
@@ -276,9 +276,16 @@ static struct vm_area_struct *vma_to_resize(unsigned long addr,
 	if (old_len > vma->vm_end - addr)
 		goto Efault;
 
-	if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP)) {
-		if (new_len > old_len)
+	/* Need to be careful about a growing mapping */
+	if (new_len > old_len) {
+		unsigned long pgoff;
+
+		if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP))
 			goto Efault;
+		pgoff = (addr - vma->vm_start) >> PAGE_SHIFT;
+		pgoff += vma->vm_pgoff;
+		if (pgoff + (new_len >> PAGE_SHIFT) < pgoff)
+			goto Einval;
 	}
 
 	if (vma->vm_flags & VM_LOCKED) {
