Canonical-kernel__Ubuntu-kernel
commit 9e94885e8e4b6d75da2b06daa7baedd8503e2721
Author:     Ian Campbell <ijc@hellion.org.uk>
AuthorDate: Wed Aug 20 14:09:23 2008 -0700
Commit:     Stefan Bader <stefan.bader@canonical.com>
CommitDate: Fri Oct 10 10:44:20 2008 -0400

    fbdefio: add set_page_dirty handler to deferred IO FB
    
    CVE-2008-3534
    
    commit d847471d063663b9f36927d265c66a270c0cfaab upstream
    
    Fixes kernel BUG at lib/radix-tree.c:473.
    
    Previously the handler was incidentally provided by tmpfs but this was
    removed with:
    
      commit 14fcc23fdc78e9d32372553ccf21758a9bd56fa1
      Author: Hugh Dickins <hugh@veritas.com>
      Date:   Mon Jul 28 15:46:19 2008 -0700
    
        tmpfs: fix kernel BUG in shmem_delete_inode
    
    relying on this behaviour was incorrect in any case and the BUG also
    appeared when the device node was on an ext3 filesystem.
    
    v2: override a_ops at open() time rather than mmap() time to minimise
    races per AKPM's concerns.
    
    Signed-off-by: Ian Campbell <ijc@hellion.org.uk>
    Cc: Jaya Kumar <jayakumar.lkml@gmail.com>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: Johannes Weiner <hannes@saeurebad.de>
    Cc: Jeremy Fitzhardinge <jeremy@goop.org>
    Cc: Kel Modderman <kel@otaku42.de>
    Cc: Markus Armbruster <armbru@redhat.com>
    Cc: Krzysztof Helt <krzysztof.h1@poczta.fm>
    Cc: <stable@kernel.org> [14fcc23fd is in 2.6.25.14 and 2.6.26.1]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Stefan Bader <stefan.bader@canonical.com>

diff --git a/drivers/video/fb_defio.c b/drivers/video/fb_defio.c
index a0c5d9d90d74..b29102b260c2 100644
--- a/drivers/video/fb_defio.c
+++ b/drivers/video/fb_defio.c
@@ -88,6 +88,17 @@ static struct vm_operations_struct fb_deferred_io_vm_ops = {
 	.page_mkwrite	= fb_deferred_io_mkwrite,
 };
 
+static int fb_deferred_io_set_page_dirty(struct page *page)
+{
+	if (!PageDirty(page))
+		SetPageDirty(page);
+	return 0;
+}
+
+static const struct address_space_operations fb_deferred_io_aops = {
+	.set_page_dirty = fb_deferred_io_set_page_dirty,
+};
+
 static int fb_deferred_io_mmap(struct fb_info *info, struct vm_area_struct *vma)
 {
 	vma->vm_ops = &fb_deferred_io_vm_ops;
@@ -137,6 +148,14 @@ void fb_deferred_io_init(struct fb_info *info)
 }
 EXPORT_SYMBOL_GPL(fb_deferred_io_init);
 
+void fb_deferred_io_open(struct fb_info *info,
+			 struct inode *inode,
+			 struct file *file)
+{
+	file->f_mapping->a_ops = &fb_deferred_io_aops;
+}
+EXPORT_SYMBOL_GPL(fb_deferred_io_open);
+
 void fb_deferred_io_cleanup(struct fb_info *info)
 {
 	struct fb_deferred_io *fbdefio = info->fbdefio;
diff --git a/drivers/video/fbmem.c b/drivers/video/fbmem.c
index 1194f5e060ea..93668cc1d383 100644
--- a/drivers/video/fbmem.c
+++ b/drivers/video/fbmem.c
@@ -1315,6 +1315,10 @@ fb_open(struct inode *inode, struct file *file)
 		if (res)
 			module_put(info->fbops->owner);
 	}
+#ifdef CONFIG_FB_DEFERRED_IO
+	if (info->fbdefio)
+		fb_deferred_io_open(info, inode, file);
+#endif
 	return res;
 }
 
diff --git a/include/linux/fb.h b/include/linux/fb.h
index 58c57a33e5dd..e1ee3453ff74 100644
--- a/include/linux/fb.h
+++ b/include/linux/fb.h
@@ -966,6 +966,9 @@ static inline void __fb_pad_aligned_buffer(u8 *dst, u32 d_pitch,
 
 /* drivers/video/fb_defio.c */
 extern void fb_deferred_io_init(struct fb_info *info);
+extern void fb_deferred_io_open(struct fb_info *info,
+				struct inode *inode,
+				struct file *file);
 extern void fb_deferred_io_cleanup(struct fb_info *info);
 extern int fb_deferred_io_fsync(struct file *file, struct dentry *dentry,
 				int datasync);
