Canonical-kernel__Ubuntu-kernel
commit 3ef4736e53bd603e80830b4778ea39baa94919fd
Author:     Jan Kara <jack@suse.cz>
AuthorDate: Wed Jun 27 20:20:22 2012 +0200
Commit:     Luis Henriques <luis.henriques@canonical.com>
CommitDate: Tue Aug 14 09:53:23 2012 +0100

    udf: Avoid run away loop when partition table length is corrupted
    
    BugLink: http://bugs.launchpad.net/bugs/1024497
    
    CVE-2012-3400
    
    Check provided length of partition table so that (possibly maliciously)
    corrupted partition table cannot cause accessing data beyond current buffer.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    (back ported picked from commit adee11b2085bee90bd8f4f52123ffb07882d6256)
    Signed-off-by: Steve Conklin <sconklin@canonical.com>
    Signed-off-by: Tim Gardner <tim.gardner@canonical.com>

diff --git a/fs/udf/super.c b/fs/udf/super.c
index 9a49d9a524c7..45dc3b588a24 100644
--- a/fs/udf/super.c
+++ b/fs/udf/super.c
@@ -1300,6 +1300,7 @@ static int udf_load_logicalvol(struct super_block *sb, sector_t block,
 	struct genericPartitionMap *gpm;
 	uint16_t ident;
 	struct buffer_head *bh;
+	unsigned int table_len;
 	int ret = 0;
 
 	bh = udf_read_tagged(sb, block, block, &ident);
@@ -1307,6 +1308,14 @@ static int udf_load_logicalvol(struct super_block *sb, sector_t block,
 		return 1;
 	BUG_ON(ident != TAG_IDENT_LVD);
 	lvd = (struct logicalVolDesc *)bh->b_data;
+	table_len = le32_to_cpu(lvd->mapTableLength);
+	if (sizeof(*lvd) + table_len > sb->s_blocksize) {
+		udf_error(sb, __func__,
+			"error loading logical volume descriptor: "
+			"Partition table too long (%u > %lu)\n", table_len,
+			sb->s_blocksize - sizeof(*lvd));
+		goto out_bh;
+	}
 
 	i = udf_sb_alloc_partition_maps(sb, le32_to_cpu(lvd->numPartitionMaps));
 	if (i != 0) {
@@ -1315,7 +1324,7 @@ static int udf_load_logicalvol(struct super_block *sb, sector_t block,
 	}
 
 	for (i = 0, offset = 0;
-	     i < sbi->s_partitions && offset < le32_to_cpu(lvd->mapTableLength);
+	     i < sbi->s_partitions && offset < table_len;
 	     i++, offset += gpm->partitionMapLength) {
 		struct udf_part_map *map = &sbi->s_partmaps[i];
 		gpm = (struct genericPartitionMap *)
