OP-TEE__optee_os
commit ae9208f1d34e0614965541d764a71529753000fc
Author:     Jens Wiklander <jens.wiklander@linaro.org>
AuthorDate: Tue Jan 30 12:34:52 2018 +0100
Commit:     Jérôme Forissier <jerome.forissier@linaro.org>
CommitDate: Tue Jan 30 15:23:38 2018 +0100

    arm32: enable ACTLR_CA8_ENABLE_INVALIDATE_BTB
    
    Enables ACTLR_CA8_ENABLE_INVALIDATE_BTB (ACTLR[6]) in generic boot if
    compiled with CFG_CORE_WORKAROUND_SPECTRE_BP or
    CFG_CORE_WORKAROUND_SPECTRE_BP_SEC and the cpu is discovered to be
    Cortex-A8.
    
    Fixes CVE-2017-5715
    Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

diff --git a/core/arch/arm/include/arm32.h b/core/arch/arm/include/arm32.h
index 2e007d1f..a063b93b 100644
--- a/core/arch/arm/include/arm32.h
+++ b/core/arch/arm/include/arm32.h
@@ -87,6 +87,8 @@
 
 /* Only valid for Cortex-A15 */
 #define ACTLR_CA15_ENABLE_INVALIDATE_BTB	BIT(0)
+/* Only valid for Cortex-A8 */
+#define ACTLR_CA8_ENABLE_INVALIDATE_BTB		BIT(6)
 
 #define ACTLR_SMP	BIT32(6)
 
diff --git a/core/arch/arm/kernel/generic_entry_a32.S b/core/arch/arm/kernel/generic_entry_a32.S
index c7ba0f50..32b002ff 100644
--- a/core/arch/arm/kernel/generic_entry_a32.S
+++ b/core/arch/arm/kernel/generic_entry_a32.S
@@ -208,7 +208,7 @@ END_FUNC reset_vect_table
 	mov	r7, r1
 	.endm
 
-	.macro maybe_init_ca15_spectre_workaround
+	.macro maybe_init_spectre_workaround
 #if !defined(CFG_WITH_ARM_TRUSTED_FW) && \
     (defined(CFG_CORE_WORKAROUND_SPECTRE_BP) || \
      defined(CFG_CORE_WORKAROUND_SPECTRE_BP_SEC))
@@ -218,11 +218,19 @@ END_FUNC reset_vect_table
 	bne	1f
 	ubfx	r1, r0, #MIDR_PRIMARY_PART_NUM_SHIFT, \
 			#MIDR_PRIMARY_PART_NUM_WIDTH
+
+	movw	r2, #CORTEX_A8_PART_NUM
+	cmp	r1, r2
+	moveq	r2, #ACTLR_CA8_ENABLE_INVALIDATE_BTB
+	beq	2f
+
 	movw	r2, #CORTEX_A15_PART_NUM
 	cmp	r1, r2
-	bne	1f
+	moveq	r2, #ACTLR_CA15_ENABLE_INVALIDATE_BTB
+	bne	1f	/* Skip it for all other CPUs */
+2:
 	read_actlr r0
-	orr	r0, r0, #ACTLR_CA15_ENABLE_INVALIDATE_BTB
+	orr	r0, r0, r2
 	write_actlr r0
 	isb
 1:
@@ -237,7 +245,7 @@ UNWIND(	.cantunwind)
 
 	/* Early ARM secure MP specific configuration */
 	bl	plat_cpu_reset_early
-	maybe_init_ca15_spectre_workaround
+	maybe_init_spectre_workaround
 
 	set_sctlr
 	isb
diff --git a/core/arch/arm/kernel/thread_a32.S b/core/arch/arm/kernel/thread_a32.S
index 9ab7200c..a96fcdea 100644
--- a/core/arch/arm/kernel/thread_a32.S
+++ b/core/arch/arm/kernel/thread_a32.S
@@ -812,6 +812,8 @@ exception_vector_a15:
 	bne	1f
 	/*
 	 * Invalidate the branch predictor for the current processor.
+	 * For Cortex-A8 ACTLR[6] has to be set to 1 for BPIALL to be
+	 * effective.
 	 * Note that the BPIALL instruction is not effective in
 	 * invalidating the branch predictor on Cortex-A15. For that CPU,
 	 * set ACTLR[0] to 1 during early processor initialisation, and
diff --git a/core/arch/arm/sm/sm_a32.S b/core/arch/arm/sm/sm_a32.S
index 4b850be7..20b98e2f 100644
--- a/core/arch/arm/sm/sm_a32.S
+++ b/core/arch/arm/sm/sm_a32.S
@@ -286,6 +286,8 @@ sm_vect_table_a15:
 	vector_prologue_spectre
 	/*
 	 * Invalidate the branch predictor for the current processor.
+	 * For Cortex-A8 ACTLR[6] has to be set to 1 for BPIALL to be
+	 * effective.
 	 * Note that the BPIALL instruction is not effective in
 	 * invalidating the branch predictor on Cortex-A15. For that CPU,
 	 * set ACTLR[0] to 1 during early processor initialisation, and
