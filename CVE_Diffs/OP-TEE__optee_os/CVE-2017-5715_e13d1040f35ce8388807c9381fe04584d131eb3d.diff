OP-TEE__optee_os
commit e13d1040f35ce8388807c9381fe04584d131eb3d
Author:     Jens Wiklander <jens.wiklander@linaro.org>
AuthorDate: Tue Apr 3 18:24:50 2018 +0200
Commit:     Jérôme Forissier <jerome.forissier@linaro.org>
CommitDate: Fri Apr 13 09:37:19 2018 +0200

    core: arm64: use SMCCC_ARCH_WORKAROUND_1
    
    Use SMCCC_ARCH_WORKAROUND_1 to implement CVE-2017-5715 in AArch64.
    Previous workarounds for CVE-2017-5715 haven't been fully effective.
    
    Fixes CVE-2017-5715
    Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
    Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
    Tested-by: Jerome Forissier <jerome.forissier@linaro.org> (HiKey960)
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

diff --git a/core/arch/arm/kernel/thread.c b/core/arch/arm/kernel/thread.c
index 7b009552..e1cd067e 100644
--- a/core/arch/arm/kernel/thread.c
+++ b/core/arch/arm/kernel/thread.c
@@ -46,6 +46,7 @@
 #include <mm/tee_mmu.h>
 #include <mm/tee_pager.h>
 #include <optee_msg.h>
+#include <smccc.h>
 #include <sm/optee_smc.h>
 #include <sm/sm.h>
 #include <tee/tee_cryp_utl.h>
@@ -958,6 +959,43 @@ static uint32_t __maybe_unused get_midr_primary_part(uint32_t midr)
 	       MIDR_PRIMARY_PART_NUM_MASK;
 }
 
+#ifdef ARM64
+static bool probe_workaround_available(void)
+{
+	int32_t r;
+
+	r = thread_smc(SMCCC_VERSION, 0, 0, 0);
+	if (r < 0)
+		return false;
+	if (r < 0x10001)	/* compare with version 1.1 */
+		return false;
+
+	/* Version >= 1.1, so SMCCC_ARCH_FEATURES is available */
+	r = thread_smc(SMCCC_ARCH_FEATURES, SMCCC_ARCH_WORKAROUND_1, 0, 0);
+	return r >= 0;
+}
+
+static vaddr_t select_vector(vaddr_t a)
+{
+	if (probe_workaround_available()) {
+		DMSG("SMCCC_ARCH_WORKAROUND_1 (%#08" PRIx32 ") available",
+		     SMCCC_ARCH_WORKAROUND_1);
+		DMSG("SMC Workaround for CVE-2017-5715 used");
+		return a;
+	}
+
+	DMSG("SMCCC_ARCH_WORKAROUND_1 (%#08" PRIx32 ") unavailable",
+	     SMCCC_ARCH_WORKAROUND_1);
+	DMSG("SMC Workaround for CVE-2017-5715 not needed (if ARM-TF is up to date)");
+	return (vaddr_t)thread_excp_vect;
+}
+#else
+static vaddr_t select_vector(vaddr_t a)
+{
+	return a;
+}
+#endif
+
 static vaddr_t get_excp_vect(void)
 {
 #ifdef CFG_CORE_WORKAROUND_SPECTRE_BP_SEC
@@ -976,10 +1014,10 @@ static vaddr_t get_excp_vect(void)
 	case CORTEX_A72_PART_NUM:
 	case CORTEX_A73_PART_NUM:
 	case CORTEX_A75_PART_NUM:
-		return (vaddr_t)thread_excp_vect_workaround;
+		return select_vector((vaddr_t)thread_excp_vect_workaround);
 #ifdef ARM32
 	case CORTEX_A15_PART_NUM:
-		return (vaddr_t)thread_excp_vect_workaround_a15;
+		return select_vector((vaddr_t)thread_excp_vect_workaround_a15);
 #endif
 	default:
 		return (vaddr_t)thread_excp_vect;
diff --git a/core/arch/arm/kernel/thread_a64.S b/core/arch/arm/kernel/thread_a64.S
index 861d6cbb..276aebfa 100644
--- a/core/arch/arm/kernel/thread_a64.S
+++ b/core/arch/arm/kernel/thread_a64.S
@@ -3,13 +3,14 @@
  * Copyright (c) 2015-2017, Linaro Limited
  */
 
-#include <arm64_macros.S>
 #include <arm.h>
+#include <arm64_macros.S>
 #include <asm.S>
 #include <generated/asm-defines.h>
 #include <keep.h>
 #include <kernel/thread_defs.h>
 #include <mm/core_mmu.h>
+#include <smccc.h>
 #include <sm/optee_smc.h>
 #include <sm/teesmc_opteed.h>
 #include <sm/teesmc_opteed_macros.h>
@@ -524,8 +525,10 @@ el0_serror_a32:
 
 #if defined(CFG_CORE_WORKAROUND_SPECTRE_BP_SEC)
 	.macro invalidate_branch_predictor
-	ic	iallu
-	isb
+		store_xregs sp, THREAD_CORE_LOCAL_X0, 0, 3
+		mov_imm	x0, SMCCC_ARCH_WORKAROUND_1
+		smc	#0
+		load_xregs sp, THREAD_CORE_LOCAL_X0, 0, 3
 	.endm
 
 	.align	11, INV_INSN
