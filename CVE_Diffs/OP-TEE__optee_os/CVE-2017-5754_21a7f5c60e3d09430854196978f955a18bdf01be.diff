OP-TEE__optee_os
commit 21a7f5c60e3d09430854196978f955a18bdf01be
Author:     Jens Wiklander <jens.wiklander@linaro.org>
AuthorDate: Wed Dec 13 12:30:50 2017 +0100
Commit:     Jérôme Forissier <jerome.forissier@linaro.org>
CommitDate: Wed Jan 10 14:34:51 2018 +0100

    core: make all mapping non-global
    
    Makes all mapping non-global to avoid the otherwise required tlb
    invalidation when switching to user mode.
    
    This change makes the fix for CVE-2017-5754 complete.
    
    Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
    Acked-by: Andrew Davis <andrew.davis@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

diff --git a/core/arch/arm/mm/core_mmu.c b/core/arch/arm/mm/core_mmu.c
index 75b6e99d..87735cf1 100644
--- a/core/arch/arm/mm/core_mmu.c
+++ b/core/arch/arm/mm/core_mmu.c
@@ -590,7 +590,7 @@ static void add_va_space(struct tee_mmap_region *memory_map, size_t num_elems,
 
 uint32_t core_mmu_type_to_attr(enum teecore_memtypes t)
 {
-	const uint32_t attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_GLOBAL;
+	const uint32_t attr = TEE_MATTR_VALID_BLOCK;
 	const uint32_t cached = TEE_MATTR_CACHE_CACHED << TEE_MATTR_CACHE_SHIFT;
 	const uint32_t noncache = TEE_MATTR_CACHE_NONCACHE <<
 				  TEE_MATTR_CACHE_SHIFT;
diff --git a/core/arch/arm/mm/tee_pager.c b/core/arch/arm/mm/tee_pager.c
index a06c8ecf..099dc2ca 100644
--- a/core/arch/arm/mm/tee_pager.c
+++ b/core/arch/arm/mm/tee_pager.c
@@ -476,7 +476,7 @@ static void *pager_add_alias_page(paddr_t pa)
 	unsigned idx;
 	struct core_mmu_table_info *ti;
 	/* Alias pages mapped without write permission: runtime will care */
-	uint32_t attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_GLOBAL |
+	uint32_t attr = TEE_MATTR_VALID_BLOCK |
 			(TEE_MATTR_CACHE_CACHED << TEE_MATTR_CACHE_SHIFT) |
 			TEE_MATTR_SECURE | TEE_MATTR_PR;
 
@@ -627,9 +627,6 @@ static uint32_t get_area_mattr(uint32_t area_flags)
 			TEE_MATTR_CACHE_CACHED << TEE_MATTR_CACHE_SHIFT |
 			(area_flags & (TEE_MATTR_PRWX | TEE_MATTR_URWX));
 
-	if (!(area_flags & (TEE_MATTR_UR | TEE_MATTR_UX | TEE_MATTR_UW)))
-		attr |= TEE_MATTR_GLOBAL;
-
 	return attr;
 }
 
diff --git a/core/arch/arm/plat-imx/pm/pm-imx7.c b/core/arch/arm/plat-imx/pm/pm-imx7.c
index 64cd54f8..5d1284f3 100644
--- a/core/arch/arm/plat-imx/pm/pm-imx7.c
+++ b/core/arch/arm/plat-imx/pm/pm-imx7.c
@@ -134,7 +134,7 @@ int pm_imx7_iram_tbl_init(void)
 		map.size = AIPS1_SIZE; /* 4M for AIPS1/2/3 */
 		map.type = MEM_AREA_IO_SEC;
 		map.attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_PRW |
-			   TEE_MATTR_GLOBAL | TEE_MATTR_SECURE |
+			   TEE_MATTR_SECURE |
 			   (TEE_MATTR_CACHE_NONCACHE << TEE_MATTR_CACHE_SHIFT);
 		map_memarea_sections(&map, (uint32_t *)iram_tbl_virt_addr);
 	}
@@ -145,8 +145,7 @@ int pm_imx7_iram_tbl_init(void)
 	map.region_size = CORE_MMU_PGDIR_SIZE;
 	map.size = CORE_MMU_DEVICE_SIZE;
 	map.type = MEM_AREA_TEE_COHERENT;
-	map.attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_PRWX | TEE_MATTR_GLOBAL |
-		TEE_MATTR_SECURE;
+	map.attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_PRWX | TEE_MATTR_SECURE;
 	map_memarea_sections(&map, (uint32_t *)iram_tbl_virt_addr);
 
 	map.pa = GIC_BASE;
@@ -154,8 +153,7 @@ int pm_imx7_iram_tbl_init(void)
 	map.region_size = CORE_MMU_PGDIR_SIZE;
 	map.size = CORE_MMU_DEVICE_SIZE;
 	map.type = MEM_AREA_TEE_COHERENT;
-	map.attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_PRW | TEE_MATTR_GLOBAL |
-		TEE_MATTR_SECURE;
+	map.attr = TEE_MATTR_VALID_BLOCK | TEE_MATTR_PRW | TEE_MATTR_SECURE;
 	map_memarea_sections(&map, (uint32_t *)iram_tbl_virt_addr);
 
 	return 0;
