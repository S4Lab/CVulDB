ossc-db__pg_bulkload
commit d63c4f6bc1bc1318c213bfe80e8e7dbd93f2829f
Author:     MoonInsung <tsukiwamoon@gmail.com>
AuthorDate: Mon Oct 1 17:02:41 2018 +0900
Commit:     MoonInsung <tsukiwamoon@gmail.com>
CommitDate: Mon Oct 1 17:02:41 2018 +0900

    Fixed pg_bulk to mitigate attacks described in CVE-2018-1058

diff --git a/bin/pg_bulkload.c b/bin/pg_bulkload.c
index bf0b2a9..0bb132c 100644
--- a/bin/pg_bulkload.c
+++ b/bin/pg_bulkload.c
@@ -308,7 +308,7 @@ LoaderLoadMain(List *options)
 
 	command("BEGIN", 0, NULL);
 	params[0] = buf.data;
-	res = execute("SELECT * FROM pg_bulkload($1)", 1, params);
+	res = execute("SELECT * FROM pgbulkload.pg_bulkload($1)", 1, params);
 	if (PQresultStatus(res) == PGRES_COPY_IN)
 	{
 		PQclear(res);
diff --git a/lib/pg_bulkload--1.0.sql b/lib/pg_bulkload--1.0.sql
index 87852b7..bc1bf22 100644
--- a/lib/pg_bulkload--1.0.sql
+++ b/lib/pg_bulkload--1.0.sql
@@ -3,8 +3,10 @@
 -- complain if script is sourced in psql, rather than via CREATE EXTENSION
 \echo Use "CREATE EXTENSION pg_bulkload" to load this file. \quit
 
+CREATE SCHEMA pgbulkload;
+
 -- Adjust this setting to control where the objects get created.
-CREATE FUNCTION pg_bulkload(
+CREATE FUNCTION pgbulkload.pg_bulkload(
 	IN options text[],
 	OUT skip bigint,
 	OUT count bigint,
diff --git a/lib/pg_bulkload--unpackaged--1.0.sql b/lib/pg_bulkload--unpackaged--1.0.sql
index 1f7e38a..5678a47 100644
--- a/lib/pg_bulkload--unpackaged--1.0.sql
+++ b/lib/pg_bulkload--unpackaged--1.0.sql
@@ -3,4 +3,4 @@
 -- complain if script is sourced in psql, rather than via CREATE EXTENSION
 \echo Use "CREATE EXTENSION pg_bulkload" to load this file. \quit
 
-ALTER EXTENSION pg_bulkload ADD FUNCTION pg_bulkload(text[]);
+ALTER EXTENSION pg_bulkload ADD FUNCTION pgbulkload.pg_bulkload(text[]);
diff --git a/lib/pg_bulkload.control b/lib/pg_bulkload.control
index e8b23cb..c8b5a3b 100644
--- a/lib/pg_bulkload.control
+++ b/lib/pg_bulkload.control
@@ -3,4 +3,3 @@ comment = 'pg_bulkload is a high speed data loading utility for PostgreSQL'
 default_version = '1.0'
 module_pathname = '$libdir/pg_bulkload'
 relocatable = false
-schema = public
diff --git a/lib/pg_bulkload.sql.in b/lib/pg_bulkload.sql.in
index 4b901bc..292d906 100644
--- a/lib/pg_bulkload.sql.in
+++ b/lib/pg_bulkload.sql.in
@@ -5,11 +5,11 @@
  */
 
 -- Adjust this setting to control where the objects get created.
-SET search_path = public;
-
 BEGIN;
 
-CREATE FUNCTION pg_bulkload(
+CREATE SCHEMA pgbulkload;
+
+CREATE FUNCTION pgbulkload.pg_bulkload(
 	IN options text[],
 	OUT skip bigint,
 	OUT count bigint,
diff --git a/lib/uninstall_pg_bulkload.sql b/lib/uninstall_pg_bulkload.sql
index b602ed4..87a5ee1 100644
--- a/lib/uninstall_pg_bulkload.sql
+++ b/lib/uninstall_pg_bulkload.sql
@@ -4,6 +4,5 @@
  *    Copyright (c) 2007-2017, NIPPON TELEGRAPH AND TELEPHONE CORPORATION
  */
 
-SET search_path = public;
-
-DROP FUNCTION pg_bulkload(text[]);
+DROP FUNCTION pgbulkload.pg_bulkload(text[]);
+DROP SCHEMA pgbulkload;
diff --git a/lib/writer_binary.c b/lib/writer_binary.c
index 70413cd..40cfb10 100644
--- a/lib/writer_binary.c
+++ b/lib/writer_binary.c
@@ -384,7 +384,7 @@ BinaryWriterSendQuery(BinaryWriter *self, PGconn *conn, char *queueName, char *l
 
 	initStringInfo(&buf);
 	appendStringInfoString(&buf, 
-		"SELECT * FROM pg_bulkload(ARRAY["
+		"SELECT * FROM pgbulkload.pg_bulkload(ARRAY["
 		"'TYPE=TUPLE',"
 		"'INPUT=' || $1,"
 		"'WRITER=BINARY',"
diff --git a/lib/writer_buffered.c b/lib/writer_buffered.c
index 49f40b9..81f1c44 100644
--- a/lib/writer_buffered.c
+++ b/lib/writer_buffered.c
@@ -222,7 +222,7 @@ BufferedWriterSendQuery(BufferedWriter *self, PGconn *conn, char *queueName, cha
 	params[7] = (self->base.truncate ? "true" : "no");
 
 	return PQsendQueryParams(conn,
-		"SELECT * FROM pg_bulkload(ARRAY["
+		"SELECT * FROM pgbulkload.pg_bulkload(ARRAY["
 		"'TYPE=TUPLE',"
 		"'INPUT=' || $1,"
 		"'WRITER=BUFFERED',"
diff --git a/lib/writer_direct.c b/lib/writer_direct.c
index 5595188..cb4f349 100644
--- a/lib/writer_direct.c
+++ b/lib/writer_direct.c
@@ -435,7 +435,7 @@ DirectWriterSendQuery(DirectWriter *self, PGconn *conn, char *queueName, char *l
 	params[7] = (self->base.truncate ? "true" : "no");
 
 	return PQsendQueryParams(conn,
-		"SELECT * FROM pg_bulkload(ARRAY["
+		"SELECT * FROM pgbulkload.pg_bulkload(ARRAY["
 		"'TYPE=TUPLE',"
 		"'INPUT=' || $1,"
 		"'WRITER=DIRECT',"
diff --git a/util/pg_timestamp.sql.in b/util/pg_timestamp.sql.in
index 31c4880..1126a3b 100644
--- a/util/pg_timestamp.sql.in
+++ b/util/pg_timestamp.sql.in
@@ -4,12 +4,10 @@
  *    Copyright (c) 2007-2011, NIPPON TELEGRAPH AND TELEPHONE CORPORATION
  */
 
-SET search_path = public;
-
 BEGIN;
 
 -- Register the user defined function
-CREATE FUNCTION pg_timestamp_in(cstring, oid, int4)
+CREATE FUNCTION public.pg_timestamp_in(cstring, oid, int4)
 	RETURNS timestamp
 	LANGUAGE C
 	as 'MODULE_PATHNAME', 'pg_timestamp_in';
diff --git a/util/uninstall_pg_timestamp.sql b/util/uninstall_pg_timestamp.sql
index 18cc8c6..9accae8 100644
--- a/util/uninstall_pg_timestamp.sql
+++ b/util/uninstall_pg_timestamp.sql
@@ -4,14 +4,12 @@
  *    Copyright (c) 2007-2011, NIPPON TELEGRAPH AND TELEPHONE CORPORATION
  */
 
-SET search_path = public;
-
 BEGIN;
 
 UPDATE pg_type
    SET typinput = (SELECT oid FROM pg_proc WHERE proname='timestamp_in')
  WHERE typname='timestamp';
 
-DROP FUNCTION pg_timestamp_in(cstring, oid, int4);
+DROP FUNCTION public.pg_timestamp_in(cstring, oid, int4);
 
 COMMIT;
