siemens__jailhouse
commit 9b7d0557abf32afc5bd02067c8bb04fdda984db0
Author:     Jan Kiszka <jan.kiszka@siemens.com>
AuthorDate: Wed Aug 15 10:38:55 2018 +0200
Commit:     Jan Kiszka <jan.kiszka@siemens.com>
CommitDate: Wed Aug 15 11:00:31 2018 +0200

    x86: Harden non-present mappings against L1TF
    
    Foreshadow(-NG) has been published, and while we are already pretty well
    hardened by avoiding to share cores and by hiding sensitive data of
    remote cells when running in hypervisor mode, we can and probably should
    do better: I key aspect of CVE-2018-3620 and CVE-2018-3646 is that Intel
    CPUs ignore the present bit when speculatively using PTEs. Therefore, a
    simple and practically cost-free mitigation is to ensure that
    non-present page table entries point to non-present physical addresses.
    We can easily achieve that by folding invalid address bits into
    PAGE_NONPRESENT_FLAGS.
    
    This change primarily affects the hiding of the per-CPU mappings in the
    hypervisor address space after setup. However, we also modify the
    clear_entry callback to do the same, although there is currently no case
    in the hypervisor address space where we hide sensitive data via
    paging_destroy - better safe than sorry /wrt potential future changes.
    
    Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>

diff --git a/hypervisor/arch/x86/include/asm/paging.h b/hypervisor/arch/x86/include/asm/paging.h
index 05bb2808..ef614b02 100644
--- a/hypervisor/arch/x86/include/asm/paging.h
+++ b/hypervisor/arch/x86/include/asm/paging.h
@@ -14,6 +14,7 @@
 #define _JAILHOUSE_ASM_PAGING_H
 
 #include <jailhouse/types.h>
+#include <jailhouse/utils.h>
 #include <asm/processor.h>
 
 #define PAGE_SHIFT		12
@@ -33,7 +34,11 @@
 #define PAGE_DEFAULT_FLAGS	(PAGE_FLAG_PRESENT | PAGE_FLAG_RW)
 #define PAGE_READONLY_FLAGS	PAGE_FLAG_PRESENT
 #define PAGE_PRESENT_FLAGS	PAGE_FLAG_PRESENT
-#define PAGE_NONPRESENT_FLAGS	0
+/*
+ * Set the higher physical address bits so that non-present mappings point to a
+ * non-existing physical address, hardening against the L1TF disaster.
+ */
+#define PAGE_NONPRESENT_FLAGS	(INVALID_PHYS_ADDR & BIT_MASK(51, 30))
 
 #define INVALID_PHYS_ADDR	(~0UL)
 
diff --git a/hypervisor/arch/x86/paging.c b/hypervisor/arch/x86/paging.c
index 8c9c8b88..9f846dc9 100644
--- a/hypervisor/arch/x86/paging.c
+++ b/hypervisor/arch/x86/paging.c
@@ -12,7 +12,6 @@
 
 #include <jailhouse/paging.h>
 #include <jailhouse/string.h>
-#include <jailhouse/utils.h>
 #include <asm/vcpu.h>
 
 #define X86_FLAG_HUGEPAGE	0x80
@@ -36,7 +35,7 @@ static void x86_64_set_next_pt(pt_entry_t pte, unsigned long next_pt)
 
 static void x86_64_clear_entry(pt_entry_t pte)
 {
-	*pte = 0;
+	*pte = PAGE_NONPRESENT_FLAGS;
 }
 
 static bool x86_64_page_table_empty(page_table_t page_table)
