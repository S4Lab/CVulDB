aviraxp__ONEPLUS_MSM8994_KAWORI
commit 823750804b28af470c12ac6be39192f9abf332f2
Author:     Xin Long <lucien.xin@gmail.com>
AuthorDate: Tue Oct 17 23:26:10 2017 +0800
Commit:     Oskar Kratochvil <oskarkratochvil86@yahoo.com>
CommitDate: Sun Oct 7 14:48:24 2018 +0200

    sctp: do not peel off an assoc from one netns to another one
    
    Now when peeling off an association to the sock in another netns, all
    transports in this assoc are not to be rehashed and keep use the old
    key in hashtable.
    
    As a transport uses sk->net as the hash key to insert into hashtable,
    it would miss removing these transports from hashtable due to the new
    netns when closing the sock and all transports are being freeed, then
    later an use-after-free issue could be caused when looking up an asoc
    and dereferencing those transports.
    
    This is a very old issue since very beginning, ChunYu found it with
    syzkaller fuzz testing with this series:
    
      socket$inet6_sctp()
      bind$inet6()
      sendto$inet6()
      unshare(0x40000000)
      getsockopt$inet_sctp6_SCTP_GET_ASSOC_ID_LIST()
      getsockopt$inet_sctp6_SCTP_SOCKOPT_PEELOFF()
    
    This patch is to block this call when peeling one assoc off from one
    netns to another one, so that the netns of all transport would not
    go out-sync with the key in hashtable.
    
    Note that this patch didn't fix it by rehashing transports, as it's
    difficult to handle the situation when the tuple is already in use
    in the new netns. Besides, no one would like to peel off one assoc
    to another netns, considering ipaddrs, ifaces, etc. are usually
    different.
    
    Reported-by: ChunYu Wang <chunwang@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    CVE-2017-15115
    Signed-off-by: Kevin F. Haggerty <haggertk@lineageos.org>
    
    Change-Id: Ic4bee33fc4b0de04ef3c417e08c64c78ada809ce

diff --git a/net/sctp/socket.c b/net/sctp/socket.c
index 4358ae85cda..aad82221bfc 100644
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@ -4307,6 +4307,10 @@ int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
 	struct sctp_af *af;
 	int err = 0;
 
+	/* Do not peel off from one netns to another one. */
+	if (!net_eq(current->nsproxy->net_ns, sock_net(sk)))
+		return -EINVAL;
+
 	if (!asoc)
 		return -EINVAL;
 
