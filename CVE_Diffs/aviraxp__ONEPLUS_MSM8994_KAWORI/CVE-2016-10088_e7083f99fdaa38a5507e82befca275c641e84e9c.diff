aviraxp__ONEPLUS_MSM8994_KAWORI
commit e7083f99fdaa38a5507e82befca275c641e84e9c
Author:     Al Viro <viro@zeniv.linux.org.uk>
AuthorDate: Fri Dec 16 13:42:06 2016 -0500
Commit:     Wang Han <416810799@qq.com>
CommitDate: Sun Apr 30 01:00:19 2017 -0700

    sg_write()/bsg_write() is not fit to be called under KERNEL_DS(CVE-2016-10088)
    
    Both damn things interpret userland pointers embedded into the payload;
    worse, they are actually traversing those.  Leaving aside the bad
    API design, this is very much _not_ safe to call with KERNEL_DS.
    Bail out early if that happens.
    
    Change-Id: If57023bbb89aedee53d4f24f7423e59c9ac71934
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

diff --git a/block/bsg.c b/block/bsg.c
index 420a5a9f1b2..76801e57f55 100644
--- a/block/bsg.c
+++ b/block/bsg.c
@@ -675,6 +675,9 @@ bsg_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 
 	dprintk("%s: write %Zd bytes\n", bd->name, count);
 
+	if (unlikely(segment_eq(get_fs(), KERNEL_DS)))
+		return -EINVAL;
+
 	bsg_set_block(bd, file);
 
 	bytes_written = 0;
diff --git a/drivers/scsi/sg.c b/drivers/scsi/sg.c
index eb81c98386b..e059ad41fbf 100644
--- a/drivers/scsi/sg.c
+++ b/drivers/scsi/sg.c
@@ -568,6 +568,9 @@ sg_write(struct file *filp, const char __user *buf, size_t count, loff_t * ppos)
 	sg_io_hdr_t *hp;
 	unsigned char cmnd[MAX_COMMAND_SIZE];
 
+	if (unlikely(segment_eq(get_fs(), KERNEL_DS)))
+		return -EINVAL;
+
 	if ((!(sfp = (Sg_fd *) filp->private_data)) || (!(sdp = sfp->parentdp)))
 		return -ENXIO;
 	SCSI_LOG_TIMEOUT(3, printk("sg_write: %s, count=%d\n",
