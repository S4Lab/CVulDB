aviraxp__ONEPLUS_MSM8994_KAWORI
commit 9eb815ce3e7b6c92f9b1eabf4c75c99b4555a1e8
Author:     VijayaKumar T M <vtmuni@codeaurora.org>
AuthorDate: Wed Sep 7 12:53:43 2016 +0530
Commit:     Wang Han <416810799@qq.com>
CommitDate: Sun Apr 30 01:02:31 2017 -0700

    msm: camera: Restructure data handling to be more robust
    
    Use dynamic array allocation instead of static array to
    prevent stack overflow.
    User-supplied number of bytes may result in integer overflow.
    To fix this we check that the num_byte isn't above 8K size.
    
    CRs-Fixed: 1060554
    Change-Id: I9b05b846e5cc3a62b1a0a67be529f09abc764796
    Signed-off-by: VijayaKumar T M <vtmuni@codeaurora.org>
    mh0rst: Back port, fixes CVE-2016-6741

diff --git a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_cci_i2c.c b/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_cci_i2c.c
index f7da972b732..510f73ba09a 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_cci_i2c.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_cci_i2c.c
@@ -27,7 +27,7 @@ int32_t msm_camera_cci_i2c_read(struct msm_camera_i2c_client *client,
 	enum msm_camera_i2c_data_type data_type)
 {
 	int32_t rc = -EFAULT;
-	unsigned char buf[client->addr_type+data_type];
+	unsigned char *buf = NULL;
 	struct msm_camera_cci_ctrl cci_ctrl;
 
 	if ((client->addr_type != MSM_CAMERA_I2C_BYTE_ADDR
@@ -36,6 +36,17 @@ int32_t msm_camera_cci_i2c_read(struct msm_camera_i2c_client *client,
 		&& data_type != MSM_CAMERA_I2C_WORD_DATA))
 		return rc;
 
+	if (client->addr_type > UINT_MAX - data_type) {
+		pr_err("%s: integer overflow prevented\n", __func__);
+		return rc;
+	}
+
+	buf = kzalloc(client->addr_type+data_type, GFP_KERNEL);
+	if (!buf) {
+		pr_err("%s:%d no memory\n", __func__, __LINE__);
+		return -ENOMEM;
+	}
+
 	cci_ctrl.cmd = MSM_CCI_I2C_READ;
 	cci_ctrl.cci_info = client->cci_client;
 	cci_ctrl.cfg.cci_i2c_read_cfg.addr = addr;
@@ -46,6 +57,8 @@ int32_t msm_camera_cci_i2c_read(struct msm_camera_i2c_client *client,
 			core, ioctl, VIDIOC_MSM_CCI_CFG, &cci_ctrl);
 	if (rc < 0) {
 		pr_err("%s: line %d rc = %d\n", __func__, __LINE__, rc);
+		kfree(buf);
+		buf = NULL;
 		return rc;
 	}
 	rc = cci_ctrl.status;
@@ -55,6 +68,8 @@ int32_t msm_camera_cci_i2c_read(struct msm_camera_i2c_client *client,
 		*data = buf[0] << 8 | buf[1];
 
 	S_I2C_DBG("%s addr = 0x%x data: 0x%x\n", __func__, addr, *data);
+	kfree(buf);
+	buf = NULL;
 	return rc;
 }
 
diff --git a/include/media/msm_cam_sensor.h b/include/media/msm_cam_sensor.h
index 35aefacac40..f15c013f8fd 100644
--- a/include/media/msm_cam_sensor.h
+++ b/include/media/msm_cam_sensor.h
@@ -15,6 +15,7 @@
 #endif
 
 #define I2C_SEQ_REG_SETTING_MAX   5
+#define I2C_REG_DATA_MAX          (8*1024)
 
 #define MSM_SENSOR_MCLK_8HZ   8000000
 #define MSM_SENSOR_MCLK_16HZ  16000000
