linux-scraping__linux-grsecurity
commit 1a9e0b92a34b8bfaa56cb9b2701bc3f44ede7512
Author:     Brad Spengler <spender@grsecurity.net>
AuthorDate: Mon Jun 17 19:05:02 2013 -0400
Commit:     Mickaël Salaün <mic@digikod.net>
CommitDate: Mon Jun 17 19:05:02 2013 -0400

    grsec: Apply grsecurity-2.9.1-2.6.32.61-201306171902.patch
    
    commit 0056f217514c7736f522a8ced622c6bd223b59e1
    Author: Al Viro <viro@ZenIV.linux.org.uk>
    Date:   Sun Jun 16 18:06:06 2013 +0100
    
        Upstream commit: 8177a9d79c0e942dcac3312f15585d0344d505a5
    
        lseek(fd, n, SEEK_END) does *not* go to eof - n
    
        When you copy some code, you are supposed to read it.  If nothing else,
        there's a chance to spot and fix an obvious bug instead of sharing it...
    
        X-Song: "I Got It From Agnes", by Tom Lehrer
        Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
        [ Tom Lehrer? You're dating yourself, Al ]
        Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    
        Conflicts:
    
            drivers/net/ethernet/brocade/bna/bnad_debugfs.c
            drivers/scsi/fnic/fnic_debugfs.c
    
        Conflicts:
    
            drivers/scsi/bfa/bfad_debugfs.c
    
     drivers/scsi/lpfc/lpfc_debugfs.c |    2 +-
     1 files changed, 1 insertions(+), 1 deletions(-)
    
    commit 512be3e33ade78725da09f38fe463d956e186236
    Author: Neil Horman <nhorman@tuxdriver.com>
    Date:   Wed Jun 12 14:26:44 2013 -0400
    
        Upstream commit: c5c7774d7eb4397891edca9ebdf750ba90977a69
    
        sctp: fully initialize sctp_outq in sctp_outq_init
    
        In commit 2f94aabd9f6c925d77aecb3ff020f1cc12ed8f86
        (refactor sctp_outq_teardown to insure proper re-initalization)
        we modified sctp_outq_teardown to use sctp_outq_init to fully re-initalize the
        outq structure.  Steve West recently asked me why I removed the q->error = 0
        initalization from sctp_outq_teardown.  I did so because I was operating under
        the impression that sctp_outq_init would properly initalize that value for us,
        but it doesn't.  sctp_outq_init operates under the assumption that the outq
        struct is all 0's (as it is when called from sctp_association_init), but using
        it in __sctp_outq_teardown violates that assumption. We should do a memset in
        sctp_outq_init to ensure that the entire structure is in a known state there
        instead.
    
        Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
        Reported-by: "West, Steve (NSN - US/Fort Worth)" <steve.west@nsn.com>
        CC: Vlad Yasevich <vyasevich@gmail.com>
        CC: netdev@vger.kernel.org
        CC: davem@davemloft.net
        Acked-by: Vlad Yasevich <vyasevich@gmail.com>
        Signed-off-by: David S. Miller <davem@davemloft.net>
    
        Conflicts:
    
            net/sctp/outqueue.c
    
     net/sctp/outqueue.c |    8 ++------
     1 files changed, 2 insertions(+), 6 deletions(-)
    
    commit 9f438501e1d1b20ffb763810d6ad5a659fcfd51c
    Author: Daniel Borkmann <dborkman@redhat.com>
    Date:   Wed Jun 12 16:02:27 2013 +0200
    
        Upstream commit: 2dc85bf323515e59e15dfa858d1472bb25cad0fe
    
        packet: packet_getname_spkt: make sure string is always 0-terminated
    
        uaddr->sa_data is exactly of size 14, which is hard-coded here and
        passed as a size argument to strncpy(). A device name can be of size
        IFNAMSIZ (== 16), meaning we might leave the destination string
        unterminated. Thus, use strlcpy() and also sizeof() while we're
        at it. We need to memset the data area beforehand, since strlcpy
        does not padd the remaining buffer with zeroes for user space, so
        that we do not possibly leak anything.
    
        Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
        Signed-off-by: David S. Miller <davem@davemloft.net>
    
        Conflicts:
    
            net/packet/af_packet.c
    
     net/packet/af_packet.c |    8 +++-----
     1 files changed, 3 insertions(+), 5 deletions(-)
    
    commit 417f73ef83ef932d16859e52338b7e73ba1dea00
    Author: Kees Cook <keescook@chromium.org>
    Date:   Fri May 10 14:48:21 2013 -0700
    
        Upstream commit: e0e29b683d6784ef59bbc914eac85a04b650e63c
    
        b43: stop format string leaking into error msgs
    
        The module parameter "fwpostfix" is userspace controllable, unfiltered,
        and is used to define the firmware filename. b43_do_request_fw() populates
        ctx->errors[] on error, containing the firmware filename. b43err()
        parses its arguments as a format string. For systems with b43 hardware,
        this could lead to a uid-0 to ring-0 escalation.
    
        CVE-2013-2852
    
        Signed-off-by: Kees Cook <keescook@chromium.org>
        Cc: stable@vger.kernel.org
        Signed-off-by: John W. Linville <linville@tuxdriver.com>
    
     drivers/net/wireless/b43/main.c |    2 +-
     1 files changed, 1 insertions(+), 1 deletions(-)
    
    commit 3ebc75b9f45892d4224b4a31a482fc7e02dfaa3e
    Author: Dan Carpenter <dan.carpenter@oracle.com>
    Date:   Mon Jun 3 12:00:49 2013 +0300
    
        Upstream commit: a8241c63517ec0b900695daa9003cddc41c536a1
    
        ipvs: info leak in __ip_vs_get_dest_entries()
    
        The entry struct has a 2 byte hole after ->port and another 4 byte
        hole after ->stats.outpkts.  You must have CAP_NET_ADMIN in your
        namespace to hit this information leak.
    
        Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
        Acked-by: Julian Anastasov <ja@ssi.bg>
        Signed-off-by: Simon Horman <horms@verge.net.au>
        Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    
     net/netfilter/ipvs/ip_vs_ctl.c |    1 +
     1 files changed, 1 insertions(+), 0 deletions(-)
    
    commit 7fc42e1e2c096fb5ed989c8ccdc120b5843e054f
    Author: Brad Spengler <spender@grsecurity.net>
    Date:   Wed Jun 12 23:35:50 2013 -0400
    
        add linux/types.h header
    
     include/scsi/scsi_netlink.h |    1 +
     1 files changed, 1 insertions(+), 0 deletions(-)
    
    Signature-tree: b942b39952c2d5065ae3acb152dbb26a2ff70a08

diff --git a/drivers/net/wireless/b43/main.c b/drivers/net/wireless/b43/main.c
index 94dae56310e6..3cf2472a2dc5 100644
--- a/drivers/net/wireless/b43/main.c
+++ b/drivers/net/wireless/b43/main.c
@@ -2257,7 +2257,7 @@ static int b43_request_firmware(struct b43_wldev *dev)
 	for (i = 0; i < B43_NR_FWTYPES; i++) {
 		errmsg = ctx->errors[i];
 		if (strlen(errmsg))
-			b43err(dev->wl, errmsg);
+			b43err(dev->wl, "%s", errmsg);
 	}
 	b43_print_fw_helptext(dev->wl, 1);
 	err = -ENOENT;
diff --git a/drivers/scsi/lpfc/lpfc_debugfs.c b/drivers/scsi/lpfc/lpfc_debugfs.c
index 7c77a62c0ee1..e679b1e82a78 100644
--- a/drivers/scsi/lpfc/lpfc_debugfs.c
+++ b/drivers/scsi/lpfc/lpfc_debugfs.c
@@ -1074,7 +1074,7 @@ lpfc_debugfs_lseek(struct file *file, loff_t off, int whence)
 		pos = file->f_pos + off;
 		break;
 	case 2:
-		pos = debug->len - off;
+		pos = debug->len + off;
 	}
 	return (pos < 0 || pos > debug->len) ? -EINVAL : (file->f_pos = pos);
 }
diff --git a/include/scsi/scsi_netlink.h b/include/scsi/scsi_netlink.h
index 58ce8fe44783..4db14388ef37 100644
--- a/include/scsi/scsi_netlink.h
+++ b/include/scsi/scsi_netlink.h
@@ -22,6 +22,7 @@
 #ifndef SCSI_NETLINK_H
 #define SCSI_NETLINK_H
 
+#include <linux/types.h>
 #include <linux/netlink.h>
 
 
diff --git a/net/netfilter/ipvs/ip_vs_ctl.c b/net/netfilter/ipvs/ip_vs_ctl.c
index 1cdb2157543e..3e98c53f9a18 100644
--- a/net/netfilter/ipvs/ip_vs_ctl.c
+++ b/net/netfilter/ipvs/ip_vs_ctl.c
@@ -2286,6 +2286,7 @@ __ip_vs_get_dest_entries(const struct ip_vs_get_dests *get,
 		struct ip_vs_dest *dest;
 		struct ip_vs_dest_entry entry;
 
+		memset(&entry, 0, sizeof(entry));
 		list_for_each_entry(dest, &svc->destinations, n_list) {
 			if (count >= get->num_dests)
 				break;
diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index 02b775c476f5..ee6ea7850d01 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -1525,12 +1525,10 @@ static int packet_getname_spkt(struct socket *sock, struct sockaddr *uaddr,
 		return -EOPNOTSUPP;
 
 	uaddr->sa_family = AF_PACKET;
+	memset(uaddr->sa_data, 0, sizeof(uaddr->sa_data));
 	dev = dev_get_by_index(sock_net(sk), pkt_sk(sk)->ifindex);
-	if (dev) {
-		strncpy(uaddr->sa_data, dev->name, 14);
-		dev_put(dev);
-	} else
-		memset(uaddr->sa_data, 0, 14);
+	if (dev)
+		strlcpy(uaddr->sa_data, dev->name, sizeof(uaddr->sa_data));
 	*uaddr_len = sizeof(*uaddr);
 
 	return 0;
diff --git a/net/sctp/outqueue.c b/net/sctp/outqueue.c
index 23e5e97aa617..bc423b4a16fa 100644
--- a/net/sctp/outqueue.c
+++ b/net/sctp/outqueue.c
@@ -203,6 +203,8 @@ static inline int sctp_cacc_skip(struct sctp_transport *primary,
  */
 void sctp_outq_init(struct sctp_association *asoc, struct sctp_outq *q)
 {
+	memset(q, 0, sizeof(struct sctp_outq));
+
 	q->asoc = asoc;
 	INIT_LIST_HEAD(&q->out_chunk_list);
 	INIT_LIST_HEAD(&q->control_chunk_list);
@@ -210,13 +212,7 @@ void sctp_outq_init(struct sctp_association *asoc, struct sctp_outq *q)
 	INIT_LIST_HEAD(&q->sacked);
 	INIT_LIST_HEAD(&q->abandoned);
 
-	q->fast_rtx = 0;
-	q->outstanding_bytes = 0;
 	q->empty = 1;
-	q->cork  = 0;
-
-	q->malloced = 0;
-	q->out_qlen = 0;
 }
 
 /* Free the outqueue structure and any related pending chunks.
