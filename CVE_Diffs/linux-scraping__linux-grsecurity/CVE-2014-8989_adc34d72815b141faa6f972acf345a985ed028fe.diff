linux-scraping__linux-grsecurity
commit adc34d72815b141faa6f972acf345a985ed028fe
Author:     Eric W. Biederman <ebiederm@xmission.com>
AuthorDate: Fri Dec 5 17:51:47 2014 -0600
Commit:     Luis Henriques <luis.henriques@canonical.com>
CommitDate: Thu Jan 15 10:43:34 2015 +0000

    userns: Document what the invariant required for safe unprivileged mappings.
    
    commit 0542f17bf2c1f2430d368f44c8fcf2f82ec9e53e upstream.
    
    The rule is simple.  Don't allow anything that wouldn't be allowed
    without unprivileged mappings.
    
    It was previously overlooked that establishing gid mappings would
    allow dropping groups and potentially gaining permission to files and
    directories that had lesser permissions for a specific group than for
    all other users.
    
    This is the rule needed to fix CVE-2014-8989 and prevent any other
    security issues with new_idmap_permitted.
    
    The reason for this rule is that the unix permission model is old and
    there are programs out there somewhere that take advantage of every
    little corner of it.  So allowing a uid or gid mapping to be
    established without privielge that would allow anything that would not
    be allowed without that mapping will result in expectations from some
    code somewhere being violated.  Violated expectations about the
    behavior of the OS is a long way to say a security issue.
    
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

diff --git a/kernel/user_namespace.c b/kernel/user_namespace.c
index fcc02560fd6b..5afe24b03a9c 100644
--- a/kernel/user_namespace.c
+++ b/kernel/user_namespace.c
@@ -812,7 +812,9 @@ static bool new_idmap_permitted(const struct file *file,
 				struct user_namespace *ns, int cap_setid,
 				struct uid_gid_map *new_map)
 {
-	/* Allow mapping to your own filesystem ids */
+	/* Don't allow mappings that would allow anything that wouldn't
+	 * be allowed without the establishment of unprivileged mappings.
+	 */
 	if ((new_map->nr_extents == 1) && (new_map->extent[0].count == 1)) {
 		u32 id = new_map->extent[0].lower_first;
 		if (cap_setid == CAP_SETUID) {
