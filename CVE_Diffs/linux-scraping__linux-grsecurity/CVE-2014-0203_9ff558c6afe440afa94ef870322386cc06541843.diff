linux-scraping__linux-grsecurity
commit 9ff558c6afe440afa94ef870322386cc06541843
Author:     Al Viro <viro@zeniv.linux.org.uk>
AuthorDate: Tue Dec 22 23:45:11 2009 -0500
Commit:     Willy Tarreau <w@1wt.eu>
CommitDate: Sun Nov 23 10:55:33 2014 +0100

    fix autofs/afs/etc. magic mountpoint breakage
    
    We end up trying to kfree() nd.last.name on open("/mnt/tmp", O_CREAT)
    if /mnt/tmp is an autofs direct mount.  The reason is that nd.last_type
    is bogus here; we want LAST_BIND for everything of that kind and we
    get LAST_NORM left over from finding parent directory.
    
    So make sure that it *is* set properly; set to LAST_BIND before
    doing ->follow_link() - for normal symlinks it will be changed
    by __vfs_follow_link() and everything else needs it set that way.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    (cherry picked from commit 86acdca1b63e6890540fa19495cfc708beff3d8b)
    [wt: fixes CVE-2014-0203]
    Signed-off-by: Willy Tarreau <w@1wt.eu>

diff --git a/fs/namei.c b/fs/namei.c
index b0afbd427be7..0d766d201200 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -635,6 +635,7 @@ static __always_inline int __do_follow_link(struct path *path, struct nameidata
 		dget(dentry);
 	}
 	mntget(path->mnt);
+	nd->last_type = LAST_BIND;
 	cookie = dentry->d_inode->i_op->follow_link(dentry, nd);
 	error = PTR_ERR(cookie);
 	if (!IS_ERR(cookie)) {
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 67f7dc0a4b67..c75c5cdadf95 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -1381,7 +1381,6 @@ static void *proc_pid_follow_link(struct dentry *dentry, struct nameidata *nd)
 		goto out;
 
 	error = PROC_I(inode)->op.proc_get_link(inode, &nd->path);
-	nd->last_type = LAST_BIND;
 out:
 	return ERR_PTR(error);
 }
