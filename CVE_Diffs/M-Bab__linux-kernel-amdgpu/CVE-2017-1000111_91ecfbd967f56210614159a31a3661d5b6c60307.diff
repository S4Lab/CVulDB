M-Bab__linux-kernel-amdgpu
commit 91ecfbd967f56210614159a31a3661d5b6c60307
Author:     Willem de Bruijn <willemb@google.com>
AuthorDate: Thu Aug 10 12:41:58 2017 -0400
Commit:     Seth Forshee <seth.forshee@canonical.com>
CommitDate: Thu Aug 10 13:34:32 2017 -0500

    packet: fix tp_reserve race in packet_set_ring
    
    Updates to tp_reserve can race with reads of the field in
    packet_set_ring. Avoid this by holding the socket lock during
    updates in setsockopt PACKET_RESERVE.
    
    This bug was discovered by syzkaller.
    
    Fixes: 8913336a7e8d ("packet: add PACKET_RESERVE sockopt")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    (cherry picked from commit c27927e372f0785f3303e8fad94b85945e2c97b7
     git://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git)
    CVE-2017-1000111
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index e3eeed19cc7a..8cb32ca43416 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -3705,14 +3705,19 @@ packet_setsockopt(struct socket *sock, int level, int optname, char __user *optv
 
 		if (optlen != sizeof(val))
 			return -EINVAL;
-		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec)
-			return -EBUSY;
 		if (copy_from_user(&val, optval, sizeof(val)))
 			return -EFAULT;
 		if (val > INT_MAX)
 			return -EINVAL;
-		po->tp_reserve = val;
-		return 0;
+		lock_sock(sk);
+		if (po->rx_ring.pg_vec || po->tx_ring.pg_vec) {
+			ret = -EBUSY;
+		} else {
+			po->tp_reserve = val;
+			ret = 0;
+		}
+		release_sock(sk);
+		return ret;
 	}
 	case PACKET_LOSS:
 	{
