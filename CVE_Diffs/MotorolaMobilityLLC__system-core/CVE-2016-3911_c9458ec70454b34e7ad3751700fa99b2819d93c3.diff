MotorolaMobilityLLC__system-core
commit c9458ec70454b34e7ad3751700fa99b2819d93c3
Author:     Mark Salyzyn <salyzyn@google.com>
AuthorDate: Tue Aug 23 10:23:36 2016 -0700
Commit:     PDO SCM Team <hudsoncm@motorola.com>
CommitDate: Tue Oct 25 04:34:46 2016 -0500

    liblog: add __android_log_close()
    
    ANDROID-30963384: Update: Elevation of privilege vulnerability in Zygote process
    CVE-2016-3911
    Mot-CRs-fixed: (CR)
    
    Bug: 30963384
    
    (cherry picked from commit df7a4c6bae5f85532d79a93b7d9197a2aab17825)
    
    (cherry picked from commit c12d3d250ceb6a4380d2fcaf7f6d30bdea200dad)
    
    Change-Id: Id4313e99bf86b41c3713e1c2db0242d12aeb8bb7
    Reviewed-on: https://gerrit.mot.com/906611
    SME-Granted: SME Approvals Granted
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Jira Key <jirakey@motorola.com>
    (cherry picked from commit e1334018039f1b2288fcf27848232a9d08c6602e)

diff --git a/include/android/log.h b/include/android/log.h
index 1c171b7bf..391c826d5 100644
--- a/include/android/log.h
+++ b/include/android/log.h
@@ -88,6 +88,11 @@ typedef enum android_LogPriority {
     ANDROID_LOG_SILENT,     /* only for SetMinPriority(); must be last */
 } android_LogPriority;
 
+/*
+ * Release any logger resources (a new log write will immediately re-acquire)
+ */
+void __android_log_close();
+
 /*
  * Send a simple string to the log.
  */
diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index b802ed7b2..c7b5a8415 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -132,6 +132,41 @@ LIBLOG_ABI_PUBLIC int __android_log_dev_available()
     }
     return kLogNotAvailable;
 }
+/*
+ * Release any logger resources. A new log write will immediately re-acquire.
+ */
+LIBLOG_ABI_PUBLIC void __android_log_close()
+{
+    struct android_log_transport_write *transport;
+
+    __android_log_lock();
+
+    write_to_log = __write_to_log_init;
+
+    /*
+     * Threads that are actively writing at this point are not held back
+     * by a lock and are at risk of dropping the messages with a return code
+     * -EBADF. Prefer to return error code than add the overhead of a lock to
+     * each log writing call to guarantee delivery. In addition, anyone
+     * calling this is doing so to release the logging resources and shut down,
+     * for them to do so with outstanding log requests in other threads is a
+     * disengenuous use of this function.
+     */
+
+    write_transport_for_each(transport, &__android_log_persist_write) {
+        if (transport->close) {
+            (*transport->close)();
+        }
+    }
+
+    write_transport_for_each(transport, &__android_log_transport_write) {
+        if (transport->close) {
+            (*transport->close)();
+        }
+    }
+
+    __android_log_unlock();
+}
 
 /* log_init_lock assumed */
 static int __write_to_log_initialize()
diff --git a/liblog/tests/liblog_test.cpp b/liblog/tests/liblog_test.cpp
index 6aa4fb786..f0acdf8f8 100644
--- a/liblog/tests/liblog_test.cpp
+++ b/liblog/tests/liblog_test.cpp
@@ -132,12 +132,17 @@ TEST(liblog, __android_log_btwrite__android_logger_list_read) {
     ASSERT_TRUE(NULL != (logger_list = android_logger_list_open(
         LOG_ID_EVENTS, ANDROID_LOG_RDONLY | ANDROID_LOG_NONBLOCK, 1000, pid)));
 
+    // Check that we can close and reopen the logger
     log_time ts(CLOCK_MONOTONIC);
-
     ASSERT_LT(0, __android_log_btwrite(0, EVENT_TYPE_LONG, &ts, sizeof(ts)));
+    __android_log_close();
+
+    log_time ts1(CLOCK_MONOTONIC);
+    ASSERT_LT(0, __android_log_btwrite(0, EVENT_TYPE_LONG, &ts1, sizeof(ts1)));
     usleep(1000000);
 
     int count = 0;
+    int second_count = 0;
 
     for (;;) {
         log_msg log_msg;
@@ -161,10 +166,13 @@ TEST(liblog, __android_log_btwrite__android_logger_list_read) {
         log_time tx(eventData + 4 + 1);
         if (ts == tx) {
             ++count;
+        } else if (ts1 == tx) {
+            ++second_count;
         }
     }
 
     EXPECT_EQ(1, count);
+    EXPECT_EQ(1, second_count);
 
     android_logger_list_close(logger_list);
 }
