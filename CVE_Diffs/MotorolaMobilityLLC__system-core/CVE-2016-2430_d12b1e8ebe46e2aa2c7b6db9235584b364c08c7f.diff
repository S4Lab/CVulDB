MotorolaMobilityLLC__system-core
commit d12b1e8ebe46e2aa2c7b6db9235584b364c08c7f
Author:     Andy Seah <dntc46@motorola.com>
AuthorDate: Mon Apr 11 13:27:12 2016 -0500
Commit:     Choon Lee Seah <andyseah@motorola.com>
CommitDate: Tue Apr 12 11:32:38 2016 -0500

    Don't demangle symbol names.
    
    ANDROID-27299236: Elevation of Privilege Vulnerability in Debuggerd
    CVE-2016-2430
    
    Mot-CRs-fixed: (CR)
    
    Bug: http://b/27299236
    Change-Id: I26ef47f80d4d6048a316ba51e83365ff65d70439
    (cherry picked from commit fbbc744130c85538a754d245e958d7d79f24309c)
    
    Add DEMANGLE macro to non release-key builds for backtrace
    readability because of this security patch
    
    Change-Id: I67db8f9e0c420217ee45fb8be1c6c5f5833f862d
    Reviewed-on: http://gerrit.mot.com/841321
    SLTApproved: Slta Waiver <sltawvr@motorola.com>
    SME-Granted: SME Approvals Granted
    Tested-by: Jira Key <jirakey@motorola.com>
    Reviewed-by: Dmitry Sokolov <dima@motorola.com>
    Reviewed-by: Igor Kovalenko <igork@motorola.com>
    Submit-Approved: Choon Lee Seah <andyseah@motorola.com>
    Reviewed-by: Jason Hrycay <jason.hrycay@motorola.com>
    Reviewed-by: Christopher Fries <cfries@motorola.com>

diff --git a/libbacktrace/Android.mk b/libbacktrace/Android.mk
index 6a689a61d..72fcada25 100644
--- a/libbacktrace/Android.mk
+++ b/libbacktrace/Android.mk
@@ -37,6 +37,11 @@ build_host := true
 endif
 endif
 
+# IKARCH-2258: DEMANGLE macro introduce to make backtrace readable for non release-key builds
+ifneq ($(RADIO_SECURE),1)
+LOCAL_CPPFLAGS += -DDEMANGLE
+endif
+
 #-------------------------------------------------------------------------
 # The libbacktrace library.
 #-------------------------------------------------------------------------
diff --git a/libbacktrace/Backtrace.cpp b/libbacktrace/Backtrace.cpp
index 97f0ef445..ea9c6db7f 100644
--- a/libbacktrace/Backtrace.cpp
+++ b/libbacktrace/Backtrace.cpp
@@ -54,11 +54,14 @@ Backtrace::~Backtrace() {
   }
 }
 
+#ifdef DEMANGLE
 extern "C" char* __cxa_demangle(const char* mangled, char* buf, size_t* len,
                                 int* status);
+#endif
 
 std::string Backtrace::GetFunctionName(uintptr_t pc, uintptr_t* offset) {
   std::string func_name = GetFunctionNameRaw(pc, offset);
+#ifdef DEMANGLE
   if (!func_name.empty()) {
 #if defined(__APPLE__)
     // Mac OS' __cxa_demangle demangles "f" as "float"; last tested on 10.7.
@@ -72,6 +75,7 @@ std::string Backtrace::GetFunctionName(uintptr_t pc, uintptr_t* offset) {
       free(name);
     }
   }
+#endif
   return func_name;
 }
 
