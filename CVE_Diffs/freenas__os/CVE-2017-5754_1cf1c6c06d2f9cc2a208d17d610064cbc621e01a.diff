freenas__os
commit 1cf1c6c06d2f9cc2a208d17d610064cbc621e01a
Author:     emaste <emaste@FreeBSD.org>
AuthorDate: Fri Jan 19 15:42:34 2018 +0000
Commit:     emaste <emaste@FreeBSD.org>
CommitDate: Fri Jan 19 15:42:34 2018 +0000

    Enable KPTI by default on amd64 for non-AMD CPUs
    
    Kernel Page Table Isolation (KPTI) was introduced in r328083 as a
    mitigation for the 'Meltdown' vulnerability.  AMD CPUs are not affected,
    per https://www.amd.com/en/corporate/speculative-execution:
    
        We believe AMD processors are not susceptible due to our use of
        privilege level protections within paging architecture and no
        mitigation is required.
    
    Thus default KPTI to off for AMD CPUs, and to on for others.  This may
    be refined later as we obtain more specific information on the sets of
    CPUs that are and are not affected.
    
    Submitted by:   Mitchell Horne
    Reviewed by:    cem
    Relnotes:       Yes
    Security:       CVE-2017-5754
    Sponsored by:   The FreeBSD Foundation
    Differential Revision:  https://reviews.freebsd.org/D13971

diff --git a/sys/amd64/amd64/machdep.c b/sys/amd64/amd64/machdep.c
index 66eb053dcf2..a4e86b3718d 100644
--- a/sys/amd64/amd64/machdep.c
+++ b/sys/amd64/amd64/machdep.c
@@ -1621,6 +1621,7 @@ hammer_time(u_int64_t modulep, u_int64_t physfree)
 	mtx_init(&dt_lock, "descriptor tables", NULL, MTX_DEF);
 
 	/* exceptions */
+	pti = pti_get_default();
 	TUNABLE_INT_FETCH("vm.pmap.pti", &pti);
 
 	for (x = 0; x < NIDT; x++)
diff --git a/sys/x86/include/x86_var.h b/sys/x86/include/x86_var.h
index fd56277bc2e..431ff11abda 100644
--- a/sys/x86/include/x86_var.h
+++ b/sys/x86/include/x86_var.h
@@ -136,6 +136,7 @@ void	nmi_call_kdb_smp(u_int type, struct trapframe *frame);
 void	nmi_handle_intr(u_int type, struct trapframe *frame);
 void	pagecopy(void *from, void *to);
 void	printcpuinfo(void);
+int	pti_get_default(void);
 int	user_dbreg_trap(void);
 int	minidumpsys(struct dumperinfo *);
 struct pcb *get_pcb_td(struct thread *td);
diff --git a/sys/x86/x86/identcpu.c b/sys/x86/x86/identcpu.c
index 896ee7cb11f..20e9e141174 100644
--- a/sys/x86/x86/identcpu.c
+++ b/sys/x86/x86/identcpu.c
@@ -1608,6 +1608,16 @@ finishidentcpu(void)
 #endif
 }
 
+int
+pti_get_default(void)
+{
+
+	if (strcmp(cpu_vendor, AMD_VENDOR_ID) == 0)
+		return (0);
+
+	return (1);
+}
+
 static u_int
 find_cpu_vendor_id(void)
 {
