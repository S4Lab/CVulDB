freenas__os
commit b9c1fb3406de31e64b6dc3d3b194b295c623f0a6
Author:     delphij <delphij@FreeBSD.org>
AuthorDate: Tue Jan 7 19:02:08 2014 +0000
Commit:     delphij <delphij@FreeBSD.org>
CommitDate: Tue Jan 7 19:02:08 2014 +0000

    Import vendor fixes:
    
    197e0ea Fix for TLS record tampering bug.  (CVE-2013-4353).
    3462896 For DTLS we might need to retransmit messages from the
            previous session so keep a copy of write context in DTLS
            retransmission buffers instead of replacing it after
            sending CCS.  (CVE-2013-6450).
    ca98926 When deciding whether to use TLS 1.2 PRF and record hash
            algorithms use the version number in the corresponding
            SSL_METHOD structure instead of the SSL structure.  The
            SSL structure version is sometimes inaccurate.
            Note: OpenSSL 1.0.2 and later effectively do this already.
            (CVE-2013-6449).

diff --git a/ssl/d1_both.c b/ssl/d1_both.c
index de8bab873f2..4c8c77f5293 100644
--- a/ssl/d1_both.c
+++ b/ssl/d1_both.c
@@ -214,6 +214,12 @@ dtls1_hm_fragment_new(unsigned long frag_len, int reassembly)
 static void
 dtls1_hm_fragment_free(hm_fragment *frag)
 	{
+
+	if (frag->msg_header.is_ccs)
+		{
+		EVP_CIPHER_CTX_free(frag->msg_header.saved_retransmit_state.enc_write_ctx);
+		EVP_MD_CTX_destroy(frag->msg_header.saved_retransmit_state.write_hash);
+		}
 	if (frag->fragment) OPENSSL_free(frag->fragment);
 	if (frag->reassembly) OPENSSL_free(frag->reassembly);
 	OPENSSL_free(frag);
diff --git a/ssl/s3_both.c b/ssl/s3_both.c
index ead01c82a14..ae0ee27c41a 100644
--- a/ssl/s3_both.c
+++ b/ssl/s3_both.c
@@ -208,7 +208,11 @@ static void ssl3_take_mac(SSL *s)
 	{
 	const char *sender;
 	int slen;
-
+	/* If no new cipher setup return immediately: other functions will
+	 * set the appropriate error.
+	 */
+	if (s->s3->tmp.new_cipher == NULL)
+		return;
 	if (s->state & SSL_ST_CONNECT)
 		{
 		sender=s->method->ssl3_enc->server_finished_label;
diff --git a/ssl/s3_lib.c b/ssl/s3_lib.c
index e7c5dcb809f..3291e3d8e29 100644
--- a/ssl/s3_lib.c
+++ b/ssl/s3_lib.c
@@ -4274,7 +4274,7 @@ need to go to SSL_ST_ACCEPT.
 long ssl_get_algorithm2(SSL *s)
 	{
 	long alg2 = s->s3->tmp.new_cipher->algorithm2;
-	if (TLS1_get_version(s) >= TLS1_2_VERSION &&
+	if (s->method->version == TLS1_2_VERSION &&
 	    alg2 == (SSL_HANDSHAKE_MAC_DEFAULT|TLS1_PRF))
 		return SSL_HANDSHAKE_MAC_SHA256 | TLS1_PRF_SHA256;
 	return alg2;
diff --git a/ssl/ssl_locl.h b/ssl/ssl_locl.h
index 1b98947e677..ada80085495 100644
--- a/ssl/ssl_locl.h
+++ b/ssl/ssl_locl.h
@@ -621,6 +621,8 @@ extern SSL3_ENC_METHOD TLSv1_enc_data;
 extern SSL3_ENC_METHOD SSLv3_enc_data;
 extern SSL3_ENC_METHOD DTLSv1_enc_data;
 
+#define SSL_IS_DTLS(s) (s->method->version == DTLS1_VERSION)
+
 #define IMPLEMENT_tls_meth_func(version, func_name, s_accept, s_connect, \
 				s_get_meth) \
 const SSL_METHOD *func_name(void)  \
diff --git a/ssl/t1_enc.c b/ssl/t1_enc.c
index 809ad2ee1e5..b1a803d57bd 100644
--- a/ssl/t1_enc.c
+++ b/ssl/t1_enc.c
@@ -414,15 +414,20 @@ int tls1_change_cipher_state(SSL *s, int which)
 			s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;
 			else
 			s->mac_flags &= ~SSL_MAC_FLAG_WRITE_MAC_STREAM;
-		if (s->enc_write_ctx != NULL)
+		if (s->enc_write_ctx != NULL && !SSL_IS_DTLS(s))
 			reuse_dd = 1;
-		else if ((s->enc_write_ctx=OPENSSL_malloc(sizeof(EVP_CIPHER_CTX))) == NULL)
+		else if ((s->enc_write_ctx=EVP_CIPHER_CTX_new()) == NULL)
 			goto err;
-		else
-			/* make sure it's intialized in case we exit later with an error */
-			EVP_CIPHER_CTX_init(s->enc_write_ctx);
 		dd= s->enc_write_ctx;
-		mac_ctx = ssl_replace_hash(&s->write_hash,NULL);
+		if (SSL_IS_DTLS(s))
+			{
+			mac_ctx = EVP_MD_CTX_create();
+			if (!mac_ctx)
+				goto err;
+			s->write_hash = mac_ctx;
+			}
+		else
+			mac_ctx = ssl_replace_hash(&s->write_hash,NULL);
 #ifndef OPENSSL_NO_COMP
 		if (s->compress != NULL)
 			{
