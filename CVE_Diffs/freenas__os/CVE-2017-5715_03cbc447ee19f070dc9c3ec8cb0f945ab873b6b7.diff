freenas__os
commit 03cbc447ee19f070dc9c3ec8cb0f945ab873b6b7
Author:     tychon <tychon@FreeBSD.org>
AuthorDate: Mon Jan 15 18:37:03 2018 +0000
Commit:     tychon <tychon@FreeBSD.org>
CommitDate: Mon Jan 15 18:37:03 2018 +0000

    Provide some mitigation against CVE-2017-5715 by clearing registers
    upon returning from the guest which aren't immediately clobbered by
    the host.  This eradicates any remaining guest contents limiting their
    usefulness in an exploit gadget.
    
    This was inspired by this linux commit:
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=5b6c02f38315b720c593c6079364855d276886aa
    
    Reviewed by:    grehan, rgrimes
    Sponsored by:   Dell EMC Isilon
    Differential Revision:  https://reviews.freebsd.org/D13573

diff --git a/sys/amd64/vmm/amd/svm_support.S b/sys/amd64/vmm/amd/svm_support.S
index e9493bdce9a..e3eb1c12638 100644
--- a/sys/amd64/vmm/amd/svm_support.S
+++ b/sys/amd64/vmm/amd/svm_support.S
@@ -124,9 +124,21 @@ ENTRY(svm_launch)
 	pop %rdx
 	mov %edx, %eax
 	shr $32, %rdx
-	mov $MSR_GSBASE, %ecx
+	mov $MSR_GSBASE, %rcx
 	wrmsr
 
+	/*
+	 * Clobber the remaining registers with guest contents so they
+	 * can't be misused.
+	 */
+	xor %rbp, %rbp
+	xor %rdi, %rdi
+	xor %rsi, %rsi
+	xor %r8, %r8
+	xor %r9, %r9
+	xor %r10, %r10
+	xor %r11, %r11
+
 	VLEAVE
 	ret
 END(svm_launch)
diff --git a/sys/amd64/vmm/intel/vmx_support.S b/sys/amd64/vmm/intel/vmx_support.S
index 84fb5b051cd..1aa98ca0051 100644
--- a/sys/amd64/vmm/intel/vmx_support.S
+++ b/sys/amd64/vmm/intel/vmx_support.S
@@ -71,6 +71,20 @@
 	movq	VMXCTX_GUEST_R15(%rdi),%r15;				\
 	movq	VMXCTX_GUEST_RDI(%rdi),%rdi; /* restore rdi the last */
 
+/*
+ * Clobber the remaining registers with guest contents so they can't
+ * be misused.
+ */
+#define	VMX_GUEST_CLOBBER						\
+	xor	%rax, %rax;						\
+	xor	%rcx, %rcx;						\
+	xor	%rdx, %rdx;						\
+	xor	%rsi, %rsi;						\
+	xor	%r8, %r8;						\
+	xor	%r9, %r9;						\
+	xor	%r10, %r10;						\
+	xor	%r11, %r11;
+
 /*
  * Save and restore the host context.
  *
@@ -232,6 +246,8 @@ vmx_exit_guest:
 
 	VMX_HOST_RESTORE
 
+	VMX_GUEST_CLOBBER
+
 	/*
 	 * This will return to the caller of 'vmx_enter_guest()' with a return
 	 * value of VMX_GUEST_VMEXIT.
