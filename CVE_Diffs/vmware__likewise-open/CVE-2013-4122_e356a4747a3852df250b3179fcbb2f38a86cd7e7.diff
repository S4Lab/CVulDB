vmware__likewise-open
commit e356a4747a3852df250b3179fcbb2f38a86cd7e7
Author:     Rashmi Lohia <rlohia@vmware.com>
AuthorDate: Mon Apr 17 21:36:23 2017 -0700
Commit:     Jonathan Brown <brownj@vmware.com>
CommitDate: Thu Jul 27 11:33:49 2017 -0700

    CVE-2013-4122 fix for cyrus-sasl
    
    Cyrus SASL 2.1.23, 2.1.26, and earlier does not properly handle when a NULL value is returned
    upon an error by the crypt function as implemented in glibc 2.17 and later, which allows
    remote attackers to cause a denial of service (thread crash and consumption) via (1) an invalid
    salt or, when FIPS-140 is enabled, a (2) DES or (3) MD5 encrypted password, which triggers
    a NULL pointer dereference.
    
    Change-Id: Id929b943acdcf2377b1fad3ee691d15af2da9b5d

diff --git a/cyrus-sasl/pwcheck/pwcheck_getpwnam.c b/cyrus-sasl/pwcheck/pwcheck_getpwnam.c
index 4b34222ba..400289c40 100644
--- a/cyrus-sasl/pwcheck/pwcheck_getpwnam.c
+++ b/cyrus-sasl/pwcheck/pwcheck_getpwnam.c
@@ -32,6 +32,7 @@ char *userid;
 char *password;
 {
     char* r;
+    char* crpt_passwd;
     struct passwd *pwd;
 
     pwd = getpwnam(userid);
@@ -41,7 +42,7 @@ char *password;
     else if (pwd->pw_passwd[0] == '*') {
 	r = "Account disabled";
     }
-    else if (strcmp(pwd->pw_passwd, crypt(password, pwd->pw_passwd)) != 0) {
+    else if (!(crpt_passwd = crypt(password, pwd->pw_passwd)) || strcmp(pwd->pw_passwd, (const char *)crpt_passwd) != 0) {
 	r = "Incorrect password";
     }
     else {
diff --git a/cyrus-sasl/pwcheck/pwcheck_getspnam.c b/cyrus-sasl/pwcheck/pwcheck_getspnam.c
index 2b112866c..b5cb49616 100644
--- a/cyrus-sasl/pwcheck/pwcheck_getspnam.c
+++ b/cyrus-sasl/pwcheck/pwcheck_getspnam.c
@@ -30,6 +30,7 @@ extern char *crypt();
 char *pwcheck(userid, password)
 char *userid;
 char *password;
+char *crpt_passwd;
 {
     struct spwd *pwd;
 
@@ -38,7 +39,7 @@ char *password;
 	return "Userid not found";
     }
     
-    if (strcmp(pwd->sp_pwdp, crypt(password, pwd->sp_pwdp)) != 0) {
+    if (!(crpt_passwd = crypt(password, pwd->sp_pwdp)) || strcmp(pwd->sp_pwdp, (const char *)crpt_passwd) != 0) {
 	return "Incorrect password";
     }
     else {
diff --git a/cyrus-sasl/saslauthd/auth_getpwent.c b/cyrus-sasl/saslauthd/auth_getpwent.c
index a6f5f8721..70d64a390 100644
--- a/cyrus-sasl/saslauthd/auth_getpwent.c
+++ b/cyrus-sasl/saslauthd/auth_getpwent.c
@@ -70,6 +70,7 @@ auth_getpwent (
 {
     /* VARIABLES */
     struct passwd *pw;			/* pointer to passwd file entry */
+    char *crpt_passwd;
     /* END VARIABLES */
   
     pw = getpwnam(login);
@@ -79,7 +80,7 @@ auth_getpwent (
 	RETURN("NO");
     }
 
-    if (strcmp(pw->pw_passwd, (const char *)crypt(password, pw->pw_passwd))) {
+    if (!(crpt_passwd = crypt(password, pw->pw_passwd)) || strcmp(pw->pw_passwd, (const char *)crpt_passwd)) {
 	RETURN("NO");
     }
 
diff --git a/cyrus-sasl/saslauthd/auth_shadow.c b/cyrus-sasl/saslauthd/auth_shadow.c
index 4083b56db..542bd5cc3 100644
--- a/cyrus-sasl/saslauthd/auth_shadow.c
+++ b/cyrus-sasl/saslauthd/auth_shadow.c
@@ -180,16 +180,13 @@ auth_shadow (
      * not returning any information about a login until we have validated
      * the password.
      */
-    cpw = strdup((const char *)crypt(password, sp->sp_pwdp));
-    if (strcmp(sp->sp_pwdp, cpw)) {
+    if (!(cpw = crypt(password, sp->sp_pwdp)) || strcmp(sp->sp_pwdp, (const char *)cpw)) {
 	if (flags & VERBOSE) {
 	    syslog(LOG_DEBUG, "DEBUG: auth_shadow: pw mismatch: '%s' != '%s'",
 		   sp->sp_pwdp, cpw);
 	}
-	free(cpw);
 	RETURN("NO");
     }
-    free(cpw);
 
     /*
      * The following fields will be set to -1 if:
@@ -251,7 +248,7 @@ auth_shadow (
 	RETURN("NO");
     }
   
-    if (strcmp(upw->upw_passwd, crypt(password, upw->upw_passwd)) != 0) {
+    if (!(cpw = crypt(password, upw->upw_passwd)) || (strcmp(upw->upw_passwd, (const char *)cpw) != 0)) {
 	if (flags & VERBOSE) {
 	    syslog(LOG_DEBUG, "auth_shadow: pw mismatch: %s != %s",
 		   password, upw->upw_passwd);
