RobertCNelson__linux-stable-rcn-ee
commit 624e4ff675005168e71d297185f4b75dbdf650af
Author:     Florian Zumbiehl <florz@florz.de>
AuthorDate: Tue Nov 13 11:12:46 2007 +0100
Commit:     Adrian Bunk <bunk@kernel.org>
CommitDate: Tue Nov 13 11:12:46 2007 +0100

    PPPOE: fix memory leak (local DoS) (CVE-2007-2525)
    
    This patch fixes a memory leak when a PPPoE socket is release()d after
    it has been connect()ed, but before the PPPIOCGCHAN ioctl ever has been
    called on it.
    
    This is somewhat of a security problem, too, since PPPoE sockets can be
    created by any user, so any user can easily allocate all the machine's
    RAM to non-swappable address space and thus DoS the system.
    
    Is there any specific reason for PPPoE sockets being available to any
    unprivileged process, BTW? After all, you need a packet socket for the
    discovery stage anyway, so it's unlikely that any unprivileged process
    will ever need to create a PPPoE socket, no? Allocating all session IDs
    for a known AC is a kind of DoS, too, after all - with Juniper ERXes,
    this is really easy, actually, since they don't ever assign session ids
    above 8000 ...
    
    Signed-off-by: Florian Zumbiehl <florz@florz.de>
    Signed-off-by: Adrian Bunk <bunk@kernel.org>

diff --git a/drivers/net/pppox.c b/drivers/net/pppox.c
index 9315046b3f55..3f8115db4d54 100644
--- a/drivers/net/pppox.c
+++ b/drivers/net/pppox.c
@@ -58,7 +58,7 @@ void pppox_unbind_sock(struct sock *sk)
 {
 	/* Clear connection to ppp device, if attached. */
 
-	if (sk->sk_state & (PPPOX_BOUND | PPPOX_ZOMBIE)) {
+	if (sk->sk_state & (PPPOX_BOUND | PPPOX_CONNECTED | PPPOX_ZOMBIE)) {
 		ppp_unregister_channel(&pppox_sk(sk)->chan);
 		sk->sk_state = PPPOX_DEAD;
 	}
