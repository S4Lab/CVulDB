cloudbase__qemu
commit 91225c670a0eec5354d679b4fd676e572cc37a57
Author:     Greg Kurz <groug@kaod.org>
AuthorDate: Sun Feb 26 23:43:17 2017 +0100
Commit:     Michael Roth <mdroth@linux.vnet.ibm.com>
CommitDate: Thu Mar 16 12:07:34 2017 -0500

    9pfs: local: utimensat: don't follow symlinks
    
    The local_utimensat() callback is vulnerable to symlink attacks because it
    calls qemu_utimens()->utimensat(AT_SYMLINK_NOFOLLOW) which follows symbolic
    links in all path elements but the rightmost one or qemu_utimens()->utimes()
    which follows symbolic links for all path elements.
    
    This patch converts local_utimensat() to rely on opendir_nofollow() and
    utimensat(AT_SYMLINK_NOFOLLOW) directly instead of using qemu_utimens().
    It is hence assumed that the OS supports utimensat(), i.e. has glibc 2.6
    or higher and linux 2.6.22 or higher, which seems reasonable nowadays.
    
    This partly fixes CVE-2016-9602.
    
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    (cherry picked from commit a33eda0dd99e00faa3bacae43d19490bb9500e07)
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>

diff --git a/hw/9pfs/9p-local.c b/hw/9pfs/9p-local.c
index 9caee0ede7..fa1477f6f1 100644
--- a/hw/9pfs/9p-local.c
+++ b/hw/9pfs/9p-local.c
@@ -960,13 +960,20 @@ static int local_chown(FsContext *fs_ctx, V9fsPath *fs_path, FsCred *credp)
 static int local_utimensat(FsContext *s, V9fsPath *fs_path,
                            const struct timespec *buf)
 {
-    char *buffer;
-    int ret;
-    char *path = fs_path->data;
+    char *dirpath = g_path_get_dirname(fs_path->data);
+    char *name = g_path_get_basename(fs_path->data);
+    int dirfd, ret = -1;
 
-    buffer = rpath(s, path);
-    ret = qemu_utimens(buffer, buf);
-    g_free(buffer);
+    dirfd = local_opendir_nofollow(s, dirpath);
+    if (dirfd == -1) {
+        goto out;
+    }
+
+    ret = utimensat(dirfd, name, buf, AT_SYMLINK_NOFOLLOW);
+    close_preserve_errno(dirfd);
+out:
+    g_free(dirpath);
+    g_free(name);
     return ret;
 }
 
